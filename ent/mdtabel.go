// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"fynegui/ent/mdtabel"
	"fynegui/ent/mdtypetabel"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// MDTabel is the model entity for the MDTabel schema.
type MDTabel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"ссылка,omitempty"`
	// Nameeng holds the value of the "nameeng" field.
	Nameeng string `json:"ИмяАнгл,omitempty"`
	// Synonym holds the value of the "synonym" field.
	Synonym string `json:"Синоним,omitempty"`
	// Por holds the value of the "por" field.
	Por string `json:"Порядок,omitempty"`
	// Parent holds the value of the "parent" field.
	Parent string `json:"Родитель,omitempty"`
	// TypesID holds the value of the "types_id" field.
	TypesID string `json:"types_id,omitempty"`
	// File holds the value of the "file" field.
	File string `json:"ИмяФайла,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MDTabelQuery when eager-loading is set.
	Edges MDTabelEdges `json:"edges"`
}

// MDTabelEdges holds the relations/edges for other nodes in the graph.
type MDTabelEdges struct {
	// ChildMdtabel holds the value of the child_mdtabel edge.
	ChildMdtabel []*MDTabel `json:"child_mdtabel,omitempty"`
	// ParentMdtabel holds the value of the parent_mdtabel edge.
	ParentMdtabel *MDTabel `json:"родитель,omitempty"`
	// Mdsubsystems holds the value of the mdsubsystems edge.
	Mdsubsystems []*MDSubSystems `json:"mdsubsystems,omitempty"`
	// Mdrekvizits holds the value of the mdrekvizits edge.
	Mdrekvizits []*MDRekvizit `json:"mdrekvizits,omitempty"`
	// Mdtypetabel holds the value of the mdtypetabel edge.
	Mdtypetabel *MDTypeTabel `json:"mdtypetabel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ChildMdtabelOrErr returns the ChildMdtabel value or an error if the edge
// was not loaded in eager-loading.
func (e MDTabelEdges) ChildMdtabelOrErr() ([]*MDTabel, error) {
	if e.loadedTypes[0] {
		return e.ChildMdtabel, nil
	}
	return nil, &NotLoadedError{edge: "child_mdtabel"}
}

// ParentMdtabelOrErr returns the ParentMdtabel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MDTabelEdges) ParentMdtabelOrErr() (*MDTabel, error) {
	if e.loadedTypes[1] {
		if e.ParentMdtabel == nil {
			// The edge parent_mdtabel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mdtabel.Label}
		}
		return e.ParentMdtabel, nil
	}
	return nil, &NotLoadedError{edge: "parent_mdtabel"}
}

// MdsubsystemsOrErr returns the Mdsubsystems value or an error if the edge
// was not loaded in eager-loading.
func (e MDTabelEdges) MdsubsystemsOrErr() ([]*MDSubSystems, error) {
	if e.loadedTypes[2] {
		return e.Mdsubsystems, nil
	}
	return nil, &NotLoadedError{edge: "mdsubsystems"}
}

// MdrekvizitsOrErr returns the Mdrekvizits value or an error if the edge
// was not loaded in eager-loading.
func (e MDTabelEdges) MdrekvizitsOrErr() ([]*MDRekvizit, error) {
	if e.loadedTypes[3] {
		return e.Mdrekvizits, nil
	}
	return nil, &NotLoadedError{edge: "mdrekvizits"}
}

// MdtypetabelOrErr returns the Mdtypetabel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MDTabelEdges) MdtypetabelOrErr() (*MDTypeTabel, error) {
	if e.loadedTypes[4] {
		if e.Mdtypetabel == nil {
			// The edge mdtypetabel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mdtypetabel.Label}
		}
		return e.Mdtypetabel, nil
	}
	return nil, &NotLoadedError{edge: "mdtypetabel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MDTabel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mdtabel.FieldID, mdtabel.FieldNameeng, mdtabel.FieldSynonym, mdtabel.FieldPor, mdtabel.FieldParent, mdtabel.FieldTypesID, mdtabel.FieldFile:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MDTabel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MDTabel fields.
func (mt *MDTabel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mdtabel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mt.ID = value.String
			}
		case mdtabel.FieldNameeng:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nameeng", values[i])
			} else if value.Valid {
				mt.Nameeng = value.String
			}
		case mdtabel.FieldSynonym:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field synonym", values[i])
			} else if value.Valid {
				mt.Synonym = value.String
			}
		case mdtabel.FieldPor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field por", values[i])
			} else if value.Valid {
				mt.Por = value.String
			}
		case mdtabel.FieldParent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent", values[i])
			} else if value.Valid {
				mt.Parent = value.String
			}
		case mdtabel.FieldTypesID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field types_id", values[i])
			} else if value.Valid {
				mt.TypesID = value.String
			}
		case mdtabel.FieldFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file", values[i])
			} else if value.Valid {
				mt.File = value.String
			}
		}
	}
	return nil
}

// QueryChildMdtabel queries the "child_mdtabel" edge of the MDTabel entity.
func (mt *MDTabel) QueryChildMdtabel() *MDTabelQuery {
	return (&MDTabelClient{config: mt.config}).QueryChildMdtabel(mt)
}

// QueryParentMdtabel queries the "parent_mdtabel" edge of the MDTabel entity.
func (mt *MDTabel) QueryParentMdtabel() *MDTabelQuery {
	return (&MDTabelClient{config: mt.config}).QueryParentMdtabel(mt)
}

// QueryMdsubsystems queries the "mdsubsystems" edge of the MDTabel entity.
func (mt *MDTabel) QueryMdsubsystems() *MDSubSystemsQuery {
	return (&MDTabelClient{config: mt.config}).QueryMdsubsystems(mt)
}

// QueryMdrekvizits queries the "mdrekvizits" edge of the MDTabel entity.
func (mt *MDTabel) QueryMdrekvizits() *MDRekvizitQuery {
	return (&MDTabelClient{config: mt.config}).QueryMdrekvizits(mt)
}

// QueryMdtypetabel queries the "mdtypetabel" edge of the MDTabel entity.
func (mt *MDTabel) QueryMdtypetabel() *MDTypeTabelQuery {
	return (&MDTabelClient{config: mt.config}).QueryMdtypetabel(mt)
}

// Update returns a builder for updating this MDTabel.
// Note that you need to call MDTabel.Unwrap() before calling this method if this MDTabel
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MDTabel) Update() *MDTabelUpdateOne {
	return (&MDTabelClient{config: mt.config}).UpdateOne(mt)
}

// Unwrap unwraps the MDTabel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MDTabel) Unwrap() *MDTabel {
	tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MDTabel is not a transactional entity")
	}
	mt.config.driver = tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MDTabel) String() string {
	var builder strings.Builder
	builder.WriteString("MDTabel(")
	builder.WriteString(fmt.Sprintf("id=%v", mt.ID))
	builder.WriteString(", nameeng=")
	builder.WriteString(mt.Nameeng)
	builder.WriteString(", synonym=")
	builder.WriteString(mt.Synonym)
	builder.WriteString(", por=")
	builder.WriteString(mt.Por)
	builder.WriteString(", parent=")
	builder.WriteString(mt.Parent)
	builder.WriteString(", types_id=")
	builder.WriteString(mt.TypesID)
	builder.WriteString(", file=")
	builder.WriteString(mt.File)
	builder.WriteByte(')')
	return builder.String()
}

// MDTabels is a parsable slice of MDTabel.
type MDTabels []*MDTabel

func (mt MDTabels) config(cfg config) {
	for _i := range mt {
		mt[_i].config = cfg
	}
}
