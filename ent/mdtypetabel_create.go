// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdtabel"
	"fynegui/ent/mdtypetabel"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDTypeTabelCreate is the builder for creating a MDTypeTabel entity.
type MDTypeTabelCreate struct {
	config
	mutation *MDTypeTabelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNameeng sets the "nameeng" field.
func (mttc *MDTypeTabelCreate) SetNameeng(s string) *MDTypeTabelCreate {
	mttc.mutation.SetNameeng(s)
	return mttc
}

// SetSynonym sets the "synonym" field.
func (mttc *MDTypeTabelCreate) SetSynonym(s string) *MDTypeTabelCreate {
	mttc.mutation.SetSynonym(s)
	return mttc
}

// SetPor sets the "por" field.
func (mttc *MDTypeTabelCreate) SetPor(s string) *MDTypeTabelCreate {
	mttc.mutation.SetPor(s)
	return mttc
}

// SetParent sets the "parent" field.
func (mttc *MDTypeTabelCreate) SetParent(s string) *MDTypeTabelCreate {
	mttc.mutation.SetParent(s)
	return mttc
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (mttc *MDTypeTabelCreate) SetNillableParent(s *string) *MDTypeTabelCreate {
	if s != nil {
		mttc.SetParent(*s)
	}
	return mttc
}

// SetID sets the "id" field.
func (mttc *MDTypeTabelCreate) SetID(s string) *MDTypeTabelCreate {
	mttc.mutation.SetID(s)
	return mttc
}

// AddChildMdtypetabelIDs adds the "child_mdtypetabels" edge to the MDTypeTabel entity by IDs.
func (mttc *MDTypeTabelCreate) AddChildMdtypetabelIDs(ids ...string) *MDTypeTabelCreate {
	mttc.mutation.AddChildMdtypetabelIDs(ids...)
	return mttc
}

// AddChildMdtypetabels adds the "child_mdtypetabels" edges to the MDTypeTabel entity.
func (mttc *MDTypeTabelCreate) AddChildMdtypetabels(m ...*MDTypeTabel) *MDTypeTabelCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttc.AddChildMdtypetabelIDs(ids...)
}

// SetParentMdtypetabelsID sets the "parent_mdtypetabels" edge to the MDTypeTabel entity by ID.
func (mttc *MDTypeTabelCreate) SetParentMdtypetabelsID(id string) *MDTypeTabelCreate {
	mttc.mutation.SetParentMdtypetabelsID(id)
	return mttc
}

// SetNillableParentMdtypetabelsID sets the "parent_mdtypetabels" edge to the MDTypeTabel entity by ID if the given value is not nil.
func (mttc *MDTypeTabelCreate) SetNillableParentMdtypetabelsID(id *string) *MDTypeTabelCreate {
	if id != nil {
		mttc = mttc.SetParentMdtypetabelsID(*id)
	}
	return mttc
}

// SetParentMdtypetabels sets the "parent_mdtypetabels" edge to the MDTypeTabel entity.
func (mttc *MDTypeTabelCreate) SetParentMdtypetabels(m *MDTypeTabel) *MDTypeTabelCreate {
	return mttc.SetParentMdtypetabelsID(m.ID)
}

// AddMdtypetabelIDs adds the "mdtypetabels" edge to the MDTabel entity by IDs.
func (mttc *MDTypeTabelCreate) AddMdtypetabelIDs(ids ...string) *MDTypeTabelCreate {
	mttc.mutation.AddMdtypetabelIDs(ids...)
	return mttc
}

// AddMdtypetabels adds the "mdtypetabels" edges to the MDTabel entity.
func (mttc *MDTypeTabelCreate) AddMdtypetabels(m ...*MDTabel) *MDTypeTabelCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttc.AddMdtypetabelIDs(ids...)
}

// Mutation returns the MDTypeTabelMutation object of the builder.
func (mttc *MDTypeTabelCreate) Mutation() *MDTypeTabelMutation {
	return mttc.mutation
}

// Save creates the MDTypeTabel in the database.
func (mttc *MDTypeTabelCreate) Save(ctx context.Context) (*MDTypeTabel, error) {
	var (
		err  error
		node *MDTypeTabel
	)
	if len(mttc.hooks) == 0 {
		if err = mttc.check(); err != nil {
			return nil, err
		}
		node, err = mttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDTypeTabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mttc.check(); err != nil {
				return nil, err
			}
			mttc.mutation = mutation
			if node, err = mttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mttc.hooks) - 1; i >= 0; i-- {
			if mttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mttc *MDTypeTabelCreate) SaveX(ctx context.Context) *MDTypeTabel {
	v, err := mttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mttc *MDTypeTabelCreate) Exec(ctx context.Context) error {
	_, err := mttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mttc *MDTypeTabelCreate) ExecX(ctx context.Context) {
	if err := mttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mttc *MDTypeTabelCreate) check() error {
	if _, ok := mttc.mutation.Nameeng(); !ok {
		return &ValidationError{Name: "nameeng", err: errors.New(`ent: missing required field "MDTypeTabel.nameeng"`)}
	}
	if v, ok := mttc.mutation.Nameeng(); ok {
		if err := mdtypetabel.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDTypeTabel.nameeng": %w`, err)}
		}
	}
	if _, ok := mttc.mutation.Synonym(); !ok {
		return &ValidationError{Name: "synonym", err: errors.New(`ent: missing required field "MDTypeTabel.synonym"`)}
	}
	if v, ok := mttc.mutation.Synonym(); ok {
		if err := mdtypetabel.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDTypeTabel.synonym": %w`, err)}
		}
	}
	if _, ok := mttc.mutation.Por(); !ok {
		return &ValidationError{Name: "por", err: errors.New(`ent: missing required field "MDTypeTabel.por"`)}
	}
	if v, ok := mttc.mutation.ID(); ok {
		if err := mdtypetabel.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MDTypeTabel.id": %w`, err)}
		}
	}
	return nil
}

func (mttc *MDTypeTabelCreate) sqlSave(ctx context.Context) (*MDTypeTabel, error) {
	_node, _spec := mttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MDTypeTabel.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (mttc *MDTypeTabelCreate) createSpec() (*MDTypeTabel, *sqlgraph.CreateSpec) {
	var (
		_node = &MDTypeTabel{config: mttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mdtypetabel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdtypetabel.FieldID,
			},
		}
	)
	_spec.OnConflict = mttc.conflict
	if id, ok := mttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mttc.mutation.Nameeng(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldNameeng,
		})
		_node.Nameeng = value
	}
	if value, ok := mttc.mutation.Synonym(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldSynonym,
		})
		_node.Synonym = value
	}
	if value, ok := mttc.mutation.Por(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldPor,
		})
		_node.Por = value
	}
	if nodes := mttc.mutation.ChildMdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.ChildMdtypetabelsTable,
			Columns: []string{mdtypetabel.ChildMdtypetabelsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mttc.mutation.ParentMdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdtypetabel.ParentMdtypetabelsTable,
			Columns: []string{mdtypetabel.ParentMdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Parent = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mttc.mutation.MdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.MdtypetabelsTable,
			Columns: []string{mdtypetabel.MdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDTypeTabel.Create().
//		SetNameeng(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDTypeTabelUpsert) {
//			SetNameeng(v+v).
//		}).
//		Exec(ctx)
//
func (mttc *MDTypeTabelCreate) OnConflict(opts ...sql.ConflictOption) *MDTypeTabelUpsertOne {
	mttc.conflict = opts
	return &MDTypeTabelUpsertOne{
		create: mttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDTypeTabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mttc *MDTypeTabelCreate) OnConflictColumns(columns ...string) *MDTypeTabelUpsertOne {
	mttc.conflict = append(mttc.conflict, sql.ConflictColumns(columns...))
	return &MDTypeTabelUpsertOne{
		create: mttc,
	}
}

type (
	// MDTypeTabelUpsertOne is the builder for "upsert"-ing
	//  one MDTypeTabel node.
	MDTypeTabelUpsertOne struct {
		create *MDTypeTabelCreate
	}

	// MDTypeTabelUpsert is the "OnConflict" setter.
	MDTypeTabelUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameeng sets the "nameeng" field.
func (u *MDTypeTabelUpsert) SetNameeng(v string) *MDTypeTabelUpsert {
	u.Set(mdtypetabel.FieldNameeng, v)
	return u
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDTypeTabelUpsert) UpdateNameeng() *MDTypeTabelUpsert {
	u.SetExcluded(mdtypetabel.FieldNameeng)
	return u
}

// SetSynonym sets the "synonym" field.
func (u *MDTypeTabelUpsert) SetSynonym(v string) *MDTypeTabelUpsert {
	u.Set(mdtypetabel.FieldSynonym, v)
	return u
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDTypeTabelUpsert) UpdateSynonym() *MDTypeTabelUpsert {
	u.SetExcluded(mdtypetabel.FieldSynonym)
	return u
}

// SetPor sets the "por" field.
func (u *MDTypeTabelUpsert) SetPor(v string) *MDTypeTabelUpsert {
	u.Set(mdtypetabel.FieldPor, v)
	return u
}

// UpdatePor sets the "por" field to the value that was provided on create.
func (u *MDTypeTabelUpsert) UpdatePor() *MDTypeTabelUpsert {
	u.SetExcluded(mdtypetabel.FieldPor)
	return u
}

// SetParent sets the "parent" field.
func (u *MDTypeTabelUpsert) SetParent(v string) *MDTypeTabelUpsert {
	u.Set(mdtypetabel.FieldParent, v)
	return u
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDTypeTabelUpsert) UpdateParent() *MDTypeTabelUpsert {
	u.SetExcluded(mdtypetabel.FieldParent)
	return u
}

// ClearParent clears the value of the "parent" field.
func (u *MDTypeTabelUpsert) ClearParent() *MDTypeTabelUpsert {
	u.SetNull(mdtypetabel.FieldParent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MDTypeTabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdtypetabel.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDTypeTabelUpsertOne) UpdateNewValues() *MDTypeTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mdtypetabel.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MDTypeTabel.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MDTypeTabelUpsertOne) Ignore() *MDTypeTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDTypeTabelUpsertOne) DoNothing() *MDTypeTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDTypeTabelCreate.OnConflict
// documentation for more info.
func (u *MDTypeTabelUpsertOne) Update(set func(*MDTypeTabelUpsert)) *MDTypeTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDTypeTabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameeng sets the "nameeng" field.
func (u *MDTypeTabelUpsertOne) SetNameeng(v string) *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetNameeng(v)
	})
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDTypeTabelUpsertOne) UpdateNameeng() *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdateNameeng()
	})
}

// SetSynonym sets the "synonym" field.
func (u *MDTypeTabelUpsertOne) SetSynonym(v string) *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetSynonym(v)
	})
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDTypeTabelUpsertOne) UpdateSynonym() *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdateSynonym()
	})
}

// SetPor sets the "por" field.
func (u *MDTypeTabelUpsertOne) SetPor(v string) *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetPor(v)
	})
}

// UpdatePor sets the "por" field to the value that was provided on create.
func (u *MDTypeTabelUpsertOne) UpdatePor() *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdatePor()
	})
}

// SetParent sets the "parent" field.
func (u *MDTypeTabelUpsertOne) SetParent(v string) *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetParent(v)
	})
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDTypeTabelUpsertOne) UpdateParent() *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdateParent()
	})
}

// ClearParent clears the value of the "parent" field.
func (u *MDTypeTabelUpsertOne) ClearParent() *MDTypeTabelUpsertOne {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.ClearParent()
	})
}

// Exec executes the query.
func (u *MDTypeTabelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDTypeTabelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDTypeTabelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MDTypeTabelUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MDTypeTabelUpsertOne.ID is not supported by MySQL driver. Use MDTypeTabelUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MDTypeTabelUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MDTypeTabelCreateBulk is the builder for creating many MDTypeTabel entities in bulk.
type MDTypeTabelCreateBulk struct {
	config
	builders []*MDTypeTabelCreate
	conflict []sql.ConflictOption
}

// Save creates the MDTypeTabel entities in the database.
func (mttcb *MDTypeTabelCreateBulk) Save(ctx context.Context) ([]*MDTypeTabel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mttcb.builders))
	nodes := make([]*MDTypeTabel, len(mttcb.builders))
	mutators := make([]Mutator, len(mttcb.builders))
	for i := range mttcb.builders {
		func(i int, root context.Context) {
			builder := mttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MDTypeTabelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mttcb *MDTypeTabelCreateBulk) SaveX(ctx context.Context) []*MDTypeTabel {
	v, err := mttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mttcb *MDTypeTabelCreateBulk) Exec(ctx context.Context) error {
	_, err := mttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mttcb *MDTypeTabelCreateBulk) ExecX(ctx context.Context) {
	if err := mttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDTypeTabel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDTypeTabelUpsert) {
//			SetNameeng(v+v).
//		}).
//		Exec(ctx)
//
func (mttcb *MDTypeTabelCreateBulk) OnConflict(opts ...sql.ConflictOption) *MDTypeTabelUpsertBulk {
	mttcb.conflict = opts
	return &MDTypeTabelUpsertBulk{
		create: mttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDTypeTabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mttcb *MDTypeTabelCreateBulk) OnConflictColumns(columns ...string) *MDTypeTabelUpsertBulk {
	mttcb.conflict = append(mttcb.conflict, sql.ConflictColumns(columns...))
	return &MDTypeTabelUpsertBulk{
		create: mttcb,
	}
}

// MDTypeTabelUpsertBulk is the builder for "upsert"-ing
// a bulk of MDTypeTabel nodes.
type MDTypeTabelUpsertBulk struct {
	create *MDTypeTabelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MDTypeTabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdtypetabel.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDTypeTabelUpsertBulk) UpdateNewValues() *MDTypeTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mdtypetabel.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MDTypeTabel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MDTypeTabelUpsertBulk) Ignore() *MDTypeTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDTypeTabelUpsertBulk) DoNothing() *MDTypeTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDTypeTabelCreateBulk.OnConflict
// documentation for more info.
func (u *MDTypeTabelUpsertBulk) Update(set func(*MDTypeTabelUpsert)) *MDTypeTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDTypeTabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameeng sets the "nameeng" field.
func (u *MDTypeTabelUpsertBulk) SetNameeng(v string) *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetNameeng(v)
	})
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDTypeTabelUpsertBulk) UpdateNameeng() *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdateNameeng()
	})
}

// SetSynonym sets the "synonym" field.
func (u *MDTypeTabelUpsertBulk) SetSynonym(v string) *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetSynonym(v)
	})
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDTypeTabelUpsertBulk) UpdateSynonym() *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdateSynonym()
	})
}

// SetPor sets the "por" field.
func (u *MDTypeTabelUpsertBulk) SetPor(v string) *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetPor(v)
	})
}

// UpdatePor sets the "por" field to the value that was provided on create.
func (u *MDTypeTabelUpsertBulk) UpdatePor() *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdatePor()
	})
}

// SetParent sets the "parent" field.
func (u *MDTypeTabelUpsertBulk) SetParent(v string) *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.SetParent(v)
	})
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDTypeTabelUpsertBulk) UpdateParent() *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.UpdateParent()
	})
}

// ClearParent clears the value of the "parent" field.
func (u *MDTypeTabelUpsertBulk) ClearParent() *MDTypeTabelUpsertBulk {
	return u.Update(func(s *MDTypeTabelUpsert) {
		s.ClearParent()
	})
}

// Exec executes the query.
func (u *MDTypeTabelUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MDTypeTabelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDTypeTabelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDTypeTabelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
