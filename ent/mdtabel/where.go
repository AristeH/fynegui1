// Code generated by entc, DO NOT EDIT.

package mdtabel

import (
	"fynegui/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Nameeng applies equality check predicate on the "nameeng" field. It's identical to NameengEQ.
func Nameeng(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameeng), v))
	})
}

// Synonym applies equality check predicate on the "synonym" field. It's identical to SynonymEQ.
func Synonym(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSynonym), v))
	})
}

// Por applies equality check predicate on the "por" field. It's identical to PorEQ.
func Por(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPor), v))
	})
}

// Parent applies equality check predicate on the "parent" field. It's identical to ParentEQ.
func Parent(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParent), v))
	})
}

// TypesID applies equality check predicate on the "types_id" field. It's identical to TypesIDEQ.
func TypesID(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypesID), v))
	})
}

// File applies equality check predicate on the "file" field. It's identical to FileEQ.
func File(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFile), v))
	})
}

// NameengEQ applies the EQ predicate on the "nameeng" field.
func NameengEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameeng), v))
	})
}

// NameengNEQ applies the NEQ predicate on the "nameeng" field.
func NameengNEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameeng), v))
	})
}

// NameengIn applies the In predicate on the "nameeng" field.
func NameengIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNameeng), v...))
	})
}

// NameengNotIn applies the NotIn predicate on the "nameeng" field.
func NameengNotIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNameeng), v...))
	})
}

// NameengGT applies the GT predicate on the "nameeng" field.
func NameengGT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameeng), v))
	})
}

// NameengGTE applies the GTE predicate on the "nameeng" field.
func NameengGTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameeng), v))
	})
}

// NameengLT applies the LT predicate on the "nameeng" field.
func NameengLT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameeng), v))
	})
}

// NameengLTE applies the LTE predicate on the "nameeng" field.
func NameengLTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameeng), v))
	})
}

// NameengContains applies the Contains predicate on the "nameeng" field.
func NameengContains(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameeng), v))
	})
}

// NameengHasPrefix applies the HasPrefix predicate on the "nameeng" field.
func NameengHasPrefix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameeng), v))
	})
}

// NameengHasSuffix applies the HasSuffix predicate on the "nameeng" field.
func NameengHasSuffix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameeng), v))
	})
}

// NameengEqualFold applies the EqualFold predicate on the "nameeng" field.
func NameengEqualFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameeng), v))
	})
}

// NameengContainsFold applies the ContainsFold predicate on the "nameeng" field.
func NameengContainsFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameeng), v))
	})
}

// SynonymEQ applies the EQ predicate on the "synonym" field.
func SynonymEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSynonym), v))
	})
}

// SynonymNEQ applies the NEQ predicate on the "synonym" field.
func SynonymNEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSynonym), v))
	})
}

// SynonymIn applies the In predicate on the "synonym" field.
func SynonymIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSynonym), v...))
	})
}

// SynonymNotIn applies the NotIn predicate on the "synonym" field.
func SynonymNotIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSynonym), v...))
	})
}

// SynonymGT applies the GT predicate on the "synonym" field.
func SynonymGT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSynonym), v))
	})
}

// SynonymGTE applies the GTE predicate on the "synonym" field.
func SynonymGTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSynonym), v))
	})
}

// SynonymLT applies the LT predicate on the "synonym" field.
func SynonymLT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSynonym), v))
	})
}

// SynonymLTE applies the LTE predicate on the "synonym" field.
func SynonymLTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSynonym), v))
	})
}

// SynonymContains applies the Contains predicate on the "synonym" field.
func SynonymContains(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSynonym), v))
	})
}

// SynonymHasPrefix applies the HasPrefix predicate on the "synonym" field.
func SynonymHasPrefix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSynonym), v))
	})
}

// SynonymHasSuffix applies the HasSuffix predicate on the "synonym" field.
func SynonymHasSuffix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSynonym), v))
	})
}

// SynonymEqualFold applies the EqualFold predicate on the "synonym" field.
func SynonymEqualFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSynonym), v))
	})
}

// SynonymContainsFold applies the ContainsFold predicate on the "synonym" field.
func SynonymContainsFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSynonym), v))
	})
}

// PorEQ applies the EQ predicate on the "por" field.
func PorEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPor), v))
	})
}

// PorNEQ applies the NEQ predicate on the "por" field.
func PorNEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPor), v))
	})
}

// PorIn applies the In predicate on the "por" field.
func PorIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPor), v...))
	})
}

// PorNotIn applies the NotIn predicate on the "por" field.
func PorNotIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPor), v...))
	})
}

// PorGT applies the GT predicate on the "por" field.
func PorGT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPor), v))
	})
}

// PorGTE applies the GTE predicate on the "por" field.
func PorGTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPor), v))
	})
}

// PorLT applies the LT predicate on the "por" field.
func PorLT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPor), v))
	})
}

// PorLTE applies the LTE predicate on the "por" field.
func PorLTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPor), v))
	})
}

// PorContains applies the Contains predicate on the "por" field.
func PorContains(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPor), v))
	})
}

// PorHasPrefix applies the HasPrefix predicate on the "por" field.
func PorHasPrefix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPor), v))
	})
}

// PorHasSuffix applies the HasSuffix predicate on the "por" field.
func PorHasSuffix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPor), v))
	})
}

// PorEqualFold applies the EqualFold predicate on the "por" field.
func PorEqualFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPor), v))
	})
}

// PorContainsFold applies the ContainsFold predicate on the "por" field.
func PorContainsFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPor), v))
	})
}

// ParentEQ applies the EQ predicate on the "parent" field.
func ParentEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParent), v))
	})
}

// ParentNEQ applies the NEQ predicate on the "parent" field.
func ParentNEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParent), v))
	})
}

// ParentIn applies the In predicate on the "parent" field.
func ParentIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParent), v...))
	})
}

// ParentNotIn applies the NotIn predicate on the "parent" field.
func ParentNotIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParent), v...))
	})
}

// ParentGT applies the GT predicate on the "parent" field.
func ParentGT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParent), v))
	})
}

// ParentGTE applies the GTE predicate on the "parent" field.
func ParentGTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParent), v))
	})
}

// ParentLT applies the LT predicate on the "parent" field.
func ParentLT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParent), v))
	})
}

// ParentLTE applies the LTE predicate on the "parent" field.
func ParentLTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParent), v))
	})
}

// ParentContains applies the Contains predicate on the "parent" field.
func ParentContains(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParent), v))
	})
}

// ParentHasPrefix applies the HasPrefix predicate on the "parent" field.
func ParentHasPrefix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParent), v))
	})
}

// ParentHasSuffix applies the HasSuffix predicate on the "parent" field.
func ParentHasSuffix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParent), v))
	})
}

// ParentIsNil applies the IsNil predicate on the "parent" field.
func ParentIsNil() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParent)))
	})
}

// ParentNotNil applies the NotNil predicate on the "parent" field.
func ParentNotNil() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParent)))
	})
}

// ParentEqualFold applies the EqualFold predicate on the "parent" field.
func ParentEqualFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParent), v))
	})
}

// ParentContainsFold applies the ContainsFold predicate on the "parent" field.
func ParentContainsFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParent), v))
	})
}

// TypesIDEQ applies the EQ predicate on the "types_id" field.
func TypesIDEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypesID), v))
	})
}

// TypesIDNEQ applies the NEQ predicate on the "types_id" field.
func TypesIDNEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypesID), v))
	})
}

// TypesIDIn applies the In predicate on the "types_id" field.
func TypesIDIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypesID), v...))
	})
}

// TypesIDNotIn applies the NotIn predicate on the "types_id" field.
func TypesIDNotIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypesID), v...))
	})
}

// TypesIDGT applies the GT predicate on the "types_id" field.
func TypesIDGT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypesID), v))
	})
}

// TypesIDGTE applies the GTE predicate on the "types_id" field.
func TypesIDGTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypesID), v))
	})
}

// TypesIDLT applies the LT predicate on the "types_id" field.
func TypesIDLT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypesID), v))
	})
}

// TypesIDLTE applies the LTE predicate on the "types_id" field.
func TypesIDLTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypesID), v))
	})
}

// TypesIDContains applies the Contains predicate on the "types_id" field.
func TypesIDContains(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypesID), v))
	})
}

// TypesIDHasPrefix applies the HasPrefix predicate on the "types_id" field.
func TypesIDHasPrefix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypesID), v))
	})
}

// TypesIDHasSuffix applies the HasSuffix predicate on the "types_id" field.
func TypesIDHasSuffix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypesID), v))
	})
}

// TypesIDIsNil applies the IsNil predicate on the "types_id" field.
func TypesIDIsNil() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTypesID)))
	})
}

// TypesIDNotNil applies the NotNil predicate on the "types_id" field.
func TypesIDNotNil() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTypesID)))
	})
}

// TypesIDEqualFold applies the EqualFold predicate on the "types_id" field.
func TypesIDEqualFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypesID), v))
	})
}

// TypesIDContainsFold applies the ContainsFold predicate on the "types_id" field.
func TypesIDContainsFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypesID), v))
	})
}

// FileEQ applies the EQ predicate on the "file" field.
func FileEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFile), v))
	})
}

// FileNEQ applies the NEQ predicate on the "file" field.
func FileNEQ(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFile), v))
	})
}

// FileIn applies the In predicate on the "file" field.
func FileIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFile), v...))
	})
}

// FileNotIn applies the NotIn predicate on the "file" field.
func FileNotIn(vs ...string) predicate.MDTabel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDTabel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFile), v...))
	})
}

// FileGT applies the GT predicate on the "file" field.
func FileGT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFile), v))
	})
}

// FileGTE applies the GTE predicate on the "file" field.
func FileGTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFile), v))
	})
}

// FileLT applies the LT predicate on the "file" field.
func FileLT(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFile), v))
	})
}

// FileLTE applies the LTE predicate on the "file" field.
func FileLTE(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFile), v))
	})
}

// FileContains applies the Contains predicate on the "file" field.
func FileContains(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFile), v))
	})
}

// FileHasPrefix applies the HasPrefix predicate on the "file" field.
func FileHasPrefix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFile), v))
	})
}

// FileHasSuffix applies the HasSuffix predicate on the "file" field.
func FileHasSuffix(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFile), v))
	})
}

// FileEqualFold applies the EqualFold predicate on the "file" field.
func FileEqualFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFile), v))
	})
}

// FileContainsFold applies the ContainsFold predicate on the "file" field.
func FileContainsFold(v string) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFile), v))
	})
}

// HasChildMdtabel applies the HasEdge predicate on the "child_mdtabel" edge.
func HasChildMdtabel() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildMdtabelTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildMdtabelTable, ChildMdtabelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildMdtabelWith applies the HasEdge predicate on the "child_mdtabel" edge with a given conditions (other predicates).
func HasChildMdtabelWith(preds ...predicate.MDTabel) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildMdtabelTable, ChildMdtabelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentMdtabel applies the HasEdge predicate on the "parent_mdtabel" edge.
func HasParentMdtabel() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentMdtabelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentMdtabelTable, ParentMdtabelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentMdtabelWith applies the HasEdge predicate on the "parent_mdtabel" edge with a given conditions (other predicates).
func HasParentMdtabelWith(preds ...predicate.MDTabel) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentMdtabelTable, ParentMdtabelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMdsubsystems applies the HasEdge predicate on the "mdsubsystems" edge.
func HasMdsubsystems() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MdsubsystemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MdsubsystemsTable, MdsubsystemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMdsubsystemsWith applies the HasEdge predicate on the "mdsubsystems" edge with a given conditions (other predicates).
func HasMdsubsystemsWith(preds ...predicate.MDSubSystems) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MdsubsystemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MdsubsystemsTable, MdsubsystemsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMdrekvizits applies the HasEdge predicate on the "mdrekvizits" edge.
func HasMdrekvizits() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MdrekvizitsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MdrekvizitsTable, MdrekvizitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMdrekvizitsWith applies the HasEdge predicate on the "mdrekvizits" edge with a given conditions (other predicates).
func HasMdrekvizitsWith(preds ...predicate.MDRekvizit) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MdrekvizitsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MdrekvizitsTable, MdrekvizitsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMdtypetabel applies the HasEdge predicate on the "mdtypetabel" edge.
func HasMdtypetabel() predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MdtypetabelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MdtypetabelTable, MdtypetabelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMdtypetabelWith applies the HasEdge predicate on the "mdtypetabel" edge with a given conditions (other predicates).
func HasMdtypetabelWith(preds ...predicate.MDTypeTabel) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MdtypetabelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MdtypetabelTable, MdtypetabelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MDTabel) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MDTabel) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MDTabel) predicate.MDTabel {
	return predicate.MDTabel(func(s *sql.Selector) {
		p(s.Not())
	})
}
