// Code generated by entc, DO NOT EDIT.

package mdtabel

const (
	// Label holds the string label denoting the mdtabel type in the database.
	Label = "md_tabel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ID"
	// FieldNamerus holds the string denoting the namerus field in the database.
	FieldNamerus = "Namerus"
	// FieldNameeng holds the string denoting the nameeng field in the database.
	FieldNameeng = "Nameeng"
	// FieldSynonym holds the string denoting the synonym field in the database.
	FieldSynonym = "Synonym"
	// FieldFile holds the string denoting the file field in the database.
	FieldFile = "File"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "Type"
	// EdgeMdsubsystems holds the string denoting the mdsubsystems edge name in mutations.
	EdgeMdsubsystems = "mdsubsystems"
	// EdgeMdrekvizits holds the string denoting the mdrekvizits edge name in mutations.
	EdgeMdrekvizits = "mdrekvizits"
	// Table holds the table name of the mdtabel in the database.
	Table = "md_tabels"
	// MdsubsystemsTable is the table that holds the mdsubsystems relation/edge. The primary key declared below.
	MdsubsystemsTable = "md_sub_systems_mdtables"
	// MdsubsystemsInverseTable is the table name for the MDSubSystems entity.
	// It exists in this package in order to avoid circular dependency with the "mdsubsystems" package.
	MdsubsystemsInverseTable = "md_sub_systems"
	// MdrekvizitsTable is the table that holds the mdrekvizits relation/edge.
	MdrekvizitsTable = "md_rekvizits"
	// MdrekvizitsInverseTable is the table name for the MDRekvizit entity.
	// It exists in this package in order to avoid circular dependency with the "mdrekvizit" package.
	MdrekvizitsInverseTable = "md_rekvizits"
	// MdrekvizitsColumn is the table column denoting the mdrekvizits relation/edge.
	MdrekvizitsColumn = "owner_id"
)

// Columns holds all SQL columns for mdtabel fields.
var Columns = []string{
	FieldID,
	FieldNamerus,
	FieldNameeng,
	FieldSynonym,
	FieldFile,
	FieldType,
}

var (
	// MdsubsystemsPrimaryKey and MdsubsystemsColumn2 are the table columns denoting the
	// primary key for the mdsubsystems relation (M2M).
	MdsubsystemsPrimaryKey = []string{"md_sub_systems_id", "md_tabel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamerusValidator is a validator for the "namerus" field. It is called by the builders before save.
	NamerusValidator func(string) error
	// NameengValidator is a validator for the "nameeng" field. It is called by the builders before save.
	NameengValidator func(string) error
	// SynonymValidator is a validator for the "synonym" field. It is called by the builders before save.
	SynonymValidator func(string) error
	// FileValidator is a validator for the "file" field. It is called by the builders before save.
	FileValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
