// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdrekvizit"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"
	"fynegui/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDTabelUpdate is the builder for updating MDTabel entities.
type MDTabelUpdate struct {
	config
	hooks    []Hook
	mutation *MDTabelMutation
}

// Where appends a list predicates to the MDTabelUpdate builder.
func (mtu *MDTabelUpdate) Where(ps ...predicate.MDTabel) *MDTabelUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetNamerus sets the "namerus" field.
func (mtu *MDTabelUpdate) SetNamerus(s string) *MDTabelUpdate {
	mtu.mutation.SetNamerus(s)
	return mtu
}

// SetNameeng sets the "nameeng" field.
func (mtu *MDTabelUpdate) SetNameeng(s string) *MDTabelUpdate {
	mtu.mutation.SetNameeng(s)
	return mtu
}

// SetSynonym sets the "synonym" field.
func (mtu *MDTabelUpdate) SetSynonym(s string) *MDTabelUpdate {
	mtu.mutation.SetSynonym(s)
	return mtu
}

// SetFile sets the "file" field.
func (mtu *MDTabelUpdate) SetFile(s string) *MDTabelUpdate {
	mtu.mutation.SetFile(s)
	return mtu
}

// SetType sets the "type" field.
func (mtu *MDTabelUpdate) SetType(s string) *MDTabelUpdate {
	mtu.mutation.SetType(s)
	return mtu
}

// AddMdsubsystemIDs adds the "mdsubsystems" edge to the MDSubSystems entity by IDs.
func (mtu *MDTabelUpdate) AddMdsubsystemIDs(ids ...string) *MDTabelUpdate {
	mtu.mutation.AddMdsubsystemIDs(ids...)
	return mtu
}

// AddMdsubsystems adds the "mdsubsystems" edges to the MDSubSystems entity.
func (mtu *MDTabelUpdate) AddMdsubsystems(m ...*MDSubSystems) *MDTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.AddMdsubsystemIDs(ids...)
}

// AddMdrekvizitIDs adds the "mdrekvizits" edge to the MDRekvizit entity by IDs.
func (mtu *MDTabelUpdate) AddMdrekvizitIDs(ids ...string) *MDTabelUpdate {
	mtu.mutation.AddMdrekvizitIDs(ids...)
	return mtu
}

// AddMdrekvizits adds the "mdrekvizits" edges to the MDRekvizit entity.
func (mtu *MDTabelUpdate) AddMdrekvizits(m ...*MDRekvizit) *MDTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.AddMdrekvizitIDs(ids...)
}

// Mutation returns the MDTabelMutation object of the builder.
func (mtu *MDTabelUpdate) Mutation() *MDTabelMutation {
	return mtu.mutation
}

// ClearMdsubsystems clears all "mdsubsystems" edges to the MDSubSystems entity.
func (mtu *MDTabelUpdate) ClearMdsubsystems() *MDTabelUpdate {
	mtu.mutation.ClearMdsubsystems()
	return mtu
}

// RemoveMdsubsystemIDs removes the "mdsubsystems" edge to MDSubSystems entities by IDs.
func (mtu *MDTabelUpdate) RemoveMdsubsystemIDs(ids ...string) *MDTabelUpdate {
	mtu.mutation.RemoveMdsubsystemIDs(ids...)
	return mtu
}

// RemoveMdsubsystems removes "mdsubsystems" edges to MDSubSystems entities.
func (mtu *MDTabelUpdate) RemoveMdsubsystems(m ...*MDSubSystems) *MDTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.RemoveMdsubsystemIDs(ids...)
}

// ClearMdrekvizits clears all "mdrekvizits" edges to the MDRekvizit entity.
func (mtu *MDTabelUpdate) ClearMdrekvizits() *MDTabelUpdate {
	mtu.mutation.ClearMdrekvizits()
	return mtu
}

// RemoveMdrekvizitIDs removes the "mdrekvizits" edge to MDRekvizit entities by IDs.
func (mtu *MDTabelUpdate) RemoveMdrekvizitIDs(ids ...string) *MDTabelUpdate {
	mtu.mutation.RemoveMdrekvizitIDs(ids...)
	return mtu
}

// RemoveMdrekvizits removes "mdrekvizits" edges to MDRekvizit entities.
func (mtu *MDTabelUpdate) RemoveMdrekvizits(m ...*MDRekvizit) *MDTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.RemoveMdrekvizitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MDTabelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mtu.hooks) == 0 {
		if err = mtu.check(); err != nil {
			return 0, err
		}
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDTabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtu.check(); err != nil {
				return 0, err
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			if mtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MDTabelUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MDTabelUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MDTabelUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtu *MDTabelUpdate) check() error {
	if v, ok := mtu.mutation.Namerus(); ok {
		if err := mdtabel.NamerusValidator(v); err != nil {
			return &ValidationError{Name: "namerus", err: fmt.Errorf(`ent: validator failed for field "MDTabel.namerus": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Nameeng(); ok {
		if err := mdtabel.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDTabel.nameeng": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.Synonym(); ok {
		if err := mdtabel.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDTabel.synonym": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.File(); ok {
		if err := mdtabel.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "MDTabel.file": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.GetType(); ok {
		if err := mdtabel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MDTabel.type": %w`, err)}
		}
	}
	return nil
}

func (mtu *MDTabelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdtabel.Table,
			Columns: mdtabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdtabel.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.Namerus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldNamerus,
		})
	}
	if value, ok := mtu.mutation.Nameeng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldNameeng,
		})
	}
	if value, ok := mtu.mutation.Synonym(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldSynonym,
		})
	}
	if value, ok := mtu.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldFile,
		})
	}
	if value, ok := mtu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldType,
		})
	}
	if mtu.mutation.MdsubsystemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mdtabel.MdsubsystemsTable,
			Columns: mdtabel.MdsubsystemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedMdsubsystemsIDs(); len(nodes) > 0 && !mtu.mutation.MdsubsystemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mdtabel.MdsubsystemsTable,
			Columns: mdtabel.MdsubsystemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.MdsubsystemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mdtabel.MdsubsystemsTable,
			Columns: mdtabel.MdsubsystemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtu.mutation.MdrekvizitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtabel.MdrekvizitsTable,
			Columns: []string{mdtabel.MdrekvizitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdrekvizit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedMdrekvizitsIDs(); len(nodes) > 0 && !mtu.mutation.MdrekvizitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtabel.MdrekvizitsTable,
			Columns: []string{mdtabel.MdrekvizitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdrekvizit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.MdrekvizitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtabel.MdrekvizitsTable,
			Columns: []string{mdtabel.MdrekvizitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdrekvizit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdtabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MDTabelUpdateOne is the builder for updating a single MDTabel entity.
type MDTabelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MDTabelMutation
}

// SetNamerus sets the "namerus" field.
func (mtuo *MDTabelUpdateOne) SetNamerus(s string) *MDTabelUpdateOne {
	mtuo.mutation.SetNamerus(s)
	return mtuo
}

// SetNameeng sets the "nameeng" field.
func (mtuo *MDTabelUpdateOne) SetNameeng(s string) *MDTabelUpdateOne {
	mtuo.mutation.SetNameeng(s)
	return mtuo
}

// SetSynonym sets the "synonym" field.
func (mtuo *MDTabelUpdateOne) SetSynonym(s string) *MDTabelUpdateOne {
	mtuo.mutation.SetSynonym(s)
	return mtuo
}

// SetFile sets the "file" field.
func (mtuo *MDTabelUpdateOne) SetFile(s string) *MDTabelUpdateOne {
	mtuo.mutation.SetFile(s)
	return mtuo
}

// SetType sets the "type" field.
func (mtuo *MDTabelUpdateOne) SetType(s string) *MDTabelUpdateOne {
	mtuo.mutation.SetType(s)
	return mtuo
}

// AddMdsubsystemIDs adds the "mdsubsystems" edge to the MDSubSystems entity by IDs.
func (mtuo *MDTabelUpdateOne) AddMdsubsystemIDs(ids ...string) *MDTabelUpdateOne {
	mtuo.mutation.AddMdsubsystemIDs(ids...)
	return mtuo
}

// AddMdsubsystems adds the "mdsubsystems" edges to the MDSubSystems entity.
func (mtuo *MDTabelUpdateOne) AddMdsubsystems(m ...*MDSubSystems) *MDTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.AddMdsubsystemIDs(ids...)
}

// AddMdrekvizitIDs adds the "mdrekvizits" edge to the MDRekvizit entity by IDs.
func (mtuo *MDTabelUpdateOne) AddMdrekvizitIDs(ids ...string) *MDTabelUpdateOne {
	mtuo.mutation.AddMdrekvizitIDs(ids...)
	return mtuo
}

// AddMdrekvizits adds the "mdrekvizits" edges to the MDRekvizit entity.
func (mtuo *MDTabelUpdateOne) AddMdrekvizits(m ...*MDRekvizit) *MDTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.AddMdrekvizitIDs(ids...)
}

// Mutation returns the MDTabelMutation object of the builder.
func (mtuo *MDTabelUpdateOne) Mutation() *MDTabelMutation {
	return mtuo.mutation
}

// ClearMdsubsystems clears all "mdsubsystems" edges to the MDSubSystems entity.
func (mtuo *MDTabelUpdateOne) ClearMdsubsystems() *MDTabelUpdateOne {
	mtuo.mutation.ClearMdsubsystems()
	return mtuo
}

// RemoveMdsubsystemIDs removes the "mdsubsystems" edge to MDSubSystems entities by IDs.
func (mtuo *MDTabelUpdateOne) RemoveMdsubsystemIDs(ids ...string) *MDTabelUpdateOne {
	mtuo.mutation.RemoveMdsubsystemIDs(ids...)
	return mtuo
}

// RemoveMdsubsystems removes "mdsubsystems" edges to MDSubSystems entities.
func (mtuo *MDTabelUpdateOne) RemoveMdsubsystems(m ...*MDSubSystems) *MDTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.RemoveMdsubsystemIDs(ids...)
}

// ClearMdrekvizits clears all "mdrekvizits" edges to the MDRekvizit entity.
func (mtuo *MDTabelUpdateOne) ClearMdrekvizits() *MDTabelUpdateOne {
	mtuo.mutation.ClearMdrekvizits()
	return mtuo
}

// RemoveMdrekvizitIDs removes the "mdrekvizits" edge to MDRekvizit entities by IDs.
func (mtuo *MDTabelUpdateOne) RemoveMdrekvizitIDs(ids ...string) *MDTabelUpdateOne {
	mtuo.mutation.RemoveMdrekvizitIDs(ids...)
	return mtuo
}

// RemoveMdrekvizits removes "mdrekvizits" edges to MDRekvizit entities.
func (mtuo *MDTabelUpdateOne) RemoveMdrekvizits(m ...*MDRekvizit) *MDTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.RemoveMdrekvizitIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MDTabelUpdateOne) Select(field string, fields ...string) *MDTabelUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MDTabel entity.
func (mtuo *MDTabelUpdateOne) Save(ctx context.Context) (*MDTabel, error) {
	var (
		err  error
		node *MDTabel
	)
	if len(mtuo.hooks) == 0 {
		if err = mtuo.check(); err != nil {
			return nil, err
		}
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDTabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtuo.check(); err != nil {
				return nil, err
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			if mtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MDTabelUpdateOne) SaveX(ctx context.Context) *MDTabel {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MDTabelUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MDTabelUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtuo *MDTabelUpdateOne) check() error {
	if v, ok := mtuo.mutation.Namerus(); ok {
		if err := mdtabel.NamerusValidator(v); err != nil {
			return &ValidationError{Name: "namerus", err: fmt.Errorf(`ent: validator failed for field "MDTabel.namerus": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Nameeng(); ok {
		if err := mdtabel.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDTabel.nameeng": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.Synonym(); ok {
		if err := mdtabel.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDTabel.synonym": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.File(); ok {
		if err := mdtabel.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "MDTabel.file": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.GetType(); ok {
		if err := mdtabel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MDTabel.type": %w`, err)}
		}
	}
	return nil
}

func (mtuo *MDTabelUpdateOne) sqlSave(ctx context.Context) (_node *MDTabel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdtabel.Table,
			Columns: mdtabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdtabel.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MDTabel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mdtabel.FieldID)
		for _, f := range fields {
			if !mdtabel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mdtabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.Namerus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldNamerus,
		})
	}
	if value, ok := mtuo.mutation.Nameeng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldNameeng,
		})
	}
	if value, ok := mtuo.mutation.Synonym(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldSynonym,
		})
	}
	if value, ok := mtuo.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldFile,
		})
	}
	if value, ok := mtuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldType,
		})
	}
	if mtuo.mutation.MdsubsystemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mdtabel.MdsubsystemsTable,
			Columns: mdtabel.MdsubsystemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedMdsubsystemsIDs(); len(nodes) > 0 && !mtuo.mutation.MdsubsystemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mdtabel.MdsubsystemsTable,
			Columns: mdtabel.MdsubsystemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.MdsubsystemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mdtabel.MdsubsystemsTable,
			Columns: mdtabel.MdsubsystemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtuo.mutation.MdrekvizitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtabel.MdrekvizitsTable,
			Columns: []string{mdtabel.MdrekvizitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdrekvizit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedMdrekvizitsIDs(); len(nodes) > 0 && !mtuo.mutation.MdrekvizitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtabel.MdrekvizitsTable,
			Columns: []string{mdtabel.MdrekvizitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdrekvizit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.MdrekvizitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtabel.MdrekvizitsTable,
			Columns: []string{mdtabel.MdrekvizitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdrekvizit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MDTabel{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdtabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
