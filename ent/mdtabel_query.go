// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"fynegui/ent/mdrekvizit"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"
	"fynegui/ent/mdtypetabel"
	"fynegui/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDTabelQuery is the builder for querying MDTabel entities.
type MDTabelQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MDTabel
	// eager-loading edges.
	withChildMdtabel  *MDTabelQuery
	withParentMdtabel *MDTabelQuery
	withMdsubsystems  *MDSubSystemsQuery
	withMdrekvizits   *MDRekvizitQuery
	withMdtypetabel   *MDTypeTabelQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MDTabelQuery builder.
func (mtq *MDTabelQuery) Where(ps ...predicate.MDTabel) *MDTabelQuery {
	mtq.predicates = append(mtq.predicates, ps...)
	return mtq
}

// Limit adds a limit step to the query.
func (mtq *MDTabelQuery) Limit(limit int) *MDTabelQuery {
	mtq.limit = &limit
	return mtq
}

// Offset adds an offset step to the query.
func (mtq *MDTabelQuery) Offset(offset int) *MDTabelQuery {
	mtq.offset = &offset
	return mtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mtq *MDTabelQuery) Unique(unique bool) *MDTabelQuery {
	mtq.unique = &unique
	return mtq
}

// Order adds an order step to the query.
func (mtq *MDTabelQuery) Order(o ...OrderFunc) *MDTabelQuery {
	mtq.order = append(mtq.order, o...)
	return mtq
}

// QueryChildMdtabel chains the current query on the "child_mdtabel" edge.
func (mtq *MDTabelQuery) QueryChildMdtabel() *MDTabelQuery {
	query := &MDTabelQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, selector),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdtabel.ChildMdtabelTable, mdtabel.ChildMdtabelColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentMdtabel chains the current query on the "parent_mdtabel" edge.
func (mtq *MDTabelQuery) QueryParentMdtabel() *MDTabelQuery {
	query := &MDTabelQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, selector),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdtabel.ParentMdtabelTable, mdtabel.ParentMdtabelColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMdsubsystems chains the current query on the "mdsubsystems" edge.
func (mtq *MDTabelQuery) QueryMdsubsystems() *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, selector),
			sqlgraph.To(mdsubsystems.Table, mdsubsystems.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, mdtabel.MdsubsystemsTable, mdtabel.MdsubsystemsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMdrekvizits chains the current query on the "mdrekvizits" edge.
func (mtq *MDTabelQuery) QueryMdrekvizits() *MDRekvizitQuery {
	query := &MDRekvizitQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, selector),
			sqlgraph.To(mdrekvizit.Table, mdrekvizit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdtabel.MdrekvizitsTable, mdtabel.MdrekvizitsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMdtypetabel chains the current query on the "mdtypetabel" edge.
func (mtq *MDTabelQuery) QueryMdtypetabel() *MDTypeTabelQuery {
	query := &MDTypeTabelQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, selector),
			sqlgraph.To(mdtypetabel.Table, mdtypetabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdtabel.MdtypetabelTable, mdtabel.MdtypetabelColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MDTabel entity from the query.
// Returns a *NotFoundError when no MDTabel was found.
func (mtq *MDTabelQuery) First(ctx context.Context) (*MDTabel, error) {
	nodes, err := mtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mdtabel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mtq *MDTabelQuery) FirstX(ctx context.Context) *MDTabel {
	node, err := mtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MDTabel ID from the query.
// Returns a *NotFoundError when no MDTabel ID was found.
func (mtq *MDTabelQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mdtabel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mtq *MDTabelQuery) FirstIDX(ctx context.Context) string {
	id, err := mtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MDTabel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MDTabel entity is found.
// Returns a *NotFoundError when no MDTabel entities are found.
func (mtq *MDTabelQuery) Only(ctx context.Context) (*MDTabel, error) {
	nodes, err := mtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mdtabel.Label}
	default:
		return nil, &NotSingularError{mdtabel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mtq *MDTabelQuery) OnlyX(ctx context.Context) *MDTabel {
	node, err := mtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MDTabel ID in the query.
// Returns a *NotSingularError when more than one MDTabel ID is found.
// Returns a *NotFoundError when no entities are found.
func (mtq *MDTabelQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = &NotSingularError{mdtabel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mtq *MDTabelQuery) OnlyIDX(ctx context.Context) string {
	id, err := mtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MDTabels.
func (mtq *MDTabelQuery) All(ctx context.Context) ([]*MDTabel, error) {
	if err := mtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mtq *MDTabelQuery) AllX(ctx context.Context) []*MDTabel {
	nodes, err := mtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MDTabel IDs.
func (mtq *MDTabelQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := mtq.Select(mdtabel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mtq *MDTabelQuery) IDsX(ctx context.Context) []string {
	ids, err := mtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mtq *MDTabelQuery) Count(ctx context.Context) (int, error) {
	if err := mtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mtq *MDTabelQuery) CountX(ctx context.Context) int {
	count, err := mtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mtq *MDTabelQuery) Exist(ctx context.Context) (bool, error) {
	if err := mtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mtq *MDTabelQuery) ExistX(ctx context.Context) bool {
	exist, err := mtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MDTabelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mtq *MDTabelQuery) Clone() *MDTabelQuery {
	if mtq == nil {
		return nil
	}
	return &MDTabelQuery{
		config:            mtq.config,
		limit:             mtq.limit,
		offset:            mtq.offset,
		order:             append([]OrderFunc{}, mtq.order...),
		predicates:        append([]predicate.MDTabel{}, mtq.predicates...),
		withChildMdtabel:  mtq.withChildMdtabel.Clone(),
		withParentMdtabel: mtq.withParentMdtabel.Clone(),
		withMdsubsystems:  mtq.withMdsubsystems.Clone(),
		withMdrekvizits:   mtq.withMdrekvizits.Clone(),
		withMdtypetabel:   mtq.withMdtypetabel.Clone(),
		// clone intermediate query.
		sql:    mtq.sql.Clone(),
		path:   mtq.path,
		unique: mtq.unique,
	}
}

// WithChildMdtabel tells the query-builder to eager-load the nodes that are connected to
// the "child_mdtabel" edge. The optional arguments are used to configure the query builder of the edge.
func (mtq *MDTabelQuery) WithChildMdtabel(opts ...func(*MDTabelQuery)) *MDTabelQuery {
	query := &MDTabelQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withChildMdtabel = query
	return mtq
}

// WithParentMdtabel tells the query-builder to eager-load the nodes that are connected to
// the "parent_mdtabel" edge. The optional arguments are used to configure the query builder of the edge.
func (mtq *MDTabelQuery) WithParentMdtabel(opts ...func(*MDTabelQuery)) *MDTabelQuery {
	query := &MDTabelQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withParentMdtabel = query
	return mtq
}

// WithMdsubsystems tells the query-builder to eager-load the nodes that are connected to
// the "mdsubsystems" edge. The optional arguments are used to configure the query builder of the edge.
func (mtq *MDTabelQuery) WithMdsubsystems(opts ...func(*MDSubSystemsQuery)) *MDTabelQuery {
	query := &MDSubSystemsQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withMdsubsystems = query
	return mtq
}

// WithMdrekvizits tells the query-builder to eager-load the nodes that are connected to
// the "mdrekvizits" edge. The optional arguments are used to configure the query builder of the edge.
func (mtq *MDTabelQuery) WithMdrekvizits(opts ...func(*MDRekvizitQuery)) *MDTabelQuery {
	query := &MDRekvizitQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withMdrekvizits = query
	return mtq
}

// WithMdtypetabel tells the query-builder to eager-load the nodes that are connected to
// the "mdtypetabel" edge. The optional arguments are used to configure the query builder of the edge.
func (mtq *MDTabelQuery) WithMdtypetabel(opts ...func(*MDTypeTabelQuery)) *MDTabelQuery {
	query := &MDTypeTabelQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withMdtypetabel = query
	return mtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Nameeng string `json:"ИмяАнгл,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MDTabel.Query().
//		GroupBy(mdtabel.FieldNameeng).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mtq *MDTabelQuery) GroupBy(field string, fields ...string) *MDTabelGroupBy {
	group := &MDTabelGroupBy{config: mtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mtq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Nameeng string `json:"ИмяАнгл,omitempty"`
//	}
//
//	client.MDTabel.Query().
//		Select(mdtabel.FieldNameeng).
//		Scan(ctx, &v)
//
func (mtq *MDTabelQuery) Select(fields ...string) *MDTabelSelect {
	mtq.fields = append(mtq.fields, fields...)
	return &MDTabelSelect{MDTabelQuery: mtq}
}

func (mtq *MDTabelQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mtq.fields {
		if !mdtabel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mtq.path != nil {
		prev, err := mtq.path(ctx)
		if err != nil {
			return err
		}
		mtq.sql = prev
	}
	return nil
}

func (mtq *MDTabelQuery) sqlAll(ctx context.Context) ([]*MDTabel, error) {
	var (
		nodes       = []*MDTabel{}
		_spec       = mtq.querySpec()
		loadedTypes = [5]bool{
			mtq.withChildMdtabel != nil,
			mtq.withParentMdtabel != nil,
			mtq.withMdsubsystems != nil,
			mtq.withMdrekvizits != nil,
			mtq.withMdtypetabel != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MDTabel{config: mtq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := mtq.withChildMdtabel; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*MDTabel)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ChildMdtabel = []*MDTabel{}
		}
		query.Where(predicate.MDTabel(func(s *sql.Selector) {
			s.Where(sql.InValues(mdtabel.ChildMdtabelColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.Parent
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ChildMdtabel = append(node.Edges.ChildMdtabel, n)
		}
	}

	if query := mtq.withParentMdtabel; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*MDTabel)
		for i := range nodes {
			fk := nodes[i].Parent
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(mdtabel.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ParentMdtabel = n
			}
		}
	}

	if query := mtq.withMdsubsystems; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[string]*MDTabel, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Mdsubsystems = []*MDSubSystems{}
		}
		var (
			edgeids []string
			edges   = make(map[string][]*MDTabel)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   mdtabel.MdsubsystemsTable,
				Columns: mdtabel.MdsubsystemsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(mdtabel.MdsubsystemsPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullString), new(sql.NullString)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullString)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullString)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.String
				inValue := ein.String
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, mtq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "mdsubsystems": %w`, err)
		}
		query.Where(mdsubsystems.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "mdsubsystems" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Mdsubsystems = append(nodes[i].Edges.Mdsubsystems, n)
			}
		}
	}

	if query := mtq.withMdrekvizits; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*MDTabel)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Mdrekvizits = []*MDRekvizit{}
		}
		query.Where(predicate.MDRekvizit(func(s *sql.Selector) {
			s.Where(sql.InValues(mdtabel.MdrekvizitsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.OwnerID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Mdrekvizits = append(node.Edges.Mdrekvizits, n)
		}
	}

	if query := mtq.withMdtypetabel; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*MDTabel)
		for i := range nodes {
			fk := nodes[i].TypesID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(mdtypetabel.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "types_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Mdtypetabel = n
			}
		}
	}

	return nodes, nil
}

func (mtq *MDTabelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mtq.querySpec()
	_spec.Node.Columns = mtq.fields
	if len(mtq.fields) > 0 {
		_spec.Unique = mtq.unique != nil && *mtq.unique
	}
	return sqlgraph.CountNodes(ctx, mtq.driver, _spec)
}

func (mtq *MDTabelQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mtq *MDTabelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdtabel.Table,
			Columns: mdtabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdtabel.FieldID,
			},
		},
		From:   mtq.sql,
		Unique: true,
	}
	if unique := mtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mdtabel.FieldID)
		for i := range fields {
			if fields[i] != mdtabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mtq *MDTabelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mtq.driver.Dialect())
	t1 := builder.Table(mdtabel.Table)
	columns := mtq.fields
	if len(columns) == 0 {
		columns = mdtabel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mtq.sql != nil {
		selector = mtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mtq.unique != nil && *mtq.unique {
		selector.Distinct()
	}
	for _, p := range mtq.predicates {
		p(selector)
	}
	for _, p := range mtq.order {
		p(selector)
	}
	if offset := mtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MDTabelGroupBy is the group-by builder for MDTabel entities.
type MDTabelGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mtgb *MDTabelGroupBy) Aggregate(fns ...AggregateFunc) *MDTabelGroupBy {
	mtgb.fns = append(mtgb.fns, fns...)
	return mtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mtgb *MDTabelGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mtgb.path(ctx)
	if err != nil {
		return err
	}
	mtgb.sql = query
	return mtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MDTabelGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) StringsX(ctx context.Context) []string {
	v, err := mtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) StringX(ctx context.Context) string {
	v, err := mtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MDTabelGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) IntsX(ctx context.Context) []int {
	v, err := mtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) IntX(ctx context.Context) int {
	v, err := mtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MDTabelGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MDTabelGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mtgb *MDTabelGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mtgb *MDTabelGroupBy) BoolX(ctx context.Context) bool {
	v, err := mtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mtgb *MDTabelGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mtgb.fields {
		if !mdtabel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mtgb *MDTabelGroupBy) sqlQuery() *sql.Selector {
	selector := mtgb.sql.Select()
	aggregation := make([]string, 0, len(mtgb.fns))
	for _, fn := range mtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mtgb.fields)+len(mtgb.fns))
		for _, f := range mtgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mtgb.fields...)...)
}

// MDTabelSelect is the builder for selecting fields of MDTabel entities.
type MDTabelSelect struct {
	*MDTabelQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mts *MDTabelSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mts.prepareQuery(ctx); err != nil {
		return err
	}
	mts.sql = mts.MDTabelQuery.sqlQuery(ctx)
	return mts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mts *MDTabelSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MDTabelSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mts *MDTabelSelect) StringsX(ctx context.Context) []string {
	v, err := mts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mts *MDTabelSelect) StringX(ctx context.Context) string {
	v, err := mts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MDTabelSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mts *MDTabelSelect) IntsX(ctx context.Context) []int {
	v, err := mts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mts *MDTabelSelect) IntX(ctx context.Context) int {
	v, err := mts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MDTabelSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mts *MDTabelSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mts *MDTabelSelect) Float64X(ctx context.Context) float64 {
	v, err := mts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MDTabelSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mts *MDTabelSelect) BoolsX(ctx context.Context) []bool {
	v, err := mts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mts *MDTabelSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdtabel.Label}
	default:
		err = fmt.Errorf("ent: MDTabelSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mts *MDTabelSelect) BoolX(ctx context.Context) bool {
	v, err := mts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mts *MDTabelSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mts.sql.Query()
	if err := mts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
