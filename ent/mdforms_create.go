// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdforms"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDFormsCreate is the builder for creating a MDForms entity.
type MDFormsCreate struct {
	config
	mutation *MDFormsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIdform sets the "idform" field.
func (mfc *MDFormsCreate) SetIdform(s string) *MDFormsCreate {
	mfc.mutation.SetIdform(s)
	return mfc
}

// SetConteiner sets the "conteiner" field.
func (mfc *MDFormsCreate) SetConteiner(s string) *MDFormsCreate {
	mfc.mutation.SetConteiner(s)
	return mfc
}

// SetParent sets the "parent" field.
func (mfc *MDFormsCreate) SetParent(s string) *MDFormsCreate {
	mfc.mutation.SetParent(s)
	return mfc
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (mfc *MDFormsCreate) SetNillableParent(s *string) *MDFormsCreate {
	if s != nil {
		mfc.SetParent(*s)
	}
	return mfc
}

// SetID sets the "id" field.
func (mfc *MDFormsCreate) SetID(s string) *MDFormsCreate {
	mfc.mutation.SetID(s)
	return mfc
}

// AddChildMdformIDs adds the "child_mdforms" edge to the MDForms entity by IDs.
func (mfc *MDFormsCreate) AddChildMdformIDs(ids ...string) *MDFormsCreate {
	mfc.mutation.AddChildMdformIDs(ids...)
	return mfc
}

// AddChildMdforms adds the "child_mdforms" edges to the MDForms entity.
func (mfc *MDFormsCreate) AddChildMdforms(m ...*MDForms) *MDFormsCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfc.AddChildMdformIDs(ids...)
}

// SetParentMdformsID sets the "parent_mdforms" edge to the MDForms entity by ID.
func (mfc *MDFormsCreate) SetParentMdformsID(id string) *MDFormsCreate {
	mfc.mutation.SetParentMdformsID(id)
	return mfc
}

// SetNillableParentMdformsID sets the "parent_mdforms" edge to the MDForms entity by ID if the given value is not nil.
func (mfc *MDFormsCreate) SetNillableParentMdformsID(id *string) *MDFormsCreate {
	if id != nil {
		mfc = mfc.SetParentMdformsID(*id)
	}
	return mfc
}

// SetParentMdforms sets the "parent_mdforms" edge to the MDForms entity.
func (mfc *MDFormsCreate) SetParentMdforms(m *MDForms) *MDFormsCreate {
	return mfc.SetParentMdformsID(m.ID)
}

// Mutation returns the MDFormsMutation object of the builder.
func (mfc *MDFormsCreate) Mutation() *MDFormsMutation {
	return mfc.mutation
}

// Save creates the MDForms in the database.
func (mfc *MDFormsCreate) Save(ctx context.Context) (*MDForms, error) {
	var (
		err  error
		node *MDForms
	)
	if len(mfc.hooks) == 0 {
		if err = mfc.check(); err != nil {
			return nil, err
		}
		node, err = mfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDFormsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mfc.check(); err != nil {
				return nil, err
			}
			mfc.mutation = mutation
			if node, err = mfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mfc.hooks) - 1; i >= 0; i-- {
			if mfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mfc *MDFormsCreate) SaveX(ctx context.Context) *MDForms {
	v, err := mfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mfc *MDFormsCreate) Exec(ctx context.Context) error {
	_, err := mfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfc *MDFormsCreate) ExecX(ctx context.Context) {
	if err := mfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mfc *MDFormsCreate) check() error {
	if _, ok := mfc.mutation.Idform(); !ok {
		return &ValidationError{Name: "idform", err: errors.New(`ent: missing required field "MDForms.idform"`)}
	}
	if v, ok := mfc.mutation.Idform(); ok {
		if err := mdforms.IdformValidator(v); err != nil {
			return &ValidationError{Name: "idform", err: fmt.Errorf(`ent: validator failed for field "MDForms.idform": %w`, err)}
		}
	}
	if _, ok := mfc.mutation.Conteiner(); !ok {
		return &ValidationError{Name: "conteiner", err: errors.New(`ent: missing required field "MDForms.conteiner"`)}
	}
	if v, ok := mfc.mutation.Parent(); ok {
		if err := mdforms.ParentValidator(v); err != nil {
			return &ValidationError{Name: "parent", err: fmt.Errorf(`ent: validator failed for field "MDForms.parent": %w`, err)}
		}
	}
	if v, ok := mfc.mutation.ID(); ok {
		if err := mdforms.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MDForms.id": %w`, err)}
		}
	}
	return nil
}

func (mfc *MDFormsCreate) sqlSave(ctx context.Context) (*MDForms, error) {
	_node, _spec := mfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MDForms.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (mfc *MDFormsCreate) createSpec() (*MDForms, *sqlgraph.CreateSpec) {
	var (
		_node = &MDForms{config: mfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mdforms.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdforms.FieldID,
			},
		}
	)
	_spec.OnConflict = mfc.conflict
	if id, ok := mfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mfc.mutation.Idform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdforms.FieldIdform,
		})
		_node.Idform = value
	}
	if value, ok := mfc.mutation.Conteiner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdforms.FieldConteiner,
		})
		_node.Conteiner = value
	}
	if nodes := mfc.mutation.ChildMdformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdforms.ChildMdformsTable,
			Columns: []string{mdforms.ChildMdformsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mfc.mutation.ParentMdformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdforms.ParentMdformsTable,
			Columns: []string{mdforms.ParentMdformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Parent = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDForms.Create().
//		SetIdform(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDFormsUpsert) {
//			SetIdform(v+v).
//		}).
//		Exec(ctx)
//
func (mfc *MDFormsCreate) OnConflict(opts ...sql.ConflictOption) *MDFormsUpsertOne {
	mfc.conflict = opts
	return &MDFormsUpsertOne{
		create: mfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDForms.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mfc *MDFormsCreate) OnConflictColumns(columns ...string) *MDFormsUpsertOne {
	mfc.conflict = append(mfc.conflict, sql.ConflictColumns(columns...))
	return &MDFormsUpsertOne{
		create: mfc,
	}
}

type (
	// MDFormsUpsertOne is the builder for "upsert"-ing
	//  one MDForms node.
	MDFormsUpsertOne struct {
		create *MDFormsCreate
	}

	// MDFormsUpsert is the "OnConflict" setter.
	MDFormsUpsert struct {
		*sql.UpdateSet
	}
)

// SetIdform sets the "idform" field.
func (u *MDFormsUpsert) SetIdform(v string) *MDFormsUpsert {
	u.Set(mdforms.FieldIdform, v)
	return u
}

// UpdateIdform sets the "idform" field to the value that was provided on create.
func (u *MDFormsUpsert) UpdateIdform() *MDFormsUpsert {
	u.SetExcluded(mdforms.FieldIdform)
	return u
}

// SetConteiner sets the "conteiner" field.
func (u *MDFormsUpsert) SetConteiner(v string) *MDFormsUpsert {
	u.Set(mdforms.FieldConteiner, v)
	return u
}

// UpdateConteiner sets the "conteiner" field to the value that was provided on create.
func (u *MDFormsUpsert) UpdateConteiner() *MDFormsUpsert {
	u.SetExcluded(mdforms.FieldConteiner)
	return u
}

// SetParent sets the "parent" field.
func (u *MDFormsUpsert) SetParent(v string) *MDFormsUpsert {
	u.Set(mdforms.FieldParent, v)
	return u
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDFormsUpsert) UpdateParent() *MDFormsUpsert {
	u.SetExcluded(mdforms.FieldParent)
	return u
}

// ClearParent clears the value of the "parent" field.
func (u *MDFormsUpsert) ClearParent() *MDFormsUpsert {
	u.SetNull(mdforms.FieldParent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MDForms.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdforms.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDFormsUpsertOne) UpdateNewValues() *MDFormsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mdforms.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MDForms.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MDFormsUpsertOne) Ignore() *MDFormsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDFormsUpsertOne) DoNothing() *MDFormsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDFormsCreate.OnConflict
// documentation for more info.
func (u *MDFormsUpsertOne) Update(set func(*MDFormsUpsert)) *MDFormsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDFormsUpsert{UpdateSet: update})
	}))
	return u
}

// SetIdform sets the "idform" field.
func (u *MDFormsUpsertOne) SetIdform(v string) *MDFormsUpsertOne {
	return u.Update(func(s *MDFormsUpsert) {
		s.SetIdform(v)
	})
}

// UpdateIdform sets the "idform" field to the value that was provided on create.
func (u *MDFormsUpsertOne) UpdateIdform() *MDFormsUpsertOne {
	return u.Update(func(s *MDFormsUpsert) {
		s.UpdateIdform()
	})
}

// SetConteiner sets the "conteiner" field.
func (u *MDFormsUpsertOne) SetConteiner(v string) *MDFormsUpsertOne {
	return u.Update(func(s *MDFormsUpsert) {
		s.SetConteiner(v)
	})
}

// UpdateConteiner sets the "conteiner" field to the value that was provided on create.
func (u *MDFormsUpsertOne) UpdateConteiner() *MDFormsUpsertOne {
	return u.Update(func(s *MDFormsUpsert) {
		s.UpdateConteiner()
	})
}

// SetParent sets the "parent" field.
func (u *MDFormsUpsertOne) SetParent(v string) *MDFormsUpsertOne {
	return u.Update(func(s *MDFormsUpsert) {
		s.SetParent(v)
	})
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDFormsUpsertOne) UpdateParent() *MDFormsUpsertOne {
	return u.Update(func(s *MDFormsUpsert) {
		s.UpdateParent()
	})
}

// ClearParent clears the value of the "parent" field.
func (u *MDFormsUpsertOne) ClearParent() *MDFormsUpsertOne {
	return u.Update(func(s *MDFormsUpsert) {
		s.ClearParent()
	})
}

// Exec executes the query.
func (u *MDFormsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDFormsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDFormsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MDFormsUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MDFormsUpsertOne.ID is not supported by MySQL driver. Use MDFormsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MDFormsUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MDFormsCreateBulk is the builder for creating many MDForms entities in bulk.
type MDFormsCreateBulk struct {
	config
	builders []*MDFormsCreate
	conflict []sql.ConflictOption
}

// Save creates the MDForms entities in the database.
func (mfcb *MDFormsCreateBulk) Save(ctx context.Context) ([]*MDForms, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mfcb.builders))
	nodes := make([]*MDForms, len(mfcb.builders))
	mutators := make([]Mutator, len(mfcb.builders))
	for i := range mfcb.builders {
		func(i int, root context.Context) {
			builder := mfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MDFormsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mfcb *MDFormsCreateBulk) SaveX(ctx context.Context) []*MDForms {
	v, err := mfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mfcb *MDFormsCreateBulk) Exec(ctx context.Context) error {
	_, err := mfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfcb *MDFormsCreateBulk) ExecX(ctx context.Context) {
	if err := mfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDForms.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDFormsUpsert) {
//			SetIdform(v+v).
//		}).
//		Exec(ctx)
//
func (mfcb *MDFormsCreateBulk) OnConflict(opts ...sql.ConflictOption) *MDFormsUpsertBulk {
	mfcb.conflict = opts
	return &MDFormsUpsertBulk{
		create: mfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDForms.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mfcb *MDFormsCreateBulk) OnConflictColumns(columns ...string) *MDFormsUpsertBulk {
	mfcb.conflict = append(mfcb.conflict, sql.ConflictColumns(columns...))
	return &MDFormsUpsertBulk{
		create: mfcb,
	}
}

// MDFormsUpsertBulk is the builder for "upsert"-ing
// a bulk of MDForms nodes.
type MDFormsUpsertBulk struct {
	create *MDFormsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MDForms.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdforms.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDFormsUpsertBulk) UpdateNewValues() *MDFormsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mdforms.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MDForms.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MDFormsUpsertBulk) Ignore() *MDFormsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDFormsUpsertBulk) DoNothing() *MDFormsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDFormsCreateBulk.OnConflict
// documentation for more info.
func (u *MDFormsUpsertBulk) Update(set func(*MDFormsUpsert)) *MDFormsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDFormsUpsert{UpdateSet: update})
	}))
	return u
}

// SetIdform sets the "idform" field.
func (u *MDFormsUpsertBulk) SetIdform(v string) *MDFormsUpsertBulk {
	return u.Update(func(s *MDFormsUpsert) {
		s.SetIdform(v)
	})
}

// UpdateIdform sets the "idform" field to the value that was provided on create.
func (u *MDFormsUpsertBulk) UpdateIdform() *MDFormsUpsertBulk {
	return u.Update(func(s *MDFormsUpsert) {
		s.UpdateIdform()
	})
}

// SetConteiner sets the "conteiner" field.
func (u *MDFormsUpsertBulk) SetConteiner(v string) *MDFormsUpsertBulk {
	return u.Update(func(s *MDFormsUpsert) {
		s.SetConteiner(v)
	})
}

// UpdateConteiner sets the "conteiner" field to the value that was provided on create.
func (u *MDFormsUpsertBulk) UpdateConteiner() *MDFormsUpsertBulk {
	return u.Update(func(s *MDFormsUpsert) {
		s.UpdateConteiner()
	})
}

// SetParent sets the "parent" field.
func (u *MDFormsUpsertBulk) SetParent(v string) *MDFormsUpsertBulk {
	return u.Update(func(s *MDFormsUpsert) {
		s.SetParent(v)
	})
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDFormsUpsertBulk) UpdateParent() *MDFormsUpsertBulk {
	return u.Update(func(s *MDFormsUpsert) {
		s.UpdateParent()
	})
}

// ClearParent clears the value of the "parent" field.
func (u *MDFormsUpsertBulk) ClearParent() *MDFormsUpsertBulk {
	return u.Update(func(s *MDFormsUpsert) {
		s.ClearParent()
	})
}

// Exec executes the query.
func (u *MDFormsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MDFormsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDFormsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDFormsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
