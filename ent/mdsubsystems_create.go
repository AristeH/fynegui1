// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDSubSystemsCreate is the builder for creating a MDSubSystems entity.
type MDSubSystemsCreate struct {
	config
	mutation *MDSubSystemsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNameeng sets the "nameeng" field.
func (mssc *MDSubSystemsCreate) SetNameeng(s string) *MDSubSystemsCreate {
	mssc.mutation.SetNameeng(s)
	return mssc
}

// SetSynonym sets the "synonym" field.
func (mssc *MDSubSystemsCreate) SetSynonym(s string) *MDSubSystemsCreate {
	mssc.mutation.SetSynonym(s)
	return mssc
}

// SetPor sets the "por" field.
func (mssc *MDSubSystemsCreate) SetPor(s string) *MDSubSystemsCreate {
	mssc.mutation.SetPor(s)
	return mssc
}

// SetParent sets the "parent" field.
func (mssc *MDSubSystemsCreate) SetParent(s string) *MDSubSystemsCreate {
	mssc.mutation.SetParent(s)
	return mssc
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (mssc *MDSubSystemsCreate) SetNillableParent(s *string) *MDSubSystemsCreate {
	if s != nil {
		mssc.SetParent(*s)
	}
	return mssc
}

// SetID sets the "id" field.
func (mssc *MDSubSystemsCreate) SetID(s string) *MDSubSystemsCreate {
	mssc.mutation.SetID(s)
	return mssc
}

// AddChildMdsubsystemIDs adds the "child_mdsubsystems" edge to the MDSubSystems entity by IDs.
func (mssc *MDSubSystemsCreate) AddChildMdsubsystemIDs(ids ...string) *MDSubSystemsCreate {
	mssc.mutation.AddChildMdsubsystemIDs(ids...)
	return mssc
}

// AddChildMdsubsystems adds the "child_mdsubsystems" edges to the MDSubSystems entity.
func (mssc *MDSubSystemsCreate) AddChildMdsubsystems(m ...*MDSubSystems) *MDSubSystemsCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mssc.AddChildMdsubsystemIDs(ids...)
}

// SetParentMdsubsystemsID sets the "parent_mdsubsystems" edge to the MDSubSystems entity by ID.
func (mssc *MDSubSystemsCreate) SetParentMdsubsystemsID(id string) *MDSubSystemsCreate {
	mssc.mutation.SetParentMdsubsystemsID(id)
	return mssc
}

// SetNillableParentMdsubsystemsID sets the "parent_mdsubsystems" edge to the MDSubSystems entity by ID if the given value is not nil.
func (mssc *MDSubSystemsCreate) SetNillableParentMdsubsystemsID(id *string) *MDSubSystemsCreate {
	if id != nil {
		mssc = mssc.SetParentMdsubsystemsID(*id)
	}
	return mssc
}

// SetParentMdsubsystems sets the "parent_mdsubsystems" edge to the MDSubSystems entity.
func (mssc *MDSubSystemsCreate) SetParentMdsubsystems(m *MDSubSystems) *MDSubSystemsCreate {
	return mssc.SetParentMdsubsystemsID(m.ID)
}

// AddMdtableIDs adds the "mdtables" edge to the MDTabel entity by IDs.
func (mssc *MDSubSystemsCreate) AddMdtableIDs(ids ...string) *MDSubSystemsCreate {
	mssc.mutation.AddMdtableIDs(ids...)
	return mssc
}

// AddMdtables adds the "mdtables" edges to the MDTabel entity.
func (mssc *MDSubSystemsCreate) AddMdtables(m ...*MDTabel) *MDSubSystemsCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mssc.AddMdtableIDs(ids...)
}

// Mutation returns the MDSubSystemsMutation object of the builder.
func (mssc *MDSubSystemsCreate) Mutation() *MDSubSystemsMutation {
	return mssc.mutation
}

// Save creates the MDSubSystems in the database.
func (mssc *MDSubSystemsCreate) Save(ctx context.Context) (*MDSubSystems, error) {
	var (
		err  error
		node *MDSubSystems
	)
	if len(mssc.hooks) == 0 {
		if err = mssc.check(); err != nil {
			return nil, err
		}
		node, err = mssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDSubSystemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mssc.check(); err != nil {
				return nil, err
			}
			mssc.mutation = mutation
			if node, err = mssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mssc.hooks) - 1; i >= 0; i-- {
			if mssc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mssc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mssc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mssc *MDSubSystemsCreate) SaveX(ctx context.Context) *MDSubSystems {
	v, err := mssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mssc *MDSubSystemsCreate) Exec(ctx context.Context) error {
	_, err := mssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mssc *MDSubSystemsCreate) ExecX(ctx context.Context) {
	if err := mssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mssc *MDSubSystemsCreate) check() error {
	if _, ok := mssc.mutation.Nameeng(); !ok {
		return &ValidationError{Name: "nameeng", err: errors.New(`ent: missing required field "MDSubSystems.nameeng"`)}
	}
	if v, ok := mssc.mutation.Nameeng(); ok {
		if err := mdsubsystems.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDSubSystems.nameeng": %w`, err)}
		}
	}
	if _, ok := mssc.mutation.Synonym(); !ok {
		return &ValidationError{Name: "synonym", err: errors.New(`ent: missing required field "MDSubSystems.synonym"`)}
	}
	if v, ok := mssc.mutation.Synonym(); ok {
		if err := mdsubsystems.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDSubSystems.synonym": %w`, err)}
		}
	}
	if _, ok := mssc.mutation.Por(); !ok {
		return &ValidationError{Name: "por", err: errors.New(`ent: missing required field "MDSubSystems.por"`)}
	}
	if v, ok := mssc.mutation.ID(); ok {
		if err := mdsubsystems.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MDSubSystems.id": %w`, err)}
		}
	}
	return nil
}

func (mssc *MDSubSystemsCreate) sqlSave(ctx context.Context) (*MDSubSystems, error) {
	_node, _spec := mssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MDSubSystems.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (mssc *MDSubSystemsCreate) createSpec() (*MDSubSystems, *sqlgraph.CreateSpec) {
	var (
		_node = &MDSubSystems{config: mssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mdsubsystems.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdsubsystems.FieldID,
			},
		}
	)
	_spec.OnConflict = mssc.conflict
	if id, ok := mssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mssc.mutation.Nameeng(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdsubsystems.FieldNameeng,
		})
		_node.Nameeng = value
	}
	if value, ok := mssc.mutation.Synonym(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdsubsystems.FieldSynonym,
		})
		_node.Synonym = value
	}
	if value, ok := mssc.mutation.Por(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdsubsystems.FieldPor,
		})
		_node.Por = value
	}
	if nodes := mssc.mutation.ChildMdsubsystemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdsubsystems.ChildMdsubsystemsTable,
			Columns: []string{mdsubsystems.ChildMdsubsystemsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mssc.mutation.ParentMdsubsystemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdsubsystems.ParentMdsubsystemsTable,
			Columns: []string{mdsubsystems.ParentMdsubsystemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Parent = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mssc.mutation.MdtablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mdsubsystems.MdtablesTable,
			Columns: mdsubsystems.MdtablesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDSubSystems.Create().
//		SetNameeng(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDSubSystemsUpsert) {
//			SetNameeng(v+v).
//		}).
//		Exec(ctx)
//
func (mssc *MDSubSystemsCreate) OnConflict(opts ...sql.ConflictOption) *MDSubSystemsUpsertOne {
	mssc.conflict = opts
	return &MDSubSystemsUpsertOne{
		create: mssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDSubSystems.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mssc *MDSubSystemsCreate) OnConflictColumns(columns ...string) *MDSubSystemsUpsertOne {
	mssc.conflict = append(mssc.conflict, sql.ConflictColumns(columns...))
	return &MDSubSystemsUpsertOne{
		create: mssc,
	}
}

type (
	// MDSubSystemsUpsertOne is the builder for "upsert"-ing
	//  one MDSubSystems node.
	MDSubSystemsUpsertOne struct {
		create *MDSubSystemsCreate
	}

	// MDSubSystemsUpsert is the "OnConflict" setter.
	MDSubSystemsUpsert struct {
		*sql.UpdateSet
	}
)

// SetNameeng sets the "nameeng" field.
func (u *MDSubSystemsUpsert) SetNameeng(v string) *MDSubSystemsUpsert {
	u.Set(mdsubsystems.FieldNameeng, v)
	return u
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDSubSystemsUpsert) UpdateNameeng() *MDSubSystemsUpsert {
	u.SetExcluded(mdsubsystems.FieldNameeng)
	return u
}

// SetSynonym sets the "synonym" field.
func (u *MDSubSystemsUpsert) SetSynonym(v string) *MDSubSystemsUpsert {
	u.Set(mdsubsystems.FieldSynonym, v)
	return u
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDSubSystemsUpsert) UpdateSynonym() *MDSubSystemsUpsert {
	u.SetExcluded(mdsubsystems.FieldSynonym)
	return u
}

// SetPor sets the "por" field.
func (u *MDSubSystemsUpsert) SetPor(v string) *MDSubSystemsUpsert {
	u.Set(mdsubsystems.FieldPor, v)
	return u
}

// UpdatePor sets the "por" field to the value that was provided on create.
func (u *MDSubSystemsUpsert) UpdatePor() *MDSubSystemsUpsert {
	u.SetExcluded(mdsubsystems.FieldPor)
	return u
}

// SetParent sets the "parent" field.
func (u *MDSubSystemsUpsert) SetParent(v string) *MDSubSystemsUpsert {
	u.Set(mdsubsystems.FieldParent, v)
	return u
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDSubSystemsUpsert) UpdateParent() *MDSubSystemsUpsert {
	u.SetExcluded(mdsubsystems.FieldParent)
	return u
}

// ClearParent clears the value of the "parent" field.
func (u *MDSubSystemsUpsert) ClearParent() *MDSubSystemsUpsert {
	u.SetNull(mdsubsystems.FieldParent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MDSubSystems.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdsubsystems.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDSubSystemsUpsertOne) UpdateNewValues() *MDSubSystemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mdsubsystems.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MDSubSystems.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MDSubSystemsUpsertOne) Ignore() *MDSubSystemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDSubSystemsUpsertOne) DoNothing() *MDSubSystemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDSubSystemsCreate.OnConflict
// documentation for more info.
func (u *MDSubSystemsUpsertOne) Update(set func(*MDSubSystemsUpsert)) *MDSubSystemsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDSubSystemsUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameeng sets the "nameeng" field.
func (u *MDSubSystemsUpsertOne) SetNameeng(v string) *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetNameeng(v)
	})
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDSubSystemsUpsertOne) UpdateNameeng() *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdateNameeng()
	})
}

// SetSynonym sets the "synonym" field.
func (u *MDSubSystemsUpsertOne) SetSynonym(v string) *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetSynonym(v)
	})
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDSubSystemsUpsertOne) UpdateSynonym() *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdateSynonym()
	})
}

// SetPor sets the "por" field.
func (u *MDSubSystemsUpsertOne) SetPor(v string) *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetPor(v)
	})
}

// UpdatePor sets the "por" field to the value that was provided on create.
func (u *MDSubSystemsUpsertOne) UpdatePor() *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdatePor()
	})
}

// SetParent sets the "parent" field.
func (u *MDSubSystemsUpsertOne) SetParent(v string) *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetParent(v)
	})
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDSubSystemsUpsertOne) UpdateParent() *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdateParent()
	})
}

// ClearParent clears the value of the "parent" field.
func (u *MDSubSystemsUpsertOne) ClearParent() *MDSubSystemsUpsertOne {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.ClearParent()
	})
}

// Exec executes the query.
func (u *MDSubSystemsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDSubSystemsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDSubSystemsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MDSubSystemsUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MDSubSystemsUpsertOne.ID is not supported by MySQL driver. Use MDSubSystemsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MDSubSystemsUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MDSubSystemsCreateBulk is the builder for creating many MDSubSystems entities in bulk.
type MDSubSystemsCreateBulk struct {
	config
	builders []*MDSubSystemsCreate
	conflict []sql.ConflictOption
}

// Save creates the MDSubSystems entities in the database.
func (msscb *MDSubSystemsCreateBulk) Save(ctx context.Context) ([]*MDSubSystems, error) {
	specs := make([]*sqlgraph.CreateSpec, len(msscb.builders))
	nodes := make([]*MDSubSystems, len(msscb.builders))
	mutators := make([]Mutator, len(msscb.builders))
	for i := range msscb.builders {
		func(i int, root context.Context) {
			builder := msscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MDSubSystemsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, msscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = msscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, msscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, msscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (msscb *MDSubSystemsCreateBulk) SaveX(ctx context.Context) []*MDSubSystems {
	v, err := msscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msscb *MDSubSystemsCreateBulk) Exec(ctx context.Context) error {
	_, err := msscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msscb *MDSubSystemsCreateBulk) ExecX(ctx context.Context) {
	if err := msscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDSubSystems.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDSubSystemsUpsert) {
//			SetNameeng(v+v).
//		}).
//		Exec(ctx)
//
func (msscb *MDSubSystemsCreateBulk) OnConflict(opts ...sql.ConflictOption) *MDSubSystemsUpsertBulk {
	msscb.conflict = opts
	return &MDSubSystemsUpsertBulk{
		create: msscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDSubSystems.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (msscb *MDSubSystemsCreateBulk) OnConflictColumns(columns ...string) *MDSubSystemsUpsertBulk {
	msscb.conflict = append(msscb.conflict, sql.ConflictColumns(columns...))
	return &MDSubSystemsUpsertBulk{
		create: msscb,
	}
}

// MDSubSystemsUpsertBulk is the builder for "upsert"-ing
// a bulk of MDSubSystems nodes.
type MDSubSystemsUpsertBulk struct {
	create *MDSubSystemsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MDSubSystems.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdsubsystems.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDSubSystemsUpsertBulk) UpdateNewValues() *MDSubSystemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mdsubsystems.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MDSubSystems.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MDSubSystemsUpsertBulk) Ignore() *MDSubSystemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDSubSystemsUpsertBulk) DoNothing() *MDSubSystemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDSubSystemsCreateBulk.OnConflict
// documentation for more info.
func (u *MDSubSystemsUpsertBulk) Update(set func(*MDSubSystemsUpsert)) *MDSubSystemsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDSubSystemsUpsert{UpdateSet: update})
	}))
	return u
}

// SetNameeng sets the "nameeng" field.
func (u *MDSubSystemsUpsertBulk) SetNameeng(v string) *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetNameeng(v)
	})
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDSubSystemsUpsertBulk) UpdateNameeng() *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdateNameeng()
	})
}

// SetSynonym sets the "synonym" field.
func (u *MDSubSystemsUpsertBulk) SetSynonym(v string) *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetSynonym(v)
	})
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDSubSystemsUpsertBulk) UpdateSynonym() *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdateSynonym()
	})
}

// SetPor sets the "por" field.
func (u *MDSubSystemsUpsertBulk) SetPor(v string) *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetPor(v)
	})
}

// UpdatePor sets the "por" field to the value that was provided on create.
func (u *MDSubSystemsUpsertBulk) UpdatePor() *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdatePor()
	})
}

// SetParent sets the "parent" field.
func (u *MDSubSystemsUpsertBulk) SetParent(v string) *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.SetParent(v)
	})
}

// UpdateParent sets the "parent" field to the value that was provided on create.
func (u *MDSubSystemsUpsertBulk) UpdateParent() *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.UpdateParent()
	})
}

// ClearParent clears the value of the "parent" field.
func (u *MDSubSystemsUpsertBulk) ClearParent() *MDSubSystemsUpsertBulk {
	return u.Update(func(s *MDSubSystemsUpsert) {
		s.ClearParent()
	})
}

// Exec executes the query.
func (u *MDSubSystemsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MDSubSystemsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDSubSystemsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDSubSystemsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
