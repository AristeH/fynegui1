// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdforms"
	"fynegui/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDFormsUpdate is the builder for updating MDForms entities.
type MDFormsUpdate struct {
	config
	hooks    []Hook
	mutation *MDFormsMutation
}

// Where appends a list predicates to the MDFormsUpdate builder.
func (mfu *MDFormsUpdate) Where(ps ...predicate.MDForms) *MDFormsUpdate {
	mfu.mutation.Where(ps...)
	return mfu
}

// SetIdform sets the "idform" field.
func (mfu *MDFormsUpdate) SetIdform(s string) *MDFormsUpdate {
	mfu.mutation.SetIdform(s)
	return mfu
}

// SetConteiner sets the "conteiner" field.
func (mfu *MDFormsUpdate) SetConteiner(s string) *MDFormsUpdate {
	mfu.mutation.SetConteiner(s)
	return mfu
}

// SetParent sets the "parent" field.
func (mfu *MDFormsUpdate) SetParent(s string) *MDFormsUpdate {
	mfu.mutation.SetParent(s)
	return mfu
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (mfu *MDFormsUpdate) SetNillableParent(s *string) *MDFormsUpdate {
	if s != nil {
		mfu.SetParent(*s)
	}
	return mfu
}

// ClearParent clears the value of the "parent" field.
func (mfu *MDFormsUpdate) ClearParent() *MDFormsUpdate {
	mfu.mutation.ClearParent()
	return mfu
}

// AddChildMdformIDs adds the "child_mdforms" edge to the MDForms entity by IDs.
func (mfu *MDFormsUpdate) AddChildMdformIDs(ids ...string) *MDFormsUpdate {
	mfu.mutation.AddChildMdformIDs(ids...)
	return mfu
}

// AddChildMdforms adds the "child_mdforms" edges to the MDForms entity.
func (mfu *MDFormsUpdate) AddChildMdforms(m ...*MDForms) *MDFormsUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfu.AddChildMdformIDs(ids...)
}

// SetParentMdformsID sets the "parent_mdforms" edge to the MDForms entity by ID.
func (mfu *MDFormsUpdate) SetParentMdformsID(id string) *MDFormsUpdate {
	mfu.mutation.SetParentMdformsID(id)
	return mfu
}

// SetNillableParentMdformsID sets the "parent_mdforms" edge to the MDForms entity by ID if the given value is not nil.
func (mfu *MDFormsUpdate) SetNillableParentMdformsID(id *string) *MDFormsUpdate {
	if id != nil {
		mfu = mfu.SetParentMdformsID(*id)
	}
	return mfu
}

// SetParentMdforms sets the "parent_mdforms" edge to the MDForms entity.
func (mfu *MDFormsUpdate) SetParentMdforms(m *MDForms) *MDFormsUpdate {
	return mfu.SetParentMdformsID(m.ID)
}

// Mutation returns the MDFormsMutation object of the builder.
func (mfu *MDFormsUpdate) Mutation() *MDFormsMutation {
	return mfu.mutation
}

// ClearChildMdforms clears all "child_mdforms" edges to the MDForms entity.
func (mfu *MDFormsUpdate) ClearChildMdforms() *MDFormsUpdate {
	mfu.mutation.ClearChildMdforms()
	return mfu
}

// RemoveChildMdformIDs removes the "child_mdforms" edge to MDForms entities by IDs.
func (mfu *MDFormsUpdate) RemoveChildMdformIDs(ids ...string) *MDFormsUpdate {
	mfu.mutation.RemoveChildMdformIDs(ids...)
	return mfu
}

// RemoveChildMdforms removes "child_mdforms" edges to MDForms entities.
func (mfu *MDFormsUpdate) RemoveChildMdforms(m ...*MDForms) *MDFormsUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfu.RemoveChildMdformIDs(ids...)
}

// ClearParentMdforms clears the "parent_mdforms" edge to the MDForms entity.
func (mfu *MDFormsUpdate) ClearParentMdforms() *MDFormsUpdate {
	mfu.mutation.ClearParentMdforms()
	return mfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mfu *MDFormsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mfu.hooks) == 0 {
		if err = mfu.check(); err != nil {
			return 0, err
		}
		affected, err = mfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDFormsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mfu.check(); err != nil {
				return 0, err
			}
			mfu.mutation = mutation
			affected, err = mfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mfu.hooks) - 1; i >= 0; i-- {
			if mfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mfu *MDFormsUpdate) SaveX(ctx context.Context) int {
	affected, err := mfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mfu *MDFormsUpdate) Exec(ctx context.Context) error {
	_, err := mfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfu *MDFormsUpdate) ExecX(ctx context.Context) {
	if err := mfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mfu *MDFormsUpdate) check() error {
	if v, ok := mfu.mutation.Idform(); ok {
		if err := mdforms.IdformValidator(v); err != nil {
			return &ValidationError{Name: "idform", err: fmt.Errorf(`ent: validator failed for field "MDForms.idform": %w`, err)}
		}
	}
	if v, ok := mfu.mutation.Parent(); ok {
		if err := mdforms.ParentValidator(v); err != nil {
			return &ValidationError{Name: "parent", err: fmt.Errorf(`ent: validator failed for field "MDForms.parent": %w`, err)}
		}
	}
	return nil
}

func (mfu *MDFormsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdforms.Table,
			Columns: mdforms.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdforms.FieldID,
			},
		},
	}
	if ps := mfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mfu.mutation.Idform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdforms.FieldIdform,
		})
	}
	if value, ok := mfu.mutation.Conteiner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdforms.FieldConteiner,
		})
	}
	if mfu.mutation.ChildMdformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdforms.ChildMdformsTable,
			Columns: []string{mdforms.ChildMdformsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfu.mutation.RemovedChildMdformsIDs(); len(nodes) > 0 && !mfu.mutation.ChildMdformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdforms.ChildMdformsTable,
			Columns: []string{mdforms.ChildMdformsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfu.mutation.ChildMdformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdforms.ChildMdformsTable,
			Columns: []string{mdforms.ChildMdformsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mfu.mutation.ParentMdformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdforms.ParentMdformsTable,
			Columns: []string{mdforms.ParentMdformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfu.mutation.ParentMdformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdforms.ParentMdformsTable,
			Columns: []string{mdforms.ParentMdformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdforms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MDFormsUpdateOne is the builder for updating a single MDForms entity.
type MDFormsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MDFormsMutation
}

// SetIdform sets the "idform" field.
func (mfuo *MDFormsUpdateOne) SetIdform(s string) *MDFormsUpdateOne {
	mfuo.mutation.SetIdform(s)
	return mfuo
}

// SetConteiner sets the "conteiner" field.
func (mfuo *MDFormsUpdateOne) SetConteiner(s string) *MDFormsUpdateOne {
	mfuo.mutation.SetConteiner(s)
	return mfuo
}

// SetParent sets the "parent" field.
func (mfuo *MDFormsUpdateOne) SetParent(s string) *MDFormsUpdateOne {
	mfuo.mutation.SetParent(s)
	return mfuo
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (mfuo *MDFormsUpdateOne) SetNillableParent(s *string) *MDFormsUpdateOne {
	if s != nil {
		mfuo.SetParent(*s)
	}
	return mfuo
}

// ClearParent clears the value of the "parent" field.
func (mfuo *MDFormsUpdateOne) ClearParent() *MDFormsUpdateOne {
	mfuo.mutation.ClearParent()
	return mfuo
}

// AddChildMdformIDs adds the "child_mdforms" edge to the MDForms entity by IDs.
func (mfuo *MDFormsUpdateOne) AddChildMdformIDs(ids ...string) *MDFormsUpdateOne {
	mfuo.mutation.AddChildMdformIDs(ids...)
	return mfuo
}

// AddChildMdforms adds the "child_mdforms" edges to the MDForms entity.
func (mfuo *MDFormsUpdateOne) AddChildMdforms(m ...*MDForms) *MDFormsUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfuo.AddChildMdformIDs(ids...)
}

// SetParentMdformsID sets the "parent_mdforms" edge to the MDForms entity by ID.
func (mfuo *MDFormsUpdateOne) SetParentMdformsID(id string) *MDFormsUpdateOne {
	mfuo.mutation.SetParentMdformsID(id)
	return mfuo
}

// SetNillableParentMdformsID sets the "parent_mdforms" edge to the MDForms entity by ID if the given value is not nil.
func (mfuo *MDFormsUpdateOne) SetNillableParentMdformsID(id *string) *MDFormsUpdateOne {
	if id != nil {
		mfuo = mfuo.SetParentMdformsID(*id)
	}
	return mfuo
}

// SetParentMdforms sets the "parent_mdforms" edge to the MDForms entity.
func (mfuo *MDFormsUpdateOne) SetParentMdforms(m *MDForms) *MDFormsUpdateOne {
	return mfuo.SetParentMdformsID(m.ID)
}

// Mutation returns the MDFormsMutation object of the builder.
func (mfuo *MDFormsUpdateOne) Mutation() *MDFormsMutation {
	return mfuo.mutation
}

// ClearChildMdforms clears all "child_mdforms" edges to the MDForms entity.
func (mfuo *MDFormsUpdateOne) ClearChildMdforms() *MDFormsUpdateOne {
	mfuo.mutation.ClearChildMdforms()
	return mfuo
}

// RemoveChildMdformIDs removes the "child_mdforms" edge to MDForms entities by IDs.
func (mfuo *MDFormsUpdateOne) RemoveChildMdformIDs(ids ...string) *MDFormsUpdateOne {
	mfuo.mutation.RemoveChildMdformIDs(ids...)
	return mfuo
}

// RemoveChildMdforms removes "child_mdforms" edges to MDForms entities.
func (mfuo *MDFormsUpdateOne) RemoveChildMdforms(m ...*MDForms) *MDFormsUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfuo.RemoveChildMdformIDs(ids...)
}

// ClearParentMdforms clears the "parent_mdforms" edge to the MDForms entity.
func (mfuo *MDFormsUpdateOne) ClearParentMdforms() *MDFormsUpdateOne {
	mfuo.mutation.ClearParentMdforms()
	return mfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mfuo *MDFormsUpdateOne) Select(field string, fields ...string) *MDFormsUpdateOne {
	mfuo.fields = append([]string{field}, fields...)
	return mfuo
}

// Save executes the query and returns the updated MDForms entity.
func (mfuo *MDFormsUpdateOne) Save(ctx context.Context) (*MDForms, error) {
	var (
		err  error
		node *MDForms
	)
	if len(mfuo.hooks) == 0 {
		if err = mfuo.check(); err != nil {
			return nil, err
		}
		node, err = mfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDFormsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mfuo.check(); err != nil {
				return nil, err
			}
			mfuo.mutation = mutation
			node, err = mfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mfuo.hooks) - 1; i >= 0; i-- {
			if mfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mfuo *MDFormsUpdateOne) SaveX(ctx context.Context) *MDForms {
	node, err := mfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mfuo *MDFormsUpdateOne) Exec(ctx context.Context) error {
	_, err := mfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfuo *MDFormsUpdateOne) ExecX(ctx context.Context) {
	if err := mfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mfuo *MDFormsUpdateOne) check() error {
	if v, ok := mfuo.mutation.Idform(); ok {
		if err := mdforms.IdformValidator(v); err != nil {
			return &ValidationError{Name: "idform", err: fmt.Errorf(`ent: validator failed for field "MDForms.idform": %w`, err)}
		}
	}
	if v, ok := mfuo.mutation.Parent(); ok {
		if err := mdforms.ParentValidator(v); err != nil {
			return &ValidationError{Name: "parent", err: fmt.Errorf(`ent: validator failed for field "MDForms.parent": %w`, err)}
		}
	}
	return nil
}

func (mfuo *MDFormsUpdateOne) sqlSave(ctx context.Context) (_node *MDForms, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdforms.Table,
			Columns: mdforms.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdforms.FieldID,
			},
		},
	}
	id, ok := mfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MDForms.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mdforms.FieldID)
		for _, f := range fields {
			if !mdforms.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mdforms.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mfuo.mutation.Idform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdforms.FieldIdform,
		})
	}
	if value, ok := mfuo.mutation.Conteiner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdforms.FieldConteiner,
		})
	}
	if mfuo.mutation.ChildMdformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdforms.ChildMdformsTable,
			Columns: []string{mdforms.ChildMdformsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfuo.mutation.RemovedChildMdformsIDs(); len(nodes) > 0 && !mfuo.mutation.ChildMdformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdforms.ChildMdformsTable,
			Columns: []string{mdforms.ChildMdformsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfuo.mutation.ChildMdformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdforms.ChildMdformsTable,
			Columns: []string{mdforms.ChildMdformsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mfuo.mutation.ParentMdformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdforms.ParentMdformsTable,
			Columns: []string{mdforms.ParentMdformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfuo.mutation.ParentMdformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdforms.ParentMdformsTable,
			Columns: []string{mdforms.ParentMdformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdforms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MDForms{config: mfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdforms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
