// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"fynegui/ent/migrate"

	"fynegui/ent/mdrekvizit"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"
	"fynegui/ent/mdtypetabel"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MDRekvizit is the client for interacting with the MDRekvizit builders.
	MDRekvizit *MDRekvizitClient
	// MDSubSystems is the client for interacting with the MDSubSystems builders.
	MDSubSystems *MDSubSystemsClient
	// MDTabel is the client for interacting with the MDTabel builders.
	MDTabel *MDTabelClient
	// MDTypeTabel is the client for interacting with the MDTypeTabel builders.
	MDTypeTabel *MDTypeTabelClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.MDRekvizit = NewMDRekvizitClient(c.config)
	c.MDSubSystems = NewMDSubSystemsClient(c.config)
	c.MDTabel = NewMDTabelClient(c.config)
	c.MDTypeTabel = NewMDTypeTabelClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		MDRekvizit:   NewMDRekvizitClient(cfg),
		MDSubSystems: NewMDSubSystemsClient(cfg),
		MDTabel:      NewMDTabelClient(cfg),
		MDTypeTabel:  NewMDTypeTabelClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		MDRekvizit:   NewMDRekvizitClient(cfg),
		MDSubSystems: NewMDSubSystemsClient(cfg),
		MDTabel:      NewMDTabelClient(cfg),
		MDTypeTabel:  NewMDTypeTabelClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MDRekvizit.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.MDRekvizit.Use(hooks...)
	c.MDSubSystems.Use(hooks...)
	c.MDTabel.Use(hooks...)
	c.MDTypeTabel.Use(hooks...)
}

// MDRekvizitClient is a client for the MDRekvizit schema.
type MDRekvizitClient struct {
	config
}

// NewMDRekvizitClient returns a client for the MDRekvizit from the given config.
func NewMDRekvizitClient(c config) *MDRekvizitClient {
	return &MDRekvizitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mdrekvizit.Hooks(f(g(h())))`.
func (c *MDRekvizitClient) Use(hooks ...Hook) {
	c.hooks.MDRekvizit = append(c.hooks.MDRekvizit, hooks...)
}

// Create returns a create builder for MDRekvizit.
func (c *MDRekvizitClient) Create() *MDRekvizitCreate {
	mutation := newMDRekvizitMutation(c.config, OpCreate)
	return &MDRekvizitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MDRekvizit entities.
func (c *MDRekvizitClient) CreateBulk(builders ...*MDRekvizitCreate) *MDRekvizitCreateBulk {
	return &MDRekvizitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MDRekvizit.
func (c *MDRekvizitClient) Update() *MDRekvizitUpdate {
	mutation := newMDRekvizitMutation(c.config, OpUpdate)
	return &MDRekvizitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MDRekvizitClient) UpdateOne(mr *MDRekvizit) *MDRekvizitUpdateOne {
	mutation := newMDRekvizitMutation(c.config, OpUpdateOne, withMDRekvizit(mr))
	return &MDRekvizitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MDRekvizitClient) UpdateOneID(id string) *MDRekvizitUpdateOne {
	mutation := newMDRekvizitMutation(c.config, OpUpdateOne, withMDRekvizitID(id))
	return &MDRekvizitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MDRekvizit.
func (c *MDRekvizitClient) Delete() *MDRekvizitDelete {
	mutation := newMDRekvizitMutation(c.config, OpDelete)
	return &MDRekvizitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MDRekvizitClient) DeleteOne(mr *MDRekvizit) *MDRekvizitDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MDRekvizitClient) DeleteOneID(id string) *MDRekvizitDeleteOne {
	builder := c.Delete().Where(mdrekvizit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MDRekvizitDeleteOne{builder}
}

// Query returns a query builder for MDRekvizit.
func (c *MDRekvizitClient) Query() *MDRekvizitQuery {
	return &MDRekvizitQuery{
		config: c.config,
	}
}

// Get returns a MDRekvizit entity by its id.
func (c *MDRekvizitClient) Get(ctx context.Context, id string) (*MDRekvizit, error) {
	return c.Query().Where(mdrekvizit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MDRekvizitClient) GetX(ctx context.Context, id string) *MDRekvizit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a MDRekvizit.
func (c *MDRekvizitClient) QueryOwner(mr *MDRekvizit) *MDTabelQuery {
	query := &MDTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdrekvizit.Table, mdrekvizit.FieldID, id),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdrekvizit.OwnerTable, mdrekvizit.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MDRekvizitClient) Hooks() []Hook {
	return c.hooks.MDRekvizit
}

// MDSubSystemsClient is a client for the MDSubSystems schema.
type MDSubSystemsClient struct {
	config
}

// NewMDSubSystemsClient returns a client for the MDSubSystems from the given config.
func NewMDSubSystemsClient(c config) *MDSubSystemsClient {
	return &MDSubSystemsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mdsubsystems.Hooks(f(g(h())))`.
func (c *MDSubSystemsClient) Use(hooks ...Hook) {
	c.hooks.MDSubSystems = append(c.hooks.MDSubSystems, hooks...)
}

// Create returns a create builder for MDSubSystems.
func (c *MDSubSystemsClient) Create() *MDSubSystemsCreate {
	mutation := newMDSubSystemsMutation(c.config, OpCreate)
	return &MDSubSystemsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MDSubSystems entities.
func (c *MDSubSystemsClient) CreateBulk(builders ...*MDSubSystemsCreate) *MDSubSystemsCreateBulk {
	return &MDSubSystemsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MDSubSystems.
func (c *MDSubSystemsClient) Update() *MDSubSystemsUpdate {
	mutation := newMDSubSystemsMutation(c.config, OpUpdate)
	return &MDSubSystemsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MDSubSystemsClient) UpdateOne(mss *MDSubSystems) *MDSubSystemsUpdateOne {
	mutation := newMDSubSystemsMutation(c.config, OpUpdateOne, withMDSubSystems(mss))
	return &MDSubSystemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MDSubSystemsClient) UpdateOneID(id string) *MDSubSystemsUpdateOne {
	mutation := newMDSubSystemsMutation(c.config, OpUpdateOne, withMDSubSystemsID(id))
	return &MDSubSystemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MDSubSystems.
func (c *MDSubSystemsClient) Delete() *MDSubSystemsDelete {
	mutation := newMDSubSystemsMutation(c.config, OpDelete)
	return &MDSubSystemsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MDSubSystemsClient) DeleteOne(mss *MDSubSystems) *MDSubSystemsDeleteOne {
	return c.DeleteOneID(mss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MDSubSystemsClient) DeleteOneID(id string) *MDSubSystemsDeleteOne {
	builder := c.Delete().Where(mdsubsystems.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MDSubSystemsDeleteOne{builder}
}

// Query returns a query builder for MDSubSystems.
func (c *MDSubSystemsClient) Query() *MDSubSystemsQuery {
	return &MDSubSystemsQuery{
		config: c.config,
	}
}

// Get returns a MDSubSystems entity by its id.
func (c *MDSubSystemsClient) Get(ctx context.Context, id string) (*MDSubSystems, error) {
	return c.Query().Where(mdsubsystems.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MDSubSystemsClient) GetX(ctx context.Context, id string) *MDSubSystems {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChildMdsubsystems queries the child_mdsubsystems edge of a MDSubSystems.
func (c *MDSubSystemsClient) QueryChildMdsubsystems(mss *MDSubSystems) *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdsubsystems.Table, mdsubsystems.FieldID, id),
			sqlgraph.To(mdsubsystems.Table, mdsubsystems.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdsubsystems.ChildMdsubsystemsTable, mdsubsystems.ChildMdsubsystemsColumn),
		)
		fromV = sqlgraph.Neighbors(mss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentMdsubsystems queries the parent_mdsubsystems edge of a MDSubSystems.
func (c *MDSubSystemsClient) QueryParentMdsubsystems(mss *MDSubSystems) *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdsubsystems.Table, mdsubsystems.FieldID, id),
			sqlgraph.To(mdsubsystems.Table, mdsubsystems.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdsubsystems.ParentMdsubsystemsTable, mdsubsystems.ParentMdsubsystemsColumn),
		)
		fromV = sqlgraph.Neighbors(mss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMdtables queries the mdtables edge of a MDSubSystems.
func (c *MDSubSystemsClient) QueryMdtables(mss *MDSubSystems) *MDTabelQuery {
	query := &MDTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdsubsystems.Table, mdsubsystems.FieldID, id),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, mdsubsystems.MdtablesTable, mdsubsystems.MdtablesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(mss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MDSubSystemsClient) Hooks() []Hook {
	return c.hooks.MDSubSystems
}

// MDTabelClient is a client for the MDTabel schema.
type MDTabelClient struct {
	config
}

// NewMDTabelClient returns a client for the MDTabel from the given config.
func NewMDTabelClient(c config) *MDTabelClient {
	return &MDTabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mdtabel.Hooks(f(g(h())))`.
func (c *MDTabelClient) Use(hooks ...Hook) {
	c.hooks.MDTabel = append(c.hooks.MDTabel, hooks...)
}

// Create returns a create builder for MDTabel.
func (c *MDTabelClient) Create() *MDTabelCreate {
	mutation := newMDTabelMutation(c.config, OpCreate)
	return &MDTabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MDTabel entities.
func (c *MDTabelClient) CreateBulk(builders ...*MDTabelCreate) *MDTabelCreateBulk {
	return &MDTabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MDTabel.
func (c *MDTabelClient) Update() *MDTabelUpdate {
	mutation := newMDTabelMutation(c.config, OpUpdate)
	return &MDTabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MDTabelClient) UpdateOne(mt *MDTabel) *MDTabelUpdateOne {
	mutation := newMDTabelMutation(c.config, OpUpdateOne, withMDTabel(mt))
	return &MDTabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MDTabelClient) UpdateOneID(id string) *MDTabelUpdateOne {
	mutation := newMDTabelMutation(c.config, OpUpdateOne, withMDTabelID(id))
	return &MDTabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MDTabel.
func (c *MDTabelClient) Delete() *MDTabelDelete {
	mutation := newMDTabelMutation(c.config, OpDelete)
	return &MDTabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MDTabelClient) DeleteOne(mt *MDTabel) *MDTabelDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MDTabelClient) DeleteOneID(id string) *MDTabelDeleteOne {
	builder := c.Delete().Where(mdtabel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MDTabelDeleteOne{builder}
}

// Query returns a query builder for MDTabel.
func (c *MDTabelClient) Query() *MDTabelQuery {
	return &MDTabelQuery{
		config: c.config,
	}
}

// Get returns a MDTabel entity by its id.
func (c *MDTabelClient) Get(ctx context.Context, id string) (*MDTabel, error) {
	return c.Query().Where(mdtabel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MDTabelClient) GetX(ctx context.Context, id string) *MDTabel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChildMdtabel queries the child_mdtabel edge of a MDTabel.
func (c *MDTabelClient) QueryChildMdtabel(mt *MDTabel) *MDTabelQuery {
	query := &MDTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, id),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdtabel.ChildMdtabelTable, mdtabel.ChildMdtabelColumn),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentMdtabel queries the parent_mdtabel edge of a MDTabel.
func (c *MDTabelClient) QueryParentMdtabel(mt *MDTabel) *MDTabelQuery {
	query := &MDTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, id),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdtabel.ParentMdtabelTable, mdtabel.ParentMdtabelColumn),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMdsubsystems queries the mdsubsystems edge of a MDTabel.
func (c *MDTabelClient) QueryMdsubsystems(mt *MDTabel) *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, id),
			sqlgraph.To(mdsubsystems.Table, mdsubsystems.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, mdtabel.MdsubsystemsTable, mdtabel.MdsubsystemsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMdrekvizits queries the mdrekvizits edge of a MDTabel.
func (c *MDTabelClient) QueryMdrekvizits(mt *MDTabel) *MDRekvizitQuery {
	query := &MDRekvizitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, id),
			sqlgraph.To(mdrekvizit.Table, mdrekvizit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdtabel.MdrekvizitsTable, mdtabel.MdrekvizitsColumn),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMdtypetabel queries the mdtypetabel edge of a MDTabel.
func (c *MDTabelClient) QueryMdtypetabel(mt *MDTabel) *MDTypeTabelQuery {
	query := &MDTypeTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtabel.Table, mdtabel.FieldID, id),
			sqlgraph.To(mdtypetabel.Table, mdtypetabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdtabel.MdtypetabelTable, mdtabel.MdtypetabelColumn),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MDTabelClient) Hooks() []Hook {
	return c.hooks.MDTabel
}

// MDTypeTabelClient is a client for the MDTypeTabel schema.
type MDTypeTabelClient struct {
	config
}

// NewMDTypeTabelClient returns a client for the MDTypeTabel from the given config.
func NewMDTypeTabelClient(c config) *MDTypeTabelClient {
	return &MDTypeTabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mdtypetabel.Hooks(f(g(h())))`.
func (c *MDTypeTabelClient) Use(hooks ...Hook) {
	c.hooks.MDTypeTabel = append(c.hooks.MDTypeTabel, hooks...)
}

// Create returns a create builder for MDTypeTabel.
func (c *MDTypeTabelClient) Create() *MDTypeTabelCreate {
	mutation := newMDTypeTabelMutation(c.config, OpCreate)
	return &MDTypeTabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MDTypeTabel entities.
func (c *MDTypeTabelClient) CreateBulk(builders ...*MDTypeTabelCreate) *MDTypeTabelCreateBulk {
	return &MDTypeTabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MDTypeTabel.
func (c *MDTypeTabelClient) Update() *MDTypeTabelUpdate {
	mutation := newMDTypeTabelMutation(c.config, OpUpdate)
	return &MDTypeTabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MDTypeTabelClient) UpdateOne(mtt *MDTypeTabel) *MDTypeTabelUpdateOne {
	mutation := newMDTypeTabelMutation(c.config, OpUpdateOne, withMDTypeTabel(mtt))
	return &MDTypeTabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MDTypeTabelClient) UpdateOneID(id string) *MDTypeTabelUpdateOne {
	mutation := newMDTypeTabelMutation(c.config, OpUpdateOne, withMDTypeTabelID(id))
	return &MDTypeTabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MDTypeTabel.
func (c *MDTypeTabelClient) Delete() *MDTypeTabelDelete {
	mutation := newMDTypeTabelMutation(c.config, OpDelete)
	return &MDTypeTabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MDTypeTabelClient) DeleteOne(mtt *MDTypeTabel) *MDTypeTabelDeleteOne {
	return c.DeleteOneID(mtt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MDTypeTabelClient) DeleteOneID(id string) *MDTypeTabelDeleteOne {
	builder := c.Delete().Where(mdtypetabel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MDTypeTabelDeleteOne{builder}
}

// Query returns a query builder for MDTypeTabel.
func (c *MDTypeTabelClient) Query() *MDTypeTabelQuery {
	return &MDTypeTabelQuery{
		config: c.config,
	}
}

// Get returns a MDTypeTabel entity by its id.
func (c *MDTypeTabelClient) Get(ctx context.Context, id string) (*MDTypeTabel, error) {
	return c.Query().Where(mdtypetabel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MDTypeTabelClient) GetX(ctx context.Context, id string) *MDTypeTabel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChildMdtypetabels queries the child_mdtypetabels edge of a MDTypeTabel.
func (c *MDTypeTabelClient) QueryChildMdtypetabels(mtt *MDTypeTabel) *MDTypeTabelQuery {
	query := &MDTypeTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mtt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtypetabel.Table, mdtypetabel.FieldID, id),
			sqlgraph.To(mdtypetabel.Table, mdtypetabel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdtypetabel.ChildMdtypetabelsTable, mdtypetabel.ChildMdtypetabelsColumn),
		)
		fromV = sqlgraph.Neighbors(mtt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentMdtypetabels queries the parent_mdtypetabels edge of a MDTypeTabel.
func (c *MDTypeTabelClient) QueryParentMdtypetabels(mtt *MDTypeTabel) *MDTypeTabelQuery {
	query := &MDTypeTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mtt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtypetabel.Table, mdtypetabel.FieldID, id),
			sqlgraph.To(mdtypetabel.Table, mdtypetabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdtypetabel.ParentMdtypetabelsTable, mdtypetabel.ParentMdtypetabelsColumn),
		)
		fromV = sqlgraph.Neighbors(mtt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMdtypetabels queries the mdtypetabels edge of a MDTypeTabel.
func (c *MDTypeTabelClient) QueryMdtypetabels(mtt *MDTypeTabel) *MDTabelQuery {
	query := &MDTabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mtt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mdtypetabel.Table, mdtypetabel.FieldID, id),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdtypetabel.MdtypetabelsTable, mdtypetabel.MdtypetabelsColumn),
		)
		fromV = sqlgraph.Neighbors(mtt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MDTypeTabelClient) Hooks() []Hook {
	return c.hooks.MDTypeTabel
}
