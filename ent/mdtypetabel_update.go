// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdtabel"
	"fynegui/ent/mdtypetabel"
	"fynegui/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDTypeTabelUpdate is the builder for updating MDTypeTabel entities.
type MDTypeTabelUpdate struct {
	config
	hooks    []Hook
	mutation *MDTypeTabelMutation
}

// Where appends a list predicates to the MDTypeTabelUpdate builder.
func (mttu *MDTypeTabelUpdate) Where(ps ...predicate.MDTypeTabel) *MDTypeTabelUpdate {
	mttu.mutation.Where(ps...)
	return mttu
}

// SetNameeng sets the "nameeng" field.
func (mttu *MDTypeTabelUpdate) SetNameeng(s string) *MDTypeTabelUpdate {
	mttu.mutation.SetNameeng(s)
	return mttu
}

// SetSynonym sets the "synonym" field.
func (mttu *MDTypeTabelUpdate) SetSynonym(s string) *MDTypeTabelUpdate {
	mttu.mutation.SetSynonym(s)
	return mttu
}

// SetPor sets the "por" field.
func (mttu *MDTypeTabelUpdate) SetPor(s string) *MDTypeTabelUpdate {
	mttu.mutation.SetPor(s)
	return mttu
}

// SetParent sets the "parent" field.
func (mttu *MDTypeTabelUpdate) SetParent(s string) *MDTypeTabelUpdate {
	mttu.mutation.SetParent(s)
	return mttu
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (mttu *MDTypeTabelUpdate) SetNillableParent(s *string) *MDTypeTabelUpdate {
	if s != nil {
		mttu.SetParent(*s)
	}
	return mttu
}

// ClearParent clears the value of the "parent" field.
func (mttu *MDTypeTabelUpdate) ClearParent() *MDTypeTabelUpdate {
	mttu.mutation.ClearParent()
	return mttu
}

// AddChildMdtypetabelIDs adds the "child_mdtypetabels" edge to the MDTypeTabel entity by IDs.
func (mttu *MDTypeTabelUpdate) AddChildMdtypetabelIDs(ids ...string) *MDTypeTabelUpdate {
	mttu.mutation.AddChildMdtypetabelIDs(ids...)
	return mttu
}

// AddChildMdtypetabels adds the "child_mdtypetabels" edges to the MDTypeTabel entity.
func (mttu *MDTypeTabelUpdate) AddChildMdtypetabels(m ...*MDTypeTabel) *MDTypeTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttu.AddChildMdtypetabelIDs(ids...)
}

// SetParentMdtypetabelsID sets the "parent_mdtypetabels" edge to the MDTypeTabel entity by ID.
func (mttu *MDTypeTabelUpdate) SetParentMdtypetabelsID(id string) *MDTypeTabelUpdate {
	mttu.mutation.SetParentMdtypetabelsID(id)
	return mttu
}

// SetNillableParentMdtypetabelsID sets the "parent_mdtypetabels" edge to the MDTypeTabel entity by ID if the given value is not nil.
func (mttu *MDTypeTabelUpdate) SetNillableParentMdtypetabelsID(id *string) *MDTypeTabelUpdate {
	if id != nil {
		mttu = mttu.SetParentMdtypetabelsID(*id)
	}
	return mttu
}

// SetParentMdtypetabels sets the "parent_mdtypetabels" edge to the MDTypeTabel entity.
func (mttu *MDTypeTabelUpdate) SetParentMdtypetabels(m *MDTypeTabel) *MDTypeTabelUpdate {
	return mttu.SetParentMdtypetabelsID(m.ID)
}

// AddMdtypetabelIDs adds the "mdtypetabels" edge to the MDTabel entity by IDs.
func (mttu *MDTypeTabelUpdate) AddMdtypetabelIDs(ids ...string) *MDTypeTabelUpdate {
	mttu.mutation.AddMdtypetabelIDs(ids...)
	return mttu
}

// AddMdtypetabels adds the "mdtypetabels" edges to the MDTabel entity.
func (mttu *MDTypeTabelUpdate) AddMdtypetabels(m ...*MDTabel) *MDTypeTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttu.AddMdtypetabelIDs(ids...)
}

// Mutation returns the MDTypeTabelMutation object of the builder.
func (mttu *MDTypeTabelUpdate) Mutation() *MDTypeTabelMutation {
	return mttu.mutation
}

// ClearChildMdtypetabels clears all "child_mdtypetabels" edges to the MDTypeTabel entity.
func (mttu *MDTypeTabelUpdate) ClearChildMdtypetabels() *MDTypeTabelUpdate {
	mttu.mutation.ClearChildMdtypetabels()
	return mttu
}

// RemoveChildMdtypetabelIDs removes the "child_mdtypetabels" edge to MDTypeTabel entities by IDs.
func (mttu *MDTypeTabelUpdate) RemoveChildMdtypetabelIDs(ids ...string) *MDTypeTabelUpdate {
	mttu.mutation.RemoveChildMdtypetabelIDs(ids...)
	return mttu
}

// RemoveChildMdtypetabels removes "child_mdtypetabels" edges to MDTypeTabel entities.
func (mttu *MDTypeTabelUpdate) RemoveChildMdtypetabels(m ...*MDTypeTabel) *MDTypeTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttu.RemoveChildMdtypetabelIDs(ids...)
}

// ClearParentMdtypetabels clears the "parent_mdtypetabels" edge to the MDTypeTabel entity.
func (mttu *MDTypeTabelUpdate) ClearParentMdtypetabels() *MDTypeTabelUpdate {
	mttu.mutation.ClearParentMdtypetabels()
	return mttu
}

// ClearMdtypetabels clears all "mdtypetabels" edges to the MDTabel entity.
func (mttu *MDTypeTabelUpdate) ClearMdtypetabels() *MDTypeTabelUpdate {
	mttu.mutation.ClearMdtypetabels()
	return mttu
}

// RemoveMdtypetabelIDs removes the "mdtypetabels" edge to MDTabel entities by IDs.
func (mttu *MDTypeTabelUpdate) RemoveMdtypetabelIDs(ids ...string) *MDTypeTabelUpdate {
	mttu.mutation.RemoveMdtypetabelIDs(ids...)
	return mttu
}

// RemoveMdtypetabels removes "mdtypetabels" edges to MDTabel entities.
func (mttu *MDTypeTabelUpdate) RemoveMdtypetabels(m ...*MDTabel) *MDTypeTabelUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttu.RemoveMdtypetabelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mttu *MDTypeTabelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mttu.hooks) == 0 {
		if err = mttu.check(); err != nil {
			return 0, err
		}
		affected, err = mttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDTypeTabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mttu.check(); err != nil {
				return 0, err
			}
			mttu.mutation = mutation
			affected, err = mttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mttu.hooks) - 1; i >= 0; i-- {
			if mttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mttu *MDTypeTabelUpdate) SaveX(ctx context.Context) int {
	affected, err := mttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mttu *MDTypeTabelUpdate) Exec(ctx context.Context) error {
	_, err := mttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mttu *MDTypeTabelUpdate) ExecX(ctx context.Context) {
	if err := mttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mttu *MDTypeTabelUpdate) check() error {
	if v, ok := mttu.mutation.Nameeng(); ok {
		if err := mdtypetabel.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDTypeTabel.nameeng": %w`, err)}
		}
	}
	if v, ok := mttu.mutation.Synonym(); ok {
		if err := mdtypetabel.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDTypeTabel.synonym": %w`, err)}
		}
	}
	return nil
}

func (mttu *MDTypeTabelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdtypetabel.Table,
			Columns: mdtypetabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdtypetabel.FieldID,
			},
		},
	}
	if ps := mttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mttu.mutation.Nameeng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldNameeng,
		})
	}
	if value, ok := mttu.mutation.Synonym(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldSynonym,
		})
	}
	if value, ok := mttu.mutation.Por(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldPor,
		})
	}
	if mttu.mutation.ChildMdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.ChildMdtypetabelsTable,
			Columns: []string{mdtypetabel.ChildMdtypetabelsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttu.mutation.RemovedChildMdtypetabelsIDs(); len(nodes) > 0 && !mttu.mutation.ChildMdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.ChildMdtypetabelsTable,
			Columns: []string{mdtypetabel.ChildMdtypetabelsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttu.mutation.ChildMdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.ChildMdtypetabelsTable,
			Columns: []string{mdtypetabel.ChildMdtypetabelsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mttu.mutation.ParentMdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdtypetabel.ParentMdtypetabelsTable,
			Columns: []string{mdtypetabel.ParentMdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttu.mutation.ParentMdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdtypetabel.ParentMdtypetabelsTable,
			Columns: []string{mdtypetabel.ParentMdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mttu.mutation.MdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.MdtypetabelsTable,
			Columns: []string{mdtypetabel.MdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttu.mutation.RemovedMdtypetabelsIDs(); len(nodes) > 0 && !mttu.mutation.MdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.MdtypetabelsTable,
			Columns: []string{mdtypetabel.MdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttu.mutation.MdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.MdtypetabelsTable,
			Columns: []string{mdtypetabel.MdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdtypetabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MDTypeTabelUpdateOne is the builder for updating a single MDTypeTabel entity.
type MDTypeTabelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MDTypeTabelMutation
}

// SetNameeng sets the "nameeng" field.
func (mttuo *MDTypeTabelUpdateOne) SetNameeng(s string) *MDTypeTabelUpdateOne {
	mttuo.mutation.SetNameeng(s)
	return mttuo
}

// SetSynonym sets the "synonym" field.
func (mttuo *MDTypeTabelUpdateOne) SetSynonym(s string) *MDTypeTabelUpdateOne {
	mttuo.mutation.SetSynonym(s)
	return mttuo
}

// SetPor sets the "por" field.
func (mttuo *MDTypeTabelUpdateOne) SetPor(s string) *MDTypeTabelUpdateOne {
	mttuo.mutation.SetPor(s)
	return mttuo
}

// SetParent sets the "parent" field.
func (mttuo *MDTypeTabelUpdateOne) SetParent(s string) *MDTypeTabelUpdateOne {
	mttuo.mutation.SetParent(s)
	return mttuo
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (mttuo *MDTypeTabelUpdateOne) SetNillableParent(s *string) *MDTypeTabelUpdateOne {
	if s != nil {
		mttuo.SetParent(*s)
	}
	return mttuo
}

// ClearParent clears the value of the "parent" field.
func (mttuo *MDTypeTabelUpdateOne) ClearParent() *MDTypeTabelUpdateOne {
	mttuo.mutation.ClearParent()
	return mttuo
}

// AddChildMdtypetabelIDs adds the "child_mdtypetabels" edge to the MDTypeTabel entity by IDs.
func (mttuo *MDTypeTabelUpdateOne) AddChildMdtypetabelIDs(ids ...string) *MDTypeTabelUpdateOne {
	mttuo.mutation.AddChildMdtypetabelIDs(ids...)
	return mttuo
}

// AddChildMdtypetabels adds the "child_mdtypetabels" edges to the MDTypeTabel entity.
func (mttuo *MDTypeTabelUpdateOne) AddChildMdtypetabels(m ...*MDTypeTabel) *MDTypeTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttuo.AddChildMdtypetabelIDs(ids...)
}

// SetParentMdtypetabelsID sets the "parent_mdtypetabels" edge to the MDTypeTabel entity by ID.
func (mttuo *MDTypeTabelUpdateOne) SetParentMdtypetabelsID(id string) *MDTypeTabelUpdateOne {
	mttuo.mutation.SetParentMdtypetabelsID(id)
	return mttuo
}

// SetNillableParentMdtypetabelsID sets the "parent_mdtypetabels" edge to the MDTypeTabel entity by ID if the given value is not nil.
func (mttuo *MDTypeTabelUpdateOne) SetNillableParentMdtypetabelsID(id *string) *MDTypeTabelUpdateOne {
	if id != nil {
		mttuo = mttuo.SetParentMdtypetabelsID(*id)
	}
	return mttuo
}

// SetParentMdtypetabels sets the "parent_mdtypetabels" edge to the MDTypeTabel entity.
func (mttuo *MDTypeTabelUpdateOne) SetParentMdtypetabels(m *MDTypeTabel) *MDTypeTabelUpdateOne {
	return mttuo.SetParentMdtypetabelsID(m.ID)
}

// AddMdtypetabelIDs adds the "mdtypetabels" edge to the MDTabel entity by IDs.
func (mttuo *MDTypeTabelUpdateOne) AddMdtypetabelIDs(ids ...string) *MDTypeTabelUpdateOne {
	mttuo.mutation.AddMdtypetabelIDs(ids...)
	return mttuo
}

// AddMdtypetabels adds the "mdtypetabels" edges to the MDTabel entity.
func (mttuo *MDTypeTabelUpdateOne) AddMdtypetabels(m ...*MDTabel) *MDTypeTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttuo.AddMdtypetabelIDs(ids...)
}

// Mutation returns the MDTypeTabelMutation object of the builder.
func (mttuo *MDTypeTabelUpdateOne) Mutation() *MDTypeTabelMutation {
	return mttuo.mutation
}

// ClearChildMdtypetabels clears all "child_mdtypetabels" edges to the MDTypeTabel entity.
func (mttuo *MDTypeTabelUpdateOne) ClearChildMdtypetabels() *MDTypeTabelUpdateOne {
	mttuo.mutation.ClearChildMdtypetabels()
	return mttuo
}

// RemoveChildMdtypetabelIDs removes the "child_mdtypetabels" edge to MDTypeTabel entities by IDs.
func (mttuo *MDTypeTabelUpdateOne) RemoveChildMdtypetabelIDs(ids ...string) *MDTypeTabelUpdateOne {
	mttuo.mutation.RemoveChildMdtypetabelIDs(ids...)
	return mttuo
}

// RemoveChildMdtypetabels removes "child_mdtypetabels" edges to MDTypeTabel entities.
func (mttuo *MDTypeTabelUpdateOne) RemoveChildMdtypetabels(m ...*MDTypeTabel) *MDTypeTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttuo.RemoveChildMdtypetabelIDs(ids...)
}

// ClearParentMdtypetabels clears the "parent_mdtypetabels" edge to the MDTypeTabel entity.
func (mttuo *MDTypeTabelUpdateOne) ClearParentMdtypetabels() *MDTypeTabelUpdateOne {
	mttuo.mutation.ClearParentMdtypetabels()
	return mttuo
}

// ClearMdtypetabels clears all "mdtypetabels" edges to the MDTabel entity.
func (mttuo *MDTypeTabelUpdateOne) ClearMdtypetabels() *MDTypeTabelUpdateOne {
	mttuo.mutation.ClearMdtypetabels()
	return mttuo
}

// RemoveMdtypetabelIDs removes the "mdtypetabels" edge to MDTabel entities by IDs.
func (mttuo *MDTypeTabelUpdateOne) RemoveMdtypetabelIDs(ids ...string) *MDTypeTabelUpdateOne {
	mttuo.mutation.RemoveMdtypetabelIDs(ids...)
	return mttuo
}

// RemoveMdtypetabels removes "mdtypetabels" edges to MDTabel entities.
func (mttuo *MDTypeTabelUpdateOne) RemoveMdtypetabels(m ...*MDTabel) *MDTypeTabelUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mttuo.RemoveMdtypetabelIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mttuo *MDTypeTabelUpdateOne) Select(field string, fields ...string) *MDTypeTabelUpdateOne {
	mttuo.fields = append([]string{field}, fields...)
	return mttuo
}

// Save executes the query and returns the updated MDTypeTabel entity.
func (mttuo *MDTypeTabelUpdateOne) Save(ctx context.Context) (*MDTypeTabel, error) {
	var (
		err  error
		node *MDTypeTabel
	)
	if len(mttuo.hooks) == 0 {
		if err = mttuo.check(); err != nil {
			return nil, err
		}
		node, err = mttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDTypeTabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mttuo.check(); err != nil {
				return nil, err
			}
			mttuo.mutation = mutation
			node, err = mttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mttuo.hooks) - 1; i >= 0; i-- {
			if mttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mttuo *MDTypeTabelUpdateOne) SaveX(ctx context.Context) *MDTypeTabel {
	node, err := mttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mttuo *MDTypeTabelUpdateOne) Exec(ctx context.Context) error {
	_, err := mttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mttuo *MDTypeTabelUpdateOne) ExecX(ctx context.Context) {
	if err := mttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mttuo *MDTypeTabelUpdateOne) check() error {
	if v, ok := mttuo.mutation.Nameeng(); ok {
		if err := mdtypetabel.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDTypeTabel.nameeng": %w`, err)}
		}
	}
	if v, ok := mttuo.mutation.Synonym(); ok {
		if err := mdtypetabel.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDTypeTabel.synonym": %w`, err)}
		}
	}
	return nil
}

func (mttuo *MDTypeTabelUpdateOne) sqlSave(ctx context.Context) (_node *MDTypeTabel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdtypetabel.Table,
			Columns: mdtypetabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdtypetabel.FieldID,
			},
		},
	}
	id, ok := mttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MDTypeTabel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mdtypetabel.FieldID)
		for _, f := range fields {
			if !mdtypetabel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mdtypetabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mttuo.mutation.Nameeng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldNameeng,
		})
	}
	if value, ok := mttuo.mutation.Synonym(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldSynonym,
		})
	}
	if value, ok := mttuo.mutation.Por(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtypetabel.FieldPor,
		})
	}
	if mttuo.mutation.ChildMdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.ChildMdtypetabelsTable,
			Columns: []string{mdtypetabel.ChildMdtypetabelsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttuo.mutation.RemovedChildMdtypetabelsIDs(); len(nodes) > 0 && !mttuo.mutation.ChildMdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.ChildMdtypetabelsTable,
			Columns: []string{mdtypetabel.ChildMdtypetabelsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttuo.mutation.ChildMdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.ChildMdtypetabelsTable,
			Columns: []string{mdtypetabel.ChildMdtypetabelsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mttuo.mutation.ParentMdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdtypetabel.ParentMdtypetabelsTable,
			Columns: []string{mdtypetabel.ParentMdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttuo.mutation.ParentMdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdtypetabel.ParentMdtypetabelsTable,
			Columns: []string{mdtypetabel.ParentMdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtypetabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mttuo.mutation.MdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.MdtypetabelsTable,
			Columns: []string{mdtypetabel.MdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttuo.mutation.RemovedMdtypetabelsIDs(); len(nodes) > 0 && !mttuo.mutation.MdtypetabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.MdtypetabelsTable,
			Columns: []string{mdtypetabel.MdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttuo.mutation.MdtypetabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtypetabel.MdtypetabelsTable,
			Columns: []string{mdtypetabel.MdtypetabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MDTypeTabel{config: mttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdtypetabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
