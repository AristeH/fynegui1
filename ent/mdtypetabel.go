// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"fynegui/ent/mdtypetabel"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// MDTypeTabel is the model entity for the MDTypeTabel schema.
type MDTypeTabel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"ссылка,omitempty"`
	// Nameeng holds the value of the "nameeng" field.
	Nameeng string `json:"ИмяАнгл,omitempty"`
	// Synonym holds the value of the "synonym" field.
	Synonym string `json:"ИмяРус,omitempty"`
	// Por holds the value of the "por" field.
	Por string `json:"Порядок,omitempty"`
	// Parent holds the value of the "parent" field.
	Parent string `json:"Родитель,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MDTypeTabelQuery when eager-loading is set.
	Edges MDTypeTabelEdges `json:"edges"`
}

// MDTypeTabelEdges holds the relations/edges for other nodes in the graph.
type MDTypeTabelEdges struct {
	// ChildMdtypetabels holds the value of the child_mdtypetabels edge.
	ChildMdtypetabels []*MDTypeTabel `json:"child_mdtypetabels,omitempty"`
	// ParentMdtypetabels holds the value of the parent_mdtypetabels edge.
	ParentMdtypetabels *MDTypeTabel `json:"родитель,omitempty"`
	// Mdtypetabels holds the value of the mdtypetabels edge.
	Mdtypetabels []*MDTabel `json:"mdtypetabels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChildMdtypetabelsOrErr returns the ChildMdtypetabels value or an error if the edge
// was not loaded in eager-loading.
func (e MDTypeTabelEdges) ChildMdtypetabelsOrErr() ([]*MDTypeTabel, error) {
	if e.loadedTypes[0] {
		return e.ChildMdtypetabels, nil
	}
	return nil, &NotLoadedError{edge: "child_mdtypetabels"}
}

// ParentMdtypetabelsOrErr returns the ParentMdtypetabels value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MDTypeTabelEdges) ParentMdtypetabelsOrErr() (*MDTypeTabel, error) {
	if e.loadedTypes[1] {
		if e.ParentMdtypetabels == nil {
			// The edge parent_mdtypetabels was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mdtypetabel.Label}
		}
		return e.ParentMdtypetabels, nil
	}
	return nil, &NotLoadedError{edge: "parent_mdtypetabels"}
}

// MdtypetabelsOrErr returns the Mdtypetabels value or an error if the edge
// was not loaded in eager-loading.
func (e MDTypeTabelEdges) MdtypetabelsOrErr() ([]*MDTabel, error) {
	if e.loadedTypes[2] {
		return e.Mdtypetabels, nil
	}
	return nil, &NotLoadedError{edge: "mdtypetabels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MDTypeTabel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mdtypetabel.FieldID, mdtypetabel.FieldNameeng, mdtypetabel.FieldSynonym, mdtypetabel.FieldPor, mdtypetabel.FieldParent:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MDTypeTabel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MDTypeTabel fields.
func (mtt *MDTypeTabel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mdtypetabel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mtt.ID = value.String
			}
		case mdtypetabel.FieldNameeng:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nameeng", values[i])
			} else if value.Valid {
				mtt.Nameeng = value.String
			}
		case mdtypetabel.FieldSynonym:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field synonym", values[i])
			} else if value.Valid {
				mtt.Synonym = value.String
			}
		case mdtypetabel.FieldPor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field por", values[i])
			} else if value.Valid {
				mtt.Por = value.String
			}
		case mdtypetabel.FieldParent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent", values[i])
			} else if value.Valid {
				mtt.Parent = value.String
			}
		}
	}
	return nil
}

// QueryChildMdtypetabels queries the "child_mdtypetabels" edge of the MDTypeTabel entity.
func (mtt *MDTypeTabel) QueryChildMdtypetabels() *MDTypeTabelQuery {
	return (&MDTypeTabelClient{config: mtt.config}).QueryChildMdtypetabels(mtt)
}

// QueryParentMdtypetabels queries the "parent_mdtypetabels" edge of the MDTypeTabel entity.
func (mtt *MDTypeTabel) QueryParentMdtypetabels() *MDTypeTabelQuery {
	return (&MDTypeTabelClient{config: mtt.config}).QueryParentMdtypetabels(mtt)
}

// QueryMdtypetabels queries the "mdtypetabels" edge of the MDTypeTabel entity.
func (mtt *MDTypeTabel) QueryMdtypetabels() *MDTabelQuery {
	return (&MDTypeTabelClient{config: mtt.config}).QueryMdtypetabels(mtt)
}

// Update returns a builder for updating this MDTypeTabel.
// Note that you need to call MDTypeTabel.Unwrap() before calling this method if this MDTypeTabel
// was returned from a transaction, and the transaction was committed or rolled back.
func (mtt *MDTypeTabel) Update() *MDTypeTabelUpdateOne {
	return (&MDTypeTabelClient{config: mtt.config}).UpdateOne(mtt)
}

// Unwrap unwraps the MDTypeTabel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mtt *MDTypeTabel) Unwrap() *MDTypeTabel {
	tx, ok := mtt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MDTypeTabel is not a transactional entity")
	}
	mtt.config.driver = tx.drv
	return mtt
}

// String implements the fmt.Stringer.
func (mtt *MDTypeTabel) String() string {
	var builder strings.Builder
	builder.WriteString("MDTypeTabel(")
	builder.WriteString(fmt.Sprintf("id=%v", mtt.ID))
	builder.WriteString(", nameeng=")
	builder.WriteString(mtt.Nameeng)
	builder.WriteString(", synonym=")
	builder.WriteString(mtt.Synonym)
	builder.WriteString(", por=")
	builder.WriteString(mtt.Por)
	builder.WriteString(", parent=")
	builder.WriteString(mtt.Parent)
	builder.WriteByte(')')
	return builder.String()
}

// MDTypeTabels is a parsable slice of MDTypeTabel.
type MDTypeTabels []*MDTypeTabel

func (mtt MDTypeTabels) config(cfg config) {
	for _i := range mtt {
		mtt[_i].config = cfg
	}
}
