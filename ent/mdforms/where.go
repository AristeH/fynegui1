// Code generated by entc, DO NOT EDIT.

package mdforms

import (
	"fynegui/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Idform applies equality check predicate on the "idform" field. It's identical to IdformEQ.
func Idform(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdform), v))
	})
}

// Conteiner applies equality check predicate on the "conteiner" field. It's identical to ConteinerEQ.
func Conteiner(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConteiner), v))
	})
}

// Parent applies equality check predicate on the "parent" field. It's identical to ParentEQ.
func Parent(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParent), v))
	})
}

// IdformEQ applies the EQ predicate on the "idform" field.
func IdformEQ(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdform), v))
	})
}

// IdformNEQ applies the NEQ predicate on the "idform" field.
func IdformNEQ(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdform), v))
	})
}

// IdformIn applies the In predicate on the "idform" field.
func IdformIn(vs ...string) predicate.MDForms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdform), v...))
	})
}

// IdformNotIn applies the NotIn predicate on the "idform" field.
func IdformNotIn(vs ...string) predicate.MDForms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdform), v...))
	})
}

// IdformGT applies the GT predicate on the "idform" field.
func IdformGT(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdform), v))
	})
}

// IdformGTE applies the GTE predicate on the "idform" field.
func IdformGTE(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdform), v))
	})
}

// IdformLT applies the LT predicate on the "idform" field.
func IdformLT(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdform), v))
	})
}

// IdformLTE applies the LTE predicate on the "idform" field.
func IdformLTE(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdform), v))
	})
}

// IdformContains applies the Contains predicate on the "idform" field.
func IdformContains(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdform), v))
	})
}

// IdformHasPrefix applies the HasPrefix predicate on the "idform" field.
func IdformHasPrefix(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdform), v))
	})
}

// IdformHasSuffix applies the HasSuffix predicate on the "idform" field.
func IdformHasSuffix(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdform), v))
	})
}

// IdformEqualFold applies the EqualFold predicate on the "idform" field.
func IdformEqualFold(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdform), v))
	})
}

// IdformContainsFold applies the ContainsFold predicate on the "idform" field.
func IdformContainsFold(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdform), v))
	})
}

// ConteinerEQ applies the EQ predicate on the "conteiner" field.
func ConteinerEQ(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConteiner), v))
	})
}

// ConteinerNEQ applies the NEQ predicate on the "conteiner" field.
func ConteinerNEQ(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConteiner), v))
	})
}

// ConteinerIn applies the In predicate on the "conteiner" field.
func ConteinerIn(vs ...string) predicate.MDForms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConteiner), v...))
	})
}

// ConteinerNotIn applies the NotIn predicate on the "conteiner" field.
func ConteinerNotIn(vs ...string) predicate.MDForms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConteiner), v...))
	})
}

// ConteinerGT applies the GT predicate on the "conteiner" field.
func ConteinerGT(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConteiner), v))
	})
}

// ConteinerGTE applies the GTE predicate on the "conteiner" field.
func ConteinerGTE(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConteiner), v))
	})
}

// ConteinerLT applies the LT predicate on the "conteiner" field.
func ConteinerLT(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConteiner), v))
	})
}

// ConteinerLTE applies the LTE predicate on the "conteiner" field.
func ConteinerLTE(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConteiner), v))
	})
}

// ConteinerContains applies the Contains predicate on the "conteiner" field.
func ConteinerContains(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConteiner), v))
	})
}

// ConteinerHasPrefix applies the HasPrefix predicate on the "conteiner" field.
func ConteinerHasPrefix(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConteiner), v))
	})
}

// ConteinerHasSuffix applies the HasSuffix predicate on the "conteiner" field.
func ConteinerHasSuffix(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConteiner), v))
	})
}

// ConteinerEqualFold applies the EqualFold predicate on the "conteiner" field.
func ConteinerEqualFold(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConteiner), v))
	})
}

// ConteinerContainsFold applies the ContainsFold predicate on the "conteiner" field.
func ConteinerContainsFold(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConteiner), v))
	})
}

// ParentEQ applies the EQ predicate on the "parent" field.
func ParentEQ(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParent), v))
	})
}

// ParentNEQ applies the NEQ predicate on the "parent" field.
func ParentNEQ(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParent), v))
	})
}

// ParentIn applies the In predicate on the "parent" field.
func ParentIn(vs ...string) predicate.MDForms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParent), v...))
	})
}

// ParentNotIn applies the NotIn predicate on the "parent" field.
func ParentNotIn(vs ...string) predicate.MDForms {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MDForms(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParent), v...))
	})
}

// ParentGT applies the GT predicate on the "parent" field.
func ParentGT(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParent), v))
	})
}

// ParentGTE applies the GTE predicate on the "parent" field.
func ParentGTE(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParent), v))
	})
}

// ParentLT applies the LT predicate on the "parent" field.
func ParentLT(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParent), v))
	})
}

// ParentLTE applies the LTE predicate on the "parent" field.
func ParentLTE(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParent), v))
	})
}

// ParentContains applies the Contains predicate on the "parent" field.
func ParentContains(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParent), v))
	})
}

// ParentHasPrefix applies the HasPrefix predicate on the "parent" field.
func ParentHasPrefix(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParent), v))
	})
}

// ParentHasSuffix applies the HasSuffix predicate on the "parent" field.
func ParentHasSuffix(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParent), v))
	})
}

// ParentIsNil applies the IsNil predicate on the "parent" field.
func ParentIsNil() predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParent)))
	})
}

// ParentNotNil applies the NotNil predicate on the "parent" field.
func ParentNotNil() predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParent)))
	})
}

// ParentEqualFold applies the EqualFold predicate on the "parent" field.
func ParentEqualFold(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParent), v))
	})
}

// ParentContainsFold applies the ContainsFold predicate on the "parent" field.
func ParentContainsFold(v string) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParent), v))
	})
}

// HasChildMdforms applies the HasEdge predicate on the "child_mdforms" edge.
func HasChildMdforms() predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildMdformsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildMdformsTable, ChildMdformsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildMdformsWith applies the HasEdge predicate on the "child_mdforms" edge with a given conditions (other predicates).
func HasChildMdformsWith(preds ...predicate.MDForms) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildMdformsTable, ChildMdformsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentMdforms applies the HasEdge predicate on the "parent_mdforms" edge.
func HasParentMdforms() predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentMdformsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentMdformsTable, ParentMdformsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentMdformsWith applies the HasEdge predicate on the "parent_mdforms" edge with a given conditions (other predicates).
func HasParentMdformsWith(preds ...predicate.MDForms) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentMdformsTable, ParentMdformsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MDForms) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MDForms) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MDForms) predicate.MDForms {
	return predicate.MDForms(func(s *sql.Selector) {
		p(s.Not())
	})
}
