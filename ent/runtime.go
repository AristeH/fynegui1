// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fynegui/ent/mdrekvizit"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"
	"fynegui/ent/mdtypetabel"
	"fynegui/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	mdrekvizitFields := schema.MDRekvizit{}.Fields()
	_ = mdrekvizitFields
	// mdrekvizitDescNameeng is the schema descriptor for nameeng field.
	mdrekvizitDescNameeng := mdrekvizitFields[1].Descriptor()
	// mdrekvizit.NameengValidator is a validator for the "nameeng" field. It is called by the builders before save.
	mdrekvizit.NameengValidator = mdrekvizitDescNameeng.Validators[0].(func(string) error)
	// mdrekvizitDescSynonym is the schema descriptor for synonym field.
	mdrekvizitDescSynonym := mdrekvizitFields[2].Descriptor()
	// mdrekvizit.SynonymValidator is a validator for the "synonym" field. It is called by the builders before save.
	mdrekvizit.SynonymValidator = mdrekvizitDescSynonym.Validators[0].(func(string) error)
	// mdrekvizitDescPor is the schema descriptor for por field.
	mdrekvizitDescPor := mdrekvizitFields[3].Descriptor()
	// mdrekvizit.PorValidator is a validator for the "por" field. It is called by the builders before save.
	mdrekvizit.PorValidator = mdrekvizitDescPor.Validators[0].(func(string) error)
	// mdrekvizitDescType is the schema descriptor for type field.
	mdrekvizitDescType := mdrekvizitFields[4].Descriptor()
	// mdrekvizit.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	mdrekvizit.TypeValidator = mdrekvizitDescType.Validators[0].(func(string) error)
	// mdrekvizitDescOwnerID is the schema descriptor for owner_id field.
	mdrekvizitDescOwnerID := mdrekvizitFields[5].Descriptor()
	// mdrekvizit.OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	mdrekvizit.OwnerIDValidator = func() func(string) error {
		validators := mdrekvizitDescOwnerID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(owner string) error {
			for _, fn := range fns {
				if err := fn(owner); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// mdrekvizitDescID is the schema descriptor for id field.
	mdrekvizitDescID := mdrekvizitFields[0].Descriptor()
	// mdrekvizit.IDValidator is a validator for the "id" field. It is called by the builders before save.
	mdrekvizit.IDValidator = func() func(string) error {
		validators := mdrekvizitDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	mdsubsystemsFields := schema.MDSubSystems{}.Fields()
	_ = mdsubsystemsFields
	// mdsubsystemsDescNameeng is the schema descriptor for nameeng field.
	mdsubsystemsDescNameeng := mdsubsystemsFields[1].Descriptor()
	// mdsubsystems.NameengValidator is a validator for the "nameeng" field. It is called by the builders before save.
	mdsubsystems.NameengValidator = mdsubsystemsDescNameeng.Validators[0].(func(string) error)
	// mdsubsystemsDescSynonym is the schema descriptor for synonym field.
	mdsubsystemsDescSynonym := mdsubsystemsFields[2].Descriptor()
	// mdsubsystems.SynonymValidator is a validator for the "synonym" field. It is called by the builders before save.
	mdsubsystems.SynonymValidator = mdsubsystemsDescSynonym.Validators[0].(func(string) error)
	// mdsubsystemsDescID is the schema descriptor for id field.
	mdsubsystemsDescID := mdsubsystemsFields[0].Descriptor()
	// mdsubsystems.IDValidator is a validator for the "id" field. It is called by the builders before save.
	mdsubsystems.IDValidator = func() func(string) error {
		validators := mdsubsystemsDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	mdtabelFields := schema.MDTabel{}.Fields()
	_ = mdtabelFields
	// mdtabelDescNameeng is the schema descriptor for nameeng field.
	mdtabelDescNameeng := mdtabelFields[1].Descriptor()
	// mdtabel.NameengValidator is a validator for the "nameeng" field. It is called by the builders before save.
	mdtabel.NameengValidator = mdtabelDescNameeng.Validators[0].(func(string) error)
	// mdtabelDescSynonym is the schema descriptor for synonym field.
	mdtabelDescSynonym := mdtabelFields[2].Descriptor()
	// mdtabel.SynonymValidator is a validator for the "synonym" field. It is called by the builders before save.
	mdtabel.SynonymValidator = mdtabelDescSynonym.Validators[0].(func(string) error)
	// mdtabelDescTypesID is the schema descriptor for types_id field.
	mdtabelDescTypesID := mdtabelFields[5].Descriptor()
	// mdtabel.TypesIDValidator is a validator for the "types_id" field. It is called by the builders before save.
	mdtabel.TypesIDValidator = mdtabelDescTypesID.Validators[0].(func(string) error)
	// mdtabelDescFile is the schema descriptor for file field.
	mdtabelDescFile := mdtabelFields[6].Descriptor()
	// mdtabel.FileValidator is a validator for the "file" field. It is called by the builders before save.
	mdtabel.FileValidator = mdtabelDescFile.Validators[0].(func(string) error)
	// mdtabelDescID is the schema descriptor for id field.
	mdtabelDescID := mdtabelFields[0].Descriptor()
	// mdtabel.IDValidator is a validator for the "id" field. It is called by the builders before save.
	mdtabel.IDValidator = func() func(string) error {
		validators := mdtabelDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	mdtypetabelFields := schema.MDTypeTabel{}.Fields()
	_ = mdtypetabelFields
	// mdtypetabelDescNameeng is the schema descriptor for nameeng field.
	mdtypetabelDescNameeng := mdtypetabelFields[1].Descriptor()
	// mdtypetabel.NameengValidator is a validator for the "nameeng" field. It is called by the builders before save.
	mdtypetabel.NameengValidator = mdtypetabelDescNameeng.Validators[0].(func(string) error)
	// mdtypetabelDescSynonym is the schema descriptor for synonym field.
	mdtypetabelDescSynonym := mdtypetabelFields[2].Descriptor()
	// mdtypetabel.SynonymValidator is a validator for the "synonym" field. It is called by the builders before save.
	mdtypetabel.SynonymValidator = mdtypetabelDescSynonym.Validators[0].(func(string) error)
	// mdtypetabelDescID is the schema descriptor for id field.
	mdtypetabelDescID := mdtypetabelFields[0].Descriptor()
	// mdtypetabel.IDValidator is a validator for the "id" field. It is called by the builders before save.
	mdtypetabel.IDValidator = func() func(string) error {
		validators := mdtypetabelDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
