// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdrekvizit"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDTabelCreate is the builder for creating a MDTabel entity.
type MDTabelCreate struct {
	config
	mutation *MDTabelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamerus sets the "namerus" field.
func (mtc *MDTabelCreate) SetNamerus(s string) *MDTabelCreate {
	mtc.mutation.SetNamerus(s)
	return mtc
}

// SetNameeng sets the "nameeng" field.
func (mtc *MDTabelCreate) SetNameeng(s string) *MDTabelCreate {
	mtc.mutation.SetNameeng(s)
	return mtc
}

// SetSynonym sets the "synonym" field.
func (mtc *MDTabelCreate) SetSynonym(s string) *MDTabelCreate {
	mtc.mutation.SetSynonym(s)
	return mtc
}

// SetFile sets the "file" field.
func (mtc *MDTabelCreate) SetFile(s string) *MDTabelCreate {
	mtc.mutation.SetFile(s)
	return mtc
}

// SetType sets the "type" field.
func (mtc *MDTabelCreate) SetType(s string) *MDTabelCreate {
	mtc.mutation.SetType(s)
	return mtc
}

// SetID sets the "id" field.
func (mtc *MDTabelCreate) SetID(s string) *MDTabelCreate {
	mtc.mutation.SetID(s)
	return mtc
}

// AddMdsubsystemIDs adds the "mdsubsystems" edge to the MDSubSystems entity by IDs.
func (mtc *MDTabelCreate) AddMdsubsystemIDs(ids ...string) *MDTabelCreate {
	mtc.mutation.AddMdsubsystemIDs(ids...)
	return mtc
}

// AddMdsubsystems adds the "mdsubsystems" edges to the MDSubSystems entity.
func (mtc *MDTabelCreate) AddMdsubsystems(m ...*MDSubSystems) *MDTabelCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtc.AddMdsubsystemIDs(ids...)
}

// AddMdrekvizitIDs adds the "mdrekvizits" edge to the MDRekvizit entity by IDs.
func (mtc *MDTabelCreate) AddMdrekvizitIDs(ids ...string) *MDTabelCreate {
	mtc.mutation.AddMdrekvizitIDs(ids...)
	return mtc
}

// AddMdrekvizits adds the "mdrekvizits" edges to the MDRekvizit entity.
func (mtc *MDTabelCreate) AddMdrekvizits(m ...*MDRekvizit) *MDTabelCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtc.AddMdrekvizitIDs(ids...)
}

// Mutation returns the MDTabelMutation object of the builder.
func (mtc *MDTabelCreate) Mutation() *MDTabelMutation {
	return mtc.mutation
}

// Save creates the MDTabel in the database.
func (mtc *MDTabelCreate) Save(ctx context.Context) (*MDTabel, error) {
	var (
		err  error
		node *MDTabel
	)
	if len(mtc.hooks) == 0 {
		if err = mtc.check(); err != nil {
			return nil, err
		}
		node, err = mtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDTabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtc.check(); err != nil {
				return nil, err
			}
			mtc.mutation = mutation
			if node, err = mtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mtc.hooks) - 1; i >= 0; i-- {
			if mtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MDTabelCreate) SaveX(ctx context.Context) *MDTabel {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MDTabelCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MDTabelCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MDTabelCreate) check() error {
	if _, ok := mtc.mutation.Namerus(); !ok {
		return &ValidationError{Name: "namerus", err: errors.New(`ent: missing required field "MDTabel.namerus"`)}
	}
	if v, ok := mtc.mutation.Namerus(); ok {
		if err := mdtabel.NamerusValidator(v); err != nil {
			return &ValidationError{Name: "namerus", err: fmt.Errorf(`ent: validator failed for field "MDTabel.namerus": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.Nameeng(); !ok {
		return &ValidationError{Name: "nameeng", err: errors.New(`ent: missing required field "MDTabel.nameeng"`)}
	}
	if v, ok := mtc.mutation.Nameeng(); ok {
		if err := mdtabel.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDTabel.nameeng": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.Synonym(); !ok {
		return &ValidationError{Name: "synonym", err: errors.New(`ent: missing required field "MDTabel.synonym"`)}
	}
	if v, ok := mtc.mutation.Synonym(); ok {
		if err := mdtabel.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDTabel.synonym": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.File(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required field "MDTabel.file"`)}
	}
	if v, ok := mtc.mutation.File(); ok {
		if err := mdtabel.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "MDTabel.file": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "MDTabel.type"`)}
	}
	if v, ok := mtc.mutation.GetType(); ok {
		if err := mdtabel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MDTabel.type": %w`, err)}
		}
	}
	if v, ok := mtc.mutation.ID(); ok {
		if err := mdtabel.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MDTabel.id": %w`, err)}
		}
	}
	return nil
}

func (mtc *MDTabelCreate) sqlSave(ctx context.Context) (*MDTabel, error) {
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MDTabel.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (mtc *MDTabelCreate) createSpec() (*MDTabel, *sqlgraph.CreateSpec) {
	var (
		_node = &MDTabel{config: mtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mdtabel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdtabel.FieldID,
			},
		}
	)
	_spec.OnConflict = mtc.conflict
	if id, ok := mtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mtc.mutation.Namerus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldNamerus,
		})
		_node.Namerus = value
	}
	if value, ok := mtc.mutation.Nameeng(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldNameeng,
		})
		_node.Nameeng = value
	}
	if value, ok := mtc.mutation.Synonym(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldSynonym,
		})
		_node.Synonym = value
	}
	if value, ok := mtc.mutation.File(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldFile,
		})
		_node.File = value
	}
	if value, ok := mtc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdtabel.FieldType,
		})
		_node.Type = value
	}
	if nodes := mtc.mutation.MdsubsystemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mdtabel.MdsubsystemsTable,
			Columns: mdtabel.MdsubsystemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdsubsystems.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mtc.mutation.MdrekvizitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mdtabel.MdrekvizitsTable,
			Columns: []string{mdtabel.MdrekvizitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdrekvizit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDTabel.Create().
//		SetNamerus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDTabelUpsert) {
//			SetNamerus(v+v).
//		}).
//		Exec(ctx)
//
func (mtc *MDTabelCreate) OnConflict(opts ...sql.ConflictOption) *MDTabelUpsertOne {
	mtc.conflict = opts
	return &MDTabelUpsertOne{
		create: mtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDTabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mtc *MDTabelCreate) OnConflictColumns(columns ...string) *MDTabelUpsertOne {
	mtc.conflict = append(mtc.conflict, sql.ConflictColumns(columns...))
	return &MDTabelUpsertOne{
		create: mtc,
	}
}

type (
	// MDTabelUpsertOne is the builder for "upsert"-ing
	//  one MDTabel node.
	MDTabelUpsertOne struct {
		create *MDTabelCreate
	}

	// MDTabelUpsert is the "OnConflict" setter.
	MDTabelUpsert struct {
		*sql.UpdateSet
	}
)

// SetNamerus sets the "namerus" field.
func (u *MDTabelUpsert) SetNamerus(v string) *MDTabelUpsert {
	u.Set(mdtabel.FieldNamerus, v)
	return u
}

// UpdateNamerus sets the "namerus" field to the value that was provided on create.
func (u *MDTabelUpsert) UpdateNamerus() *MDTabelUpsert {
	u.SetExcluded(mdtabel.FieldNamerus)
	return u
}

// SetNameeng sets the "nameeng" field.
func (u *MDTabelUpsert) SetNameeng(v string) *MDTabelUpsert {
	u.Set(mdtabel.FieldNameeng, v)
	return u
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDTabelUpsert) UpdateNameeng() *MDTabelUpsert {
	u.SetExcluded(mdtabel.FieldNameeng)
	return u
}

// SetSynonym sets the "synonym" field.
func (u *MDTabelUpsert) SetSynonym(v string) *MDTabelUpsert {
	u.Set(mdtabel.FieldSynonym, v)
	return u
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDTabelUpsert) UpdateSynonym() *MDTabelUpsert {
	u.SetExcluded(mdtabel.FieldSynonym)
	return u
}

// SetFile sets the "file" field.
func (u *MDTabelUpsert) SetFile(v string) *MDTabelUpsert {
	u.Set(mdtabel.FieldFile, v)
	return u
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *MDTabelUpsert) UpdateFile() *MDTabelUpsert {
	u.SetExcluded(mdtabel.FieldFile)
	return u
}

// SetType sets the "type" field.
func (u *MDTabelUpsert) SetType(v string) *MDTabelUpsert {
	u.Set(mdtabel.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MDTabelUpsert) UpdateType() *MDTabelUpsert {
	u.SetExcluded(mdtabel.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MDTabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdtabel.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDTabelUpsertOne) UpdateNewValues() *MDTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mdtabel.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MDTabel.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MDTabelUpsertOne) Ignore() *MDTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDTabelUpsertOne) DoNothing() *MDTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDTabelCreate.OnConflict
// documentation for more info.
func (u *MDTabelUpsertOne) Update(set func(*MDTabelUpsert)) *MDTabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDTabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNamerus sets the "namerus" field.
func (u *MDTabelUpsertOne) SetNamerus(v string) *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetNamerus(v)
	})
}

// UpdateNamerus sets the "namerus" field to the value that was provided on create.
func (u *MDTabelUpsertOne) UpdateNamerus() *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateNamerus()
	})
}

// SetNameeng sets the "nameeng" field.
func (u *MDTabelUpsertOne) SetNameeng(v string) *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetNameeng(v)
	})
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDTabelUpsertOne) UpdateNameeng() *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateNameeng()
	})
}

// SetSynonym sets the "synonym" field.
func (u *MDTabelUpsertOne) SetSynonym(v string) *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetSynonym(v)
	})
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDTabelUpsertOne) UpdateSynonym() *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateSynonym()
	})
}

// SetFile sets the "file" field.
func (u *MDTabelUpsertOne) SetFile(v string) *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *MDTabelUpsertOne) UpdateFile() *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateFile()
	})
}

// SetType sets the "type" field.
func (u *MDTabelUpsertOne) SetType(v string) *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MDTabelUpsertOne) UpdateType() *MDTabelUpsertOne {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *MDTabelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDTabelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDTabelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MDTabelUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MDTabelUpsertOne.ID is not supported by MySQL driver. Use MDTabelUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MDTabelUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MDTabelCreateBulk is the builder for creating many MDTabel entities in bulk.
type MDTabelCreateBulk struct {
	config
	builders []*MDTabelCreate
	conflict []sql.ConflictOption
}

// Save creates the MDTabel entities in the database.
func (mtcb *MDTabelCreateBulk) Save(ctx context.Context) ([]*MDTabel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MDTabel, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MDTabelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MDTabelCreateBulk) SaveX(ctx context.Context) []*MDTabel {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MDTabelCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MDTabelCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MDTabel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MDTabelUpsert) {
//			SetNamerus(v+v).
//		}).
//		Exec(ctx)
//
func (mtcb *MDTabelCreateBulk) OnConflict(opts ...sql.ConflictOption) *MDTabelUpsertBulk {
	mtcb.conflict = opts
	return &MDTabelUpsertBulk{
		create: mtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MDTabel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mtcb *MDTabelCreateBulk) OnConflictColumns(columns ...string) *MDTabelUpsertBulk {
	mtcb.conflict = append(mtcb.conflict, sql.ConflictColumns(columns...))
	return &MDTabelUpsertBulk{
		create: mtcb,
	}
}

// MDTabelUpsertBulk is the builder for "upsert"-ing
// a bulk of MDTabel nodes.
type MDTabelUpsertBulk struct {
	create *MDTabelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MDTabel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mdtabel.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MDTabelUpsertBulk) UpdateNewValues() *MDTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mdtabel.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MDTabel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MDTabelUpsertBulk) Ignore() *MDTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MDTabelUpsertBulk) DoNothing() *MDTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MDTabelCreateBulk.OnConflict
// documentation for more info.
func (u *MDTabelUpsertBulk) Update(set func(*MDTabelUpsert)) *MDTabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MDTabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetNamerus sets the "namerus" field.
func (u *MDTabelUpsertBulk) SetNamerus(v string) *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetNamerus(v)
	})
}

// UpdateNamerus sets the "namerus" field to the value that was provided on create.
func (u *MDTabelUpsertBulk) UpdateNamerus() *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateNamerus()
	})
}

// SetNameeng sets the "nameeng" field.
func (u *MDTabelUpsertBulk) SetNameeng(v string) *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetNameeng(v)
	})
}

// UpdateNameeng sets the "nameeng" field to the value that was provided on create.
func (u *MDTabelUpsertBulk) UpdateNameeng() *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateNameeng()
	})
}

// SetSynonym sets the "synonym" field.
func (u *MDTabelUpsertBulk) SetSynonym(v string) *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetSynonym(v)
	})
}

// UpdateSynonym sets the "synonym" field to the value that was provided on create.
func (u *MDTabelUpsertBulk) UpdateSynonym() *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateSynonym()
	})
}

// SetFile sets the "file" field.
func (u *MDTabelUpsertBulk) SetFile(v string) *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *MDTabelUpsertBulk) UpdateFile() *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateFile()
	})
}

// SetType sets the "type" field.
func (u *MDTabelUpsertBulk) SetType(v string) *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MDTabelUpsertBulk) UpdateType() *MDTabelUpsertBulk {
	return u.Update(func(s *MDTabelUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *MDTabelUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MDTabelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MDTabelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MDTabelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
