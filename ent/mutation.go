// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdrekvizit"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"
	"fynegui/ent/predicate"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMDRekvizit   = "MDRekvizit"
	TypeMDSubSystems = "MDSubSystems"
	TypeMDTabel      = "MDTabel"
)

// MDRekvizitMutation represents an operation that mutates the MDRekvizit nodes in the graph.
type MDRekvizitMutation struct {
	config
	op             Op
	typ            string
	id             *string
	namerus        *string
	nameeng        *string
	synonym        *string
	por            *string
	widthElem      *float64
	addwidthElem   *float64
	widthSpisok    *float64
	addwidthSpisok *float64
	_type          *string
	clearedFields  map[string]struct{}
	owner          *string
	clearedowner   bool
	done           bool
	oldValue       func(context.Context) (*MDRekvizit, error)
	predicates     []predicate.MDRekvizit
}

var _ ent.Mutation = (*MDRekvizitMutation)(nil)

// mdrekvizitOption allows management of the mutation configuration using functional options.
type mdrekvizitOption func(*MDRekvizitMutation)

// newMDRekvizitMutation creates new mutation for the MDRekvizit entity.
func newMDRekvizitMutation(c config, op Op, opts ...mdrekvizitOption) *MDRekvizitMutation {
	m := &MDRekvizitMutation{
		config:        c,
		op:            op,
		typ:           TypeMDRekvizit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMDRekvizitID sets the ID field of the mutation.
func withMDRekvizitID(id string) mdrekvizitOption {
	return func(m *MDRekvizitMutation) {
		var (
			err   error
			once  sync.Once
			value *MDRekvizit
		)
		m.oldValue = func(ctx context.Context) (*MDRekvizit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MDRekvizit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMDRekvizit sets the old MDRekvizit of the mutation.
func withMDRekvizit(node *MDRekvizit) mdrekvizitOption {
	return func(m *MDRekvizitMutation) {
		m.oldValue = func(context.Context) (*MDRekvizit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MDRekvizitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MDRekvizitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MDRekvizit entities.
func (m *MDRekvizitMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MDRekvizitMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MDRekvizitMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MDRekvizit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNamerus sets the "namerus" field.
func (m *MDRekvizitMutation) SetNamerus(s string) {
	m.namerus = &s
}

// Namerus returns the value of the "namerus" field in the mutation.
func (m *MDRekvizitMutation) Namerus() (r string, exists bool) {
	v := m.namerus
	if v == nil {
		return
	}
	return *v, true
}

// OldNamerus returns the old "namerus" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldNamerus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamerus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamerus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamerus: %w", err)
	}
	return oldValue.Namerus, nil
}

// ResetNamerus resets all changes to the "namerus" field.
func (m *MDRekvizitMutation) ResetNamerus() {
	m.namerus = nil
}

// SetNameeng sets the "nameeng" field.
func (m *MDRekvizitMutation) SetNameeng(s string) {
	m.nameeng = &s
}

// Nameeng returns the value of the "nameeng" field in the mutation.
func (m *MDRekvizitMutation) Nameeng() (r string, exists bool) {
	v := m.nameeng
	if v == nil {
		return
	}
	return *v, true
}

// OldNameeng returns the old "nameeng" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldNameeng(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameeng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameeng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameeng: %w", err)
	}
	return oldValue.Nameeng, nil
}

// ResetNameeng resets all changes to the "nameeng" field.
func (m *MDRekvizitMutation) ResetNameeng() {
	m.nameeng = nil
}

// SetSynonym sets the "synonym" field.
func (m *MDRekvizitMutation) SetSynonym(s string) {
	m.synonym = &s
}

// Synonym returns the value of the "synonym" field in the mutation.
func (m *MDRekvizitMutation) Synonym() (r string, exists bool) {
	v := m.synonym
	if v == nil {
		return
	}
	return *v, true
}

// OldSynonym returns the old "synonym" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldSynonym(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSynonym is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSynonym requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSynonym: %w", err)
	}
	return oldValue.Synonym, nil
}

// ResetSynonym resets all changes to the "synonym" field.
func (m *MDRekvizitMutation) ResetSynonym() {
	m.synonym = nil
}

// SetPor sets the "por" field.
func (m *MDRekvizitMutation) SetPor(s string) {
	m.por = &s
}

// Por returns the value of the "por" field in the mutation.
func (m *MDRekvizitMutation) Por() (r string, exists bool) {
	v := m.por
	if v == nil {
		return
	}
	return *v, true
}

// OldPor returns the old "por" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldPor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPor: %w", err)
	}
	return oldValue.Por, nil
}

// ResetPor resets all changes to the "por" field.
func (m *MDRekvizitMutation) ResetPor() {
	m.por = nil
}

// SetWidthElem sets the "widthElem" field.
func (m *MDRekvizitMutation) SetWidthElem(f float64) {
	m.widthElem = &f
	m.addwidthElem = nil
}

// WidthElem returns the value of the "widthElem" field in the mutation.
func (m *MDRekvizitMutation) WidthElem() (r float64, exists bool) {
	v := m.widthElem
	if v == nil {
		return
	}
	return *v, true
}

// OldWidthElem returns the old "widthElem" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldWidthElem(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidthElem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidthElem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidthElem: %w", err)
	}
	return oldValue.WidthElem, nil
}

// AddWidthElem adds f to the "widthElem" field.
func (m *MDRekvizitMutation) AddWidthElem(f float64) {
	if m.addwidthElem != nil {
		*m.addwidthElem += f
	} else {
		m.addwidthElem = &f
	}
}

// AddedWidthElem returns the value that was added to the "widthElem" field in this mutation.
func (m *MDRekvizitMutation) AddedWidthElem() (r float64, exists bool) {
	v := m.addwidthElem
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidthElem resets all changes to the "widthElem" field.
func (m *MDRekvizitMutation) ResetWidthElem() {
	m.widthElem = nil
	m.addwidthElem = nil
}

// SetWidthSpisok sets the "widthSpisok" field.
func (m *MDRekvizitMutation) SetWidthSpisok(f float64) {
	m.widthSpisok = &f
	m.addwidthSpisok = nil
}

// WidthSpisok returns the value of the "widthSpisok" field in the mutation.
func (m *MDRekvizitMutation) WidthSpisok() (r float64, exists bool) {
	v := m.widthSpisok
	if v == nil {
		return
	}
	return *v, true
}

// OldWidthSpisok returns the old "widthSpisok" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldWidthSpisok(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidthSpisok is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidthSpisok requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidthSpisok: %w", err)
	}
	return oldValue.WidthSpisok, nil
}

// AddWidthSpisok adds f to the "widthSpisok" field.
func (m *MDRekvizitMutation) AddWidthSpisok(f float64) {
	if m.addwidthSpisok != nil {
		*m.addwidthSpisok += f
	} else {
		m.addwidthSpisok = &f
	}
}

// AddedWidthSpisok returns the value that was added to the "widthSpisok" field in this mutation.
func (m *MDRekvizitMutation) AddedWidthSpisok() (r float64, exists bool) {
	v := m.addwidthSpisok
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidthSpisok resets all changes to the "widthSpisok" field.
func (m *MDRekvizitMutation) ResetWidthSpisok() {
	m.widthSpisok = nil
	m.addwidthSpisok = nil
}

// SetType sets the "type" field.
func (m *MDRekvizitMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *MDRekvizitMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MDRekvizitMutation) ResetType() {
	m._type = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *MDRekvizitMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *MDRekvizitMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the MDRekvizit entity.
// If the MDRekvizit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDRekvizitMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ClearOwnerID clears the value of the "owner_id" field.
func (m *MDRekvizitMutation) ClearOwnerID() {
	m.owner = nil
	m.clearedFields[mdrekvizit.FieldOwnerID] = struct{}{}
}

// OwnerIDCleared returns if the "owner_id" field was cleared in this mutation.
func (m *MDRekvizitMutation) OwnerIDCleared() bool {
	_, ok := m.clearedFields[mdrekvizit.FieldOwnerID]
	return ok
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *MDRekvizitMutation) ResetOwnerID() {
	m.owner = nil
	delete(m.clearedFields, mdrekvizit.FieldOwnerID)
}

// ClearOwner clears the "owner" edge to the MDTabel entity.
func (m *MDRekvizitMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the MDTabel entity was cleared.
func (m *MDRekvizitMutation) OwnerCleared() bool {
	return m.OwnerIDCleared() || m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *MDRekvizitMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *MDRekvizitMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the MDRekvizitMutation builder.
func (m *MDRekvizitMutation) Where(ps ...predicate.MDRekvizit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MDRekvizitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MDRekvizit).
func (m *MDRekvizitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MDRekvizitMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.namerus != nil {
		fields = append(fields, mdrekvizit.FieldNamerus)
	}
	if m.nameeng != nil {
		fields = append(fields, mdrekvizit.FieldNameeng)
	}
	if m.synonym != nil {
		fields = append(fields, mdrekvizit.FieldSynonym)
	}
	if m.por != nil {
		fields = append(fields, mdrekvizit.FieldPor)
	}
	if m.widthElem != nil {
		fields = append(fields, mdrekvizit.FieldWidthElem)
	}
	if m.widthSpisok != nil {
		fields = append(fields, mdrekvizit.FieldWidthSpisok)
	}
	if m._type != nil {
		fields = append(fields, mdrekvizit.FieldType)
	}
	if m.owner != nil {
		fields = append(fields, mdrekvizit.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MDRekvizitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mdrekvizit.FieldNamerus:
		return m.Namerus()
	case mdrekvizit.FieldNameeng:
		return m.Nameeng()
	case mdrekvizit.FieldSynonym:
		return m.Synonym()
	case mdrekvizit.FieldPor:
		return m.Por()
	case mdrekvizit.FieldWidthElem:
		return m.WidthElem()
	case mdrekvizit.FieldWidthSpisok:
		return m.WidthSpisok()
	case mdrekvizit.FieldType:
		return m.GetType()
	case mdrekvizit.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MDRekvizitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mdrekvizit.FieldNamerus:
		return m.OldNamerus(ctx)
	case mdrekvizit.FieldNameeng:
		return m.OldNameeng(ctx)
	case mdrekvizit.FieldSynonym:
		return m.OldSynonym(ctx)
	case mdrekvizit.FieldPor:
		return m.OldPor(ctx)
	case mdrekvizit.FieldWidthElem:
		return m.OldWidthElem(ctx)
	case mdrekvizit.FieldWidthSpisok:
		return m.OldWidthSpisok(ctx)
	case mdrekvizit.FieldType:
		return m.OldType(ctx)
	case mdrekvizit.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown MDRekvizit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MDRekvizitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mdrekvizit.FieldNamerus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamerus(v)
		return nil
	case mdrekvizit.FieldNameeng:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameeng(v)
		return nil
	case mdrekvizit.FieldSynonym:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSynonym(v)
		return nil
	case mdrekvizit.FieldPor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPor(v)
		return nil
	case mdrekvizit.FieldWidthElem:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidthElem(v)
		return nil
	case mdrekvizit.FieldWidthSpisok:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidthSpisok(v)
		return nil
	case mdrekvizit.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case mdrekvizit.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown MDRekvizit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MDRekvizitMutation) AddedFields() []string {
	var fields []string
	if m.addwidthElem != nil {
		fields = append(fields, mdrekvizit.FieldWidthElem)
	}
	if m.addwidthSpisok != nil {
		fields = append(fields, mdrekvizit.FieldWidthSpisok)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MDRekvizitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mdrekvizit.FieldWidthElem:
		return m.AddedWidthElem()
	case mdrekvizit.FieldWidthSpisok:
		return m.AddedWidthSpisok()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MDRekvizitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mdrekvizit.FieldWidthElem:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidthElem(v)
		return nil
	case mdrekvizit.FieldWidthSpisok:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidthSpisok(v)
		return nil
	}
	return fmt.Errorf("unknown MDRekvizit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MDRekvizitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mdrekvizit.FieldOwnerID) {
		fields = append(fields, mdrekvizit.FieldOwnerID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MDRekvizitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MDRekvizitMutation) ClearField(name string) error {
	switch name {
	case mdrekvizit.FieldOwnerID:
		m.ClearOwnerID()
		return nil
	}
	return fmt.Errorf("unknown MDRekvizit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MDRekvizitMutation) ResetField(name string) error {
	switch name {
	case mdrekvizit.FieldNamerus:
		m.ResetNamerus()
		return nil
	case mdrekvizit.FieldNameeng:
		m.ResetNameeng()
		return nil
	case mdrekvizit.FieldSynonym:
		m.ResetSynonym()
		return nil
	case mdrekvizit.FieldPor:
		m.ResetPor()
		return nil
	case mdrekvizit.FieldWidthElem:
		m.ResetWidthElem()
		return nil
	case mdrekvizit.FieldWidthSpisok:
		m.ResetWidthSpisok()
		return nil
	case mdrekvizit.FieldType:
		m.ResetType()
		return nil
	case mdrekvizit.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown MDRekvizit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MDRekvizitMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, mdrekvizit.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MDRekvizitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mdrekvizit.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MDRekvizitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MDRekvizitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MDRekvizitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, mdrekvizit.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MDRekvizitMutation) EdgeCleared(name string) bool {
	switch name {
	case mdrekvizit.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MDRekvizitMutation) ClearEdge(name string) error {
	switch name {
	case mdrekvizit.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown MDRekvizit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MDRekvizitMutation) ResetEdge(name string) error {
	switch name {
	case mdrekvizit.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown MDRekvizit edge %s", name)
}

// MDSubSystemsMutation represents an operation that mutates the MDSubSystems nodes in the graph.
type MDSubSystemsMutation struct {
	config
	op                         Op
	typ                        string
	id                         *string
	namerus                    *string
	nameeng                    *string
	synonym                    *string
	clearedFields              map[string]struct{}
	child_mdsubsystems         map[string]struct{}
	removedchild_mdsubsystems  map[string]struct{}
	clearedchild_mdsubsystems  bool
	parent_mdsubsystems        *string
	clearedparent_mdsubsystems bool
	mdtables                   map[string]struct{}
	removedmdtables            map[string]struct{}
	clearedmdtables            bool
	done                       bool
	oldValue                   func(context.Context) (*MDSubSystems, error)
	predicates                 []predicate.MDSubSystems
}

var _ ent.Mutation = (*MDSubSystemsMutation)(nil)

// mdsubsystemsOption allows management of the mutation configuration using functional options.
type mdsubsystemsOption func(*MDSubSystemsMutation)

// newMDSubSystemsMutation creates new mutation for the MDSubSystems entity.
func newMDSubSystemsMutation(c config, op Op, opts ...mdsubsystemsOption) *MDSubSystemsMutation {
	m := &MDSubSystemsMutation{
		config:        c,
		op:            op,
		typ:           TypeMDSubSystems,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMDSubSystemsID sets the ID field of the mutation.
func withMDSubSystemsID(id string) mdsubsystemsOption {
	return func(m *MDSubSystemsMutation) {
		var (
			err   error
			once  sync.Once
			value *MDSubSystems
		)
		m.oldValue = func(ctx context.Context) (*MDSubSystems, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MDSubSystems.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMDSubSystems sets the old MDSubSystems of the mutation.
func withMDSubSystems(node *MDSubSystems) mdsubsystemsOption {
	return func(m *MDSubSystemsMutation) {
		m.oldValue = func(context.Context) (*MDSubSystems, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MDSubSystemsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MDSubSystemsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MDSubSystems entities.
func (m *MDSubSystemsMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MDSubSystemsMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MDSubSystemsMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MDSubSystems.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNamerus sets the "namerus" field.
func (m *MDSubSystemsMutation) SetNamerus(s string) {
	m.namerus = &s
}

// Namerus returns the value of the "namerus" field in the mutation.
func (m *MDSubSystemsMutation) Namerus() (r string, exists bool) {
	v := m.namerus
	if v == nil {
		return
	}
	return *v, true
}

// OldNamerus returns the old "namerus" field's value of the MDSubSystems entity.
// If the MDSubSystems object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDSubSystemsMutation) OldNamerus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamerus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamerus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamerus: %w", err)
	}
	return oldValue.Namerus, nil
}

// ResetNamerus resets all changes to the "namerus" field.
func (m *MDSubSystemsMutation) ResetNamerus() {
	m.namerus = nil
}

// SetNameeng sets the "nameeng" field.
func (m *MDSubSystemsMutation) SetNameeng(s string) {
	m.nameeng = &s
}

// Nameeng returns the value of the "nameeng" field in the mutation.
func (m *MDSubSystemsMutation) Nameeng() (r string, exists bool) {
	v := m.nameeng
	if v == nil {
		return
	}
	return *v, true
}

// OldNameeng returns the old "nameeng" field's value of the MDSubSystems entity.
// If the MDSubSystems object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDSubSystemsMutation) OldNameeng(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameeng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameeng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameeng: %w", err)
	}
	return oldValue.Nameeng, nil
}

// ResetNameeng resets all changes to the "nameeng" field.
func (m *MDSubSystemsMutation) ResetNameeng() {
	m.nameeng = nil
}

// SetSynonym sets the "synonym" field.
func (m *MDSubSystemsMutation) SetSynonym(s string) {
	m.synonym = &s
}

// Synonym returns the value of the "synonym" field in the mutation.
func (m *MDSubSystemsMutation) Synonym() (r string, exists bool) {
	v := m.synonym
	if v == nil {
		return
	}
	return *v, true
}

// OldSynonym returns the old "synonym" field's value of the MDSubSystems entity.
// If the MDSubSystems object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDSubSystemsMutation) OldSynonym(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSynonym is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSynonym requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSynonym: %w", err)
	}
	return oldValue.Synonym, nil
}

// ResetSynonym resets all changes to the "synonym" field.
func (m *MDSubSystemsMutation) ResetSynonym() {
	m.synonym = nil
}

// SetParent sets the "parent" field.
func (m *MDSubSystemsMutation) SetParent(s string) {
	m.parent_mdsubsystems = &s
}

// Parent returns the value of the "parent" field in the mutation.
func (m *MDSubSystemsMutation) Parent() (r string, exists bool) {
	v := m.parent_mdsubsystems
	if v == nil {
		return
	}
	return *v, true
}

// OldParent returns the old "parent" field's value of the MDSubSystems entity.
// If the MDSubSystems object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDSubSystemsMutation) OldParent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParent: %w", err)
	}
	return oldValue.Parent, nil
}

// ClearParent clears the value of the "parent" field.
func (m *MDSubSystemsMutation) ClearParent() {
	m.parent_mdsubsystems = nil
	m.clearedFields[mdsubsystems.FieldParent] = struct{}{}
}

// ParentCleared returns if the "parent" field was cleared in this mutation.
func (m *MDSubSystemsMutation) ParentCleared() bool {
	_, ok := m.clearedFields[mdsubsystems.FieldParent]
	return ok
}

// ResetParent resets all changes to the "parent" field.
func (m *MDSubSystemsMutation) ResetParent() {
	m.parent_mdsubsystems = nil
	delete(m.clearedFields, mdsubsystems.FieldParent)
}

// AddChildMdsubsystemIDs adds the "child_mdsubsystems" edge to the MDSubSystems entity by ids.
func (m *MDSubSystemsMutation) AddChildMdsubsystemIDs(ids ...string) {
	if m.child_mdsubsystems == nil {
		m.child_mdsubsystems = make(map[string]struct{})
	}
	for i := range ids {
		m.child_mdsubsystems[ids[i]] = struct{}{}
	}
}

// ClearChildMdsubsystems clears the "child_mdsubsystems" edge to the MDSubSystems entity.
func (m *MDSubSystemsMutation) ClearChildMdsubsystems() {
	m.clearedchild_mdsubsystems = true
}

// ChildMdsubsystemsCleared reports if the "child_mdsubsystems" edge to the MDSubSystems entity was cleared.
func (m *MDSubSystemsMutation) ChildMdsubsystemsCleared() bool {
	return m.clearedchild_mdsubsystems
}

// RemoveChildMdsubsystemIDs removes the "child_mdsubsystems" edge to the MDSubSystems entity by IDs.
func (m *MDSubSystemsMutation) RemoveChildMdsubsystemIDs(ids ...string) {
	if m.removedchild_mdsubsystems == nil {
		m.removedchild_mdsubsystems = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.child_mdsubsystems, ids[i])
		m.removedchild_mdsubsystems[ids[i]] = struct{}{}
	}
}

// RemovedChildMdsubsystems returns the removed IDs of the "child_mdsubsystems" edge to the MDSubSystems entity.
func (m *MDSubSystemsMutation) RemovedChildMdsubsystemsIDs() (ids []string) {
	for id := range m.removedchild_mdsubsystems {
		ids = append(ids, id)
	}
	return
}

// ChildMdsubsystemsIDs returns the "child_mdsubsystems" edge IDs in the mutation.
func (m *MDSubSystemsMutation) ChildMdsubsystemsIDs() (ids []string) {
	for id := range m.child_mdsubsystems {
		ids = append(ids, id)
	}
	return
}

// ResetChildMdsubsystems resets all changes to the "child_mdsubsystems" edge.
func (m *MDSubSystemsMutation) ResetChildMdsubsystems() {
	m.child_mdsubsystems = nil
	m.clearedchild_mdsubsystems = false
	m.removedchild_mdsubsystems = nil
}

// SetParentMdsubsystemsID sets the "parent_mdsubsystems" edge to the MDSubSystems entity by id.
func (m *MDSubSystemsMutation) SetParentMdsubsystemsID(id string) {
	m.parent_mdsubsystems = &id
}

// ClearParentMdsubsystems clears the "parent_mdsubsystems" edge to the MDSubSystems entity.
func (m *MDSubSystemsMutation) ClearParentMdsubsystems() {
	m.clearedparent_mdsubsystems = true
}

// ParentMdsubsystemsCleared reports if the "parent_mdsubsystems" edge to the MDSubSystems entity was cleared.
func (m *MDSubSystemsMutation) ParentMdsubsystemsCleared() bool {
	return m.ParentCleared() || m.clearedparent_mdsubsystems
}

// ParentMdsubsystemsID returns the "parent_mdsubsystems" edge ID in the mutation.
func (m *MDSubSystemsMutation) ParentMdsubsystemsID() (id string, exists bool) {
	if m.parent_mdsubsystems != nil {
		return *m.parent_mdsubsystems, true
	}
	return
}

// ParentMdsubsystemsIDs returns the "parent_mdsubsystems" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentMdsubsystemsID instead. It exists only for internal usage by the builders.
func (m *MDSubSystemsMutation) ParentMdsubsystemsIDs() (ids []string) {
	if id := m.parent_mdsubsystems; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParentMdsubsystems resets all changes to the "parent_mdsubsystems" edge.
func (m *MDSubSystemsMutation) ResetParentMdsubsystems() {
	m.parent_mdsubsystems = nil
	m.clearedparent_mdsubsystems = false
}

// AddMdtableIDs adds the "mdtables" edge to the MDTabel entity by ids.
func (m *MDSubSystemsMutation) AddMdtableIDs(ids ...string) {
	if m.mdtables == nil {
		m.mdtables = make(map[string]struct{})
	}
	for i := range ids {
		m.mdtables[ids[i]] = struct{}{}
	}
}

// ClearMdtables clears the "mdtables" edge to the MDTabel entity.
func (m *MDSubSystemsMutation) ClearMdtables() {
	m.clearedmdtables = true
}

// MdtablesCleared reports if the "mdtables" edge to the MDTabel entity was cleared.
func (m *MDSubSystemsMutation) MdtablesCleared() bool {
	return m.clearedmdtables
}

// RemoveMdtableIDs removes the "mdtables" edge to the MDTabel entity by IDs.
func (m *MDSubSystemsMutation) RemoveMdtableIDs(ids ...string) {
	if m.removedmdtables == nil {
		m.removedmdtables = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.mdtables, ids[i])
		m.removedmdtables[ids[i]] = struct{}{}
	}
}

// RemovedMdtables returns the removed IDs of the "mdtables" edge to the MDTabel entity.
func (m *MDSubSystemsMutation) RemovedMdtablesIDs() (ids []string) {
	for id := range m.removedmdtables {
		ids = append(ids, id)
	}
	return
}

// MdtablesIDs returns the "mdtables" edge IDs in the mutation.
func (m *MDSubSystemsMutation) MdtablesIDs() (ids []string) {
	for id := range m.mdtables {
		ids = append(ids, id)
	}
	return
}

// ResetMdtables resets all changes to the "mdtables" edge.
func (m *MDSubSystemsMutation) ResetMdtables() {
	m.mdtables = nil
	m.clearedmdtables = false
	m.removedmdtables = nil
}

// Where appends a list predicates to the MDSubSystemsMutation builder.
func (m *MDSubSystemsMutation) Where(ps ...predicate.MDSubSystems) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MDSubSystemsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MDSubSystems).
func (m *MDSubSystemsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MDSubSystemsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.namerus != nil {
		fields = append(fields, mdsubsystems.FieldNamerus)
	}
	if m.nameeng != nil {
		fields = append(fields, mdsubsystems.FieldNameeng)
	}
	if m.synonym != nil {
		fields = append(fields, mdsubsystems.FieldSynonym)
	}
	if m.parent_mdsubsystems != nil {
		fields = append(fields, mdsubsystems.FieldParent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MDSubSystemsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mdsubsystems.FieldNamerus:
		return m.Namerus()
	case mdsubsystems.FieldNameeng:
		return m.Nameeng()
	case mdsubsystems.FieldSynonym:
		return m.Synonym()
	case mdsubsystems.FieldParent:
		return m.Parent()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MDSubSystemsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mdsubsystems.FieldNamerus:
		return m.OldNamerus(ctx)
	case mdsubsystems.FieldNameeng:
		return m.OldNameeng(ctx)
	case mdsubsystems.FieldSynonym:
		return m.OldSynonym(ctx)
	case mdsubsystems.FieldParent:
		return m.OldParent(ctx)
	}
	return nil, fmt.Errorf("unknown MDSubSystems field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MDSubSystemsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mdsubsystems.FieldNamerus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamerus(v)
		return nil
	case mdsubsystems.FieldNameeng:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameeng(v)
		return nil
	case mdsubsystems.FieldSynonym:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSynonym(v)
		return nil
	case mdsubsystems.FieldParent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParent(v)
		return nil
	}
	return fmt.Errorf("unknown MDSubSystems field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MDSubSystemsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MDSubSystemsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MDSubSystemsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MDSubSystems numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MDSubSystemsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mdsubsystems.FieldParent) {
		fields = append(fields, mdsubsystems.FieldParent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MDSubSystemsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MDSubSystemsMutation) ClearField(name string) error {
	switch name {
	case mdsubsystems.FieldParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown MDSubSystems nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MDSubSystemsMutation) ResetField(name string) error {
	switch name {
	case mdsubsystems.FieldNamerus:
		m.ResetNamerus()
		return nil
	case mdsubsystems.FieldNameeng:
		m.ResetNameeng()
		return nil
	case mdsubsystems.FieldSynonym:
		m.ResetSynonym()
		return nil
	case mdsubsystems.FieldParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown MDSubSystems field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MDSubSystemsMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.child_mdsubsystems != nil {
		edges = append(edges, mdsubsystems.EdgeChildMdsubsystems)
	}
	if m.parent_mdsubsystems != nil {
		edges = append(edges, mdsubsystems.EdgeParentMdsubsystems)
	}
	if m.mdtables != nil {
		edges = append(edges, mdsubsystems.EdgeMdtables)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MDSubSystemsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mdsubsystems.EdgeChildMdsubsystems:
		ids := make([]ent.Value, 0, len(m.child_mdsubsystems))
		for id := range m.child_mdsubsystems {
			ids = append(ids, id)
		}
		return ids
	case mdsubsystems.EdgeParentMdsubsystems:
		if id := m.parent_mdsubsystems; id != nil {
			return []ent.Value{*id}
		}
	case mdsubsystems.EdgeMdtables:
		ids := make([]ent.Value, 0, len(m.mdtables))
		for id := range m.mdtables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MDSubSystemsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchild_mdsubsystems != nil {
		edges = append(edges, mdsubsystems.EdgeChildMdsubsystems)
	}
	if m.removedmdtables != nil {
		edges = append(edges, mdsubsystems.EdgeMdtables)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MDSubSystemsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mdsubsystems.EdgeChildMdsubsystems:
		ids := make([]ent.Value, 0, len(m.removedchild_mdsubsystems))
		for id := range m.removedchild_mdsubsystems {
			ids = append(ids, id)
		}
		return ids
	case mdsubsystems.EdgeMdtables:
		ids := make([]ent.Value, 0, len(m.removedmdtables))
		for id := range m.removedmdtables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MDSubSystemsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedchild_mdsubsystems {
		edges = append(edges, mdsubsystems.EdgeChildMdsubsystems)
	}
	if m.clearedparent_mdsubsystems {
		edges = append(edges, mdsubsystems.EdgeParentMdsubsystems)
	}
	if m.clearedmdtables {
		edges = append(edges, mdsubsystems.EdgeMdtables)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MDSubSystemsMutation) EdgeCleared(name string) bool {
	switch name {
	case mdsubsystems.EdgeChildMdsubsystems:
		return m.clearedchild_mdsubsystems
	case mdsubsystems.EdgeParentMdsubsystems:
		return m.clearedparent_mdsubsystems
	case mdsubsystems.EdgeMdtables:
		return m.clearedmdtables
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MDSubSystemsMutation) ClearEdge(name string) error {
	switch name {
	case mdsubsystems.EdgeParentMdsubsystems:
		m.ClearParentMdsubsystems()
		return nil
	}
	return fmt.Errorf("unknown MDSubSystems unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MDSubSystemsMutation) ResetEdge(name string) error {
	switch name {
	case mdsubsystems.EdgeChildMdsubsystems:
		m.ResetChildMdsubsystems()
		return nil
	case mdsubsystems.EdgeParentMdsubsystems:
		m.ResetParentMdsubsystems()
		return nil
	case mdsubsystems.EdgeMdtables:
		m.ResetMdtables()
		return nil
	}
	return fmt.Errorf("unknown MDSubSystems edge %s", name)
}

// MDTabelMutation represents an operation that mutates the MDTabel nodes in the graph.
type MDTabelMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	namerus             *string
	nameeng             *string
	synonym             *string
	file                *string
	_type               *string
	clearedFields       map[string]struct{}
	mdsubsystems        map[string]struct{}
	removedmdsubsystems map[string]struct{}
	clearedmdsubsystems bool
	mdrekvizits         map[string]struct{}
	removedmdrekvizits  map[string]struct{}
	clearedmdrekvizits  bool
	done                bool
	oldValue            func(context.Context) (*MDTabel, error)
	predicates          []predicate.MDTabel
}

var _ ent.Mutation = (*MDTabelMutation)(nil)

// mdtabelOption allows management of the mutation configuration using functional options.
type mdtabelOption func(*MDTabelMutation)

// newMDTabelMutation creates new mutation for the MDTabel entity.
func newMDTabelMutation(c config, op Op, opts ...mdtabelOption) *MDTabelMutation {
	m := &MDTabelMutation{
		config:        c,
		op:            op,
		typ:           TypeMDTabel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMDTabelID sets the ID field of the mutation.
func withMDTabelID(id string) mdtabelOption {
	return func(m *MDTabelMutation) {
		var (
			err   error
			once  sync.Once
			value *MDTabel
		)
		m.oldValue = func(ctx context.Context) (*MDTabel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MDTabel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMDTabel sets the old MDTabel of the mutation.
func withMDTabel(node *MDTabel) mdtabelOption {
	return func(m *MDTabelMutation) {
		m.oldValue = func(context.Context) (*MDTabel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MDTabelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MDTabelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MDTabel entities.
func (m *MDTabelMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MDTabelMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MDTabelMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MDTabel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNamerus sets the "namerus" field.
func (m *MDTabelMutation) SetNamerus(s string) {
	m.namerus = &s
}

// Namerus returns the value of the "namerus" field in the mutation.
func (m *MDTabelMutation) Namerus() (r string, exists bool) {
	v := m.namerus
	if v == nil {
		return
	}
	return *v, true
}

// OldNamerus returns the old "namerus" field's value of the MDTabel entity.
// If the MDTabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDTabelMutation) OldNamerus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamerus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamerus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamerus: %w", err)
	}
	return oldValue.Namerus, nil
}

// ResetNamerus resets all changes to the "namerus" field.
func (m *MDTabelMutation) ResetNamerus() {
	m.namerus = nil
}

// SetNameeng sets the "nameeng" field.
func (m *MDTabelMutation) SetNameeng(s string) {
	m.nameeng = &s
}

// Nameeng returns the value of the "nameeng" field in the mutation.
func (m *MDTabelMutation) Nameeng() (r string, exists bool) {
	v := m.nameeng
	if v == nil {
		return
	}
	return *v, true
}

// OldNameeng returns the old "nameeng" field's value of the MDTabel entity.
// If the MDTabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDTabelMutation) OldNameeng(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameeng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameeng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameeng: %w", err)
	}
	return oldValue.Nameeng, nil
}

// ResetNameeng resets all changes to the "nameeng" field.
func (m *MDTabelMutation) ResetNameeng() {
	m.nameeng = nil
}

// SetSynonym sets the "synonym" field.
func (m *MDTabelMutation) SetSynonym(s string) {
	m.synonym = &s
}

// Synonym returns the value of the "synonym" field in the mutation.
func (m *MDTabelMutation) Synonym() (r string, exists bool) {
	v := m.synonym
	if v == nil {
		return
	}
	return *v, true
}

// OldSynonym returns the old "synonym" field's value of the MDTabel entity.
// If the MDTabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDTabelMutation) OldSynonym(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSynonym is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSynonym requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSynonym: %w", err)
	}
	return oldValue.Synonym, nil
}

// ResetSynonym resets all changes to the "synonym" field.
func (m *MDTabelMutation) ResetSynonym() {
	m.synonym = nil
}

// SetFile sets the "file" field.
func (m *MDTabelMutation) SetFile(s string) {
	m.file = &s
}

// File returns the value of the "file" field in the mutation.
func (m *MDTabelMutation) File() (r string, exists bool) {
	v := m.file
	if v == nil {
		return
	}
	return *v, true
}

// OldFile returns the old "file" field's value of the MDTabel entity.
// If the MDTabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDTabelMutation) OldFile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFile: %w", err)
	}
	return oldValue.File, nil
}

// ResetFile resets all changes to the "file" field.
func (m *MDTabelMutation) ResetFile() {
	m.file = nil
}

// SetType sets the "type" field.
func (m *MDTabelMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *MDTabelMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the MDTabel entity.
// If the MDTabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MDTabelMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MDTabelMutation) ResetType() {
	m._type = nil
}

// AddMdsubsystemIDs adds the "mdsubsystems" edge to the MDSubSystems entity by ids.
func (m *MDTabelMutation) AddMdsubsystemIDs(ids ...string) {
	if m.mdsubsystems == nil {
		m.mdsubsystems = make(map[string]struct{})
	}
	for i := range ids {
		m.mdsubsystems[ids[i]] = struct{}{}
	}
}

// ClearMdsubsystems clears the "mdsubsystems" edge to the MDSubSystems entity.
func (m *MDTabelMutation) ClearMdsubsystems() {
	m.clearedmdsubsystems = true
}

// MdsubsystemsCleared reports if the "mdsubsystems" edge to the MDSubSystems entity was cleared.
func (m *MDTabelMutation) MdsubsystemsCleared() bool {
	return m.clearedmdsubsystems
}

// RemoveMdsubsystemIDs removes the "mdsubsystems" edge to the MDSubSystems entity by IDs.
func (m *MDTabelMutation) RemoveMdsubsystemIDs(ids ...string) {
	if m.removedmdsubsystems == nil {
		m.removedmdsubsystems = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.mdsubsystems, ids[i])
		m.removedmdsubsystems[ids[i]] = struct{}{}
	}
}

// RemovedMdsubsystems returns the removed IDs of the "mdsubsystems" edge to the MDSubSystems entity.
func (m *MDTabelMutation) RemovedMdsubsystemsIDs() (ids []string) {
	for id := range m.removedmdsubsystems {
		ids = append(ids, id)
	}
	return
}

// MdsubsystemsIDs returns the "mdsubsystems" edge IDs in the mutation.
func (m *MDTabelMutation) MdsubsystemsIDs() (ids []string) {
	for id := range m.mdsubsystems {
		ids = append(ids, id)
	}
	return
}

// ResetMdsubsystems resets all changes to the "mdsubsystems" edge.
func (m *MDTabelMutation) ResetMdsubsystems() {
	m.mdsubsystems = nil
	m.clearedmdsubsystems = false
	m.removedmdsubsystems = nil
}

// AddMdrekvizitIDs adds the "mdrekvizits" edge to the MDRekvizit entity by ids.
func (m *MDTabelMutation) AddMdrekvizitIDs(ids ...string) {
	if m.mdrekvizits == nil {
		m.mdrekvizits = make(map[string]struct{})
	}
	for i := range ids {
		m.mdrekvizits[ids[i]] = struct{}{}
	}
}

// ClearMdrekvizits clears the "mdrekvizits" edge to the MDRekvizit entity.
func (m *MDTabelMutation) ClearMdrekvizits() {
	m.clearedmdrekvizits = true
}

// MdrekvizitsCleared reports if the "mdrekvizits" edge to the MDRekvizit entity was cleared.
func (m *MDTabelMutation) MdrekvizitsCleared() bool {
	return m.clearedmdrekvizits
}

// RemoveMdrekvizitIDs removes the "mdrekvizits" edge to the MDRekvizit entity by IDs.
func (m *MDTabelMutation) RemoveMdrekvizitIDs(ids ...string) {
	if m.removedmdrekvizits == nil {
		m.removedmdrekvizits = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.mdrekvizits, ids[i])
		m.removedmdrekvizits[ids[i]] = struct{}{}
	}
}

// RemovedMdrekvizits returns the removed IDs of the "mdrekvizits" edge to the MDRekvizit entity.
func (m *MDTabelMutation) RemovedMdrekvizitsIDs() (ids []string) {
	for id := range m.removedmdrekvizits {
		ids = append(ids, id)
	}
	return
}

// MdrekvizitsIDs returns the "mdrekvizits" edge IDs in the mutation.
func (m *MDTabelMutation) MdrekvizitsIDs() (ids []string) {
	for id := range m.mdrekvizits {
		ids = append(ids, id)
	}
	return
}

// ResetMdrekvizits resets all changes to the "mdrekvizits" edge.
func (m *MDTabelMutation) ResetMdrekvizits() {
	m.mdrekvizits = nil
	m.clearedmdrekvizits = false
	m.removedmdrekvizits = nil
}

// Where appends a list predicates to the MDTabelMutation builder.
func (m *MDTabelMutation) Where(ps ...predicate.MDTabel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MDTabelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MDTabel).
func (m *MDTabelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MDTabelMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.namerus != nil {
		fields = append(fields, mdtabel.FieldNamerus)
	}
	if m.nameeng != nil {
		fields = append(fields, mdtabel.FieldNameeng)
	}
	if m.synonym != nil {
		fields = append(fields, mdtabel.FieldSynonym)
	}
	if m.file != nil {
		fields = append(fields, mdtabel.FieldFile)
	}
	if m._type != nil {
		fields = append(fields, mdtabel.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MDTabelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mdtabel.FieldNamerus:
		return m.Namerus()
	case mdtabel.FieldNameeng:
		return m.Nameeng()
	case mdtabel.FieldSynonym:
		return m.Synonym()
	case mdtabel.FieldFile:
		return m.File()
	case mdtabel.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MDTabelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mdtabel.FieldNamerus:
		return m.OldNamerus(ctx)
	case mdtabel.FieldNameeng:
		return m.OldNameeng(ctx)
	case mdtabel.FieldSynonym:
		return m.OldSynonym(ctx)
	case mdtabel.FieldFile:
		return m.OldFile(ctx)
	case mdtabel.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown MDTabel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MDTabelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mdtabel.FieldNamerus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamerus(v)
		return nil
	case mdtabel.FieldNameeng:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameeng(v)
		return nil
	case mdtabel.FieldSynonym:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSynonym(v)
		return nil
	case mdtabel.FieldFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFile(v)
		return nil
	case mdtabel.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown MDTabel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MDTabelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MDTabelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MDTabelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MDTabel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MDTabelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MDTabelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MDTabelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MDTabel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MDTabelMutation) ResetField(name string) error {
	switch name {
	case mdtabel.FieldNamerus:
		m.ResetNamerus()
		return nil
	case mdtabel.FieldNameeng:
		m.ResetNameeng()
		return nil
	case mdtabel.FieldSynonym:
		m.ResetSynonym()
		return nil
	case mdtabel.FieldFile:
		m.ResetFile()
		return nil
	case mdtabel.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown MDTabel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MDTabelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.mdsubsystems != nil {
		edges = append(edges, mdtabel.EdgeMdsubsystems)
	}
	if m.mdrekvizits != nil {
		edges = append(edges, mdtabel.EdgeMdrekvizits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MDTabelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mdtabel.EdgeMdsubsystems:
		ids := make([]ent.Value, 0, len(m.mdsubsystems))
		for id := range m.mdsubsystems {
			ids = append(ids, id)
		}
		return ids
	case mdtabel.EdgeMdrekvizits:
		ids := make([]ent.Value, 0, len(m.mdrekvizits))
		for id := range m.mdrekvizits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MDTabelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmdsubsystems != nil {
		edges = append(edges, mdtabel.EdgeMdsubsystems)
	}
	if m.removedmdrekvizits != nil {
		edges = append(edges, mdtabel.EdgeMdrekvizits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MDTabelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mdtabel.EdgeMdsubsystems:
		ids := make([]ent.Value, 0, len(m.removedmdsubsystems))
		for id := range m.removedmdsubsystems {
			ids = append(ids, id)
		}
		return ids
	case mdtabel.EdgeMdrekvizits:
		ids := make([]ent.Value, 0, len(m.removedmdrekvizits))
		for id := range m.removedmdrekvizits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MDTabelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmdsubsystems {
		edges = append(edges, mdtabel.EdgeMdsubsystems)
	}
	if m.clearedmdrekvizits {
		edges = append(edges, mdtabel.EdgeMdrekvizits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MDTabelMutation) EdgeCleared(name string) bool {
	switch name {
	case mdtabel.EdgeMdsubsystems:
		return m.clearedmdsubsystems
	case mdtabel.EdgeMdrekvizits:
		return m.clearedmdrekvizits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MDTabelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MDTabel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MDTabelMutation) ResetEdge(name string) error {
	switch name {
	case mdtabel.EdgeMdsubsystems:
		m.ResetMdsubsystems()
		return nil
	case mdtabel.EdgeMdrekvizits:
		m.ResetMdrekvizits()
		return nil
	}
	return fmt.Errorf("unknown MDTabel edge %s", name)
}
