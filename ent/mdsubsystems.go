// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"fynegui/ent/mdsubsystems"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// MDSubSystems is the model entity for the MDSubSystems schema.
type MDSubSystems struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"ссылка,omitempty"`
	// Namerus holds the value of the "namerus" field.
	Namerus string `json:"ИмяРус,omitempty"`
	// Nameeng holds the value of the "nameeng" field.
	Nameeng string `json:"ИмяАнгл,omitempty"`
	// Synonym holds the value of the "synonym" field.
	Synonym string `json:"Синоним,omitempty"`
	// Parent holds the value of the "parent" field.
	Parent string `json:"Родитель,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MDSubSystemsQuery when eager-loading is set.
	Edges MDSubSystemsEdges `json:"edges"`
}

// MDSubSystemsEdges holds the relations/edges for other nodes in the graph.
type MDSubSystemsEdges struct {
	// ChildMdsubsystems holds the value of the child_mdsubsystems edge.
	ChildMdsubsystems []*MDSubSystems `json:"child_mdsubsystems,omitempty"`
	// ParentMdsubsystems holds the value of the parent_mdsubsystems edge.
	ParentMdsubsystems *MDSubSystems `json:"родитель,omitempty"`
	// Mdtables holds the value of the mdtables edge.
	Mdtables []*MDTabel `json:"mdtables,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChildMdsubsystemsOrErr returns the ChildMdsubsystems value or an error if the edge
// was not loaded in eager-loading.
func (e MDSubSystemsEdges) ChildMdsubsystemsOrErr() ([]*MDSubSystems, error) {
	if e.loadedTypes[0] {
		return e.ChildMdsubsystems, nil
	}
	return nil, &NotLoadedError{edge: "child_mdsubsystems"}
}

// ParentMdsubsystemsOrErr returns the ParentMdsubsystems value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MDSubSystemsEdges) ParentMdsubsystemsOrErr() (*MDSubSystems, error) {
	if e.loadedTypes[1] {
		if e.ParentMdsubsystems == nil {
			// The edge parent_mdsubsystems was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mdsubsystems.Label}
		}
		return e.ParentMdsubsystems, nil
	}
	return nil, &NotLoadedError{edge: "parent_mdsubsystems"}
}

// MdtablesOrErr returns the Mdtables value or an error if the edge
// was not loaded in eager-loading.
func (e MDSubSystemsEdges) MdtablesOrErr() ([]*MDTabel, error) {
	if e.loadedTypes[2] {
		return e.Mdtables, nil
	}
	return nil, &NotLoadedError{edge: "mdtables"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MDSubSystems) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mdsubsystems.FieldID, mdsubsystems.FieldNamerus, mdsubsystems.FieldNameeng, mdsubsystems.FieldSynonym, mdsubsystems.FieldParent:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MDSubSystems", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MDSubSystems fields.
func (mss *MDSubSystems) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mdsubsystems.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mss.ID = value.String
			}
		case mdsubsystems.FieldNamerus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namerus", values[i])
			} else if value.Valid {
				mss.Namerus = value.String
			}
		case mdsubsystems.FieldNameeng:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nameeng", values[i])
			} else if value.Valid {
				mss.Nameeng = value.String
			}
		case mdsubsystems.FieldSynonym:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field synonym", values[i])
			} else if value.Valid {
				mss.Synonym = value.String
			}
		case mdsubsystems.FieldParent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent", values[i])
			} else if value.Valid {
				mss.Parent = value.String
			}
		}
	}
	return nil
}

// QueryChildMdsubsystems queries the "child_mdsubsystems" edge of the MDSubSystems entity.
func (mss *MDSubSystems) QueryChildMdsubsystems() *MDSubSystemsQuery {
	return (&MDSubSystemsClient{config: mss.config}).QueryChildMdsubsystems(mss)
}

// QueryParentMdsubsystems queries the "parent_mdsubsystems" edge of the MDSubSystems entity.
func (mss *MDSubSystems) QueryParentMdsubsystems() *MDSubSystemsQuery {
	return (&MDSubSystemsClient{config: mss.config}).QueryParentMdsubsystems(mss)
}

// QueryMdtables queries the "mdtables" edge of the MDSubSystems entity.
func (mss *MDSubSystems) QueryMdtables() *MDTabelQuery {
	return (&MDSubSystemsClient{config: mss.config}).QueryMdtables(mss)
}

// Update returns a builder for updating this MDSubSystems.
// Note that you need to call MDSubSystems.Unwrap() before calling this method if this MDSubSystems
// was returned from a transaction, and the transaction was committed or rolled back.
func (mss *MDSubSystems) Update() *MDSubSystemsUpdateOne {
	return (&MDSubSystemsClient{config: mss.config}).UpdateOne(mss)
}

// Unwrap unwraps the MDSubSystems entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mss *MDSubSystems) Unwrap() *MDSubSystems {
	tx, ok := mss.config.driver.(*txDriver)
	if !ok {
		panic("ent: MDSubSystems is not a transactional entity")
	}
	mss.config.driver = tx.drv
	return mss
}

// String implements the fmt.Stringer.
func (mss *MDSubSystems) String() string {
	var builder strings.Builder
	builder.WriteString("MDSubSystems(")
	builder.WriteString(fmt.Sprintf("id=%v", mss.ID))
	builder.WriteString(", namerus=")
	builder.WriteString(mss.Namerus)
	builder.WriteString(", nameeng=")
	builder.WriteString(mss.Nameeng)
	builder.WriteString(", synonym=")
	builder.WriteString(mss.Synonym)
	builder.WriteString(", parent=")
	builder.WriteString(mss.Parent)
	builder.WriteByte(')')
	return builder.String()
}

// MDSubSystemsSlice is a parsable slice of MDSubSystems.
type MDSubSystemsSlice []*MDSubSystems

func (mss MDSubSystemsSlice) config(cfg config) {
	for _i := range mss {
		mss[_i].config = cfg
	}
}
