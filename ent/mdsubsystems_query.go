// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"fynegui/ent/mdsubsystems"
	"fynegui/ent/mdtabel"
	"fynegui/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDSubSystemsQuery is the builder for querying MDSubSystems entities.
type MDSubSystemsQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MDSubSystems
	// eager-loading edges.
	withChildMdsubsystems  *MDSubSystemsQuery
	withParentMdsubsystems *MDSubSystemsQuery
	withMdtables           *MDTabelQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MDSubSystemsQuery builder.
func (mssq *MDSubSystemsQuery) Where(ps ...predicate.MDSubSystems) *MDSubSystemsQuery {
	mssq.predicates = append(mssq.predicates, ps...)
	return mssq
}

// Limit adds a limit step to the query.
func (mssq *MDSubSystemsQuery) Limit(limit int) *MDSubSystemsQuery {
	mssq.limit = &limit
	return mssq
}

// Offset adds an offset step to the query.
func (mssq *MDSubSystemsQuery) Offset(offset int) *MDSubSystemsQuery {
	mssq.offset = &offset
	return mssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mssq *MDSubSystemsQuery) Unique(unique bool) *MDSubSystemsQuery {
	mssq.unique = &unique
	return mssq
}

// Order adds an order step to the query.
func (mssq *MDSubSystemsQuery) Order(o ...OrderFunc) *MDSubSystemsQuery {
	mssq.order = append(mssq.order, o...)
	return mssq
}

// QueryChildMdsubsystems chains the current query on the "child_mdsubsystems" edge.
func (mssq *MDSubSystemsQuery) QueryChildMdsubsystems() *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: mssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdsubsystems.Table, mdsubsystems.FieldID, selector),
			sqlgraph.To(mdsubsystems.Table, mdsubsystems.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mdsubsystems.ChildMdsubsystemsTable, mdsubsystems.ChildMdsubsystemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentMdsubsystems chains the current query on the "parent_mdsubsystems" edge.
func (mssq *MDSubSystemsQuery) QueryParentMdsubsystems() *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: mssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdsubsystems.Table, mdsubsystems.FieldID, selector),
			sqlgraph.To(mdsubsystems.Table, mdsubsystems.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mdsubsystems.ParentMdsubsystemsTable, mdsubsystems.ParentMdsubsystemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMdtables chains the current query on the "mdtables" edge.
func (mssq *MDSubSystemsQuery) QueryMdtables() *MDTabelQuery {
	query := &MDTabelQuery{config: mssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mdsubsystems.Table, mdsubsystems.FieldID, selector),
			sqlgraph.To(mdtabel.Table, mdtabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, mdsubsystems.MdtablesTable, mdsubsystems.MdtablesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(mssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MDSubSystems entity from the query.
// Returns a *NotFoundError when no MDSubSystems was found.
func (mssq *MDSubSystemsQuery) First(ctx context.Context) (*MDSubSystems, error) {
	nodes, err := mssq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mdsubsystems.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) FirstX(ctx context.Context) *MDSubSystems {
	node, err := mssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MDSubSystems ID from the query.
// Returns a *NotFoundError when no MDSubSystems ID was found.
func (mssq *MDSubSystemsQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mssq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mdsubsystems.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) FirstIDX(ctx context.Context) string {
	id, err := mssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MDSubSystems entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MDSubSystems entity is found.
// Returns a *NotFoundError when no MDSubSystems entities are found.
func (mssq *MDSubSystemsQuery) Only(ctx context.Context) (*MDSubSystems, error) {
	nodes, err := mssq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mdsubsystems.Label}
	default:
		return nil, &NotSingularError{mdsubsystems.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) OnlyX(ctx context.Context) *MDSubSystems {
	node, err := mssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MDSubSystems ID in the query.
// Returns a *NotSingularError when more than one MDSubSystems ID is found.
// Returns a *NotFoundError when no entities are found.
func (mssq *MDSubSystemsQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mssq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = &NotSingularError{mdsubsystems.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) OnlyIDX(ctx context.Context) string {
	id, err := mssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MDSubSystemsSlice.
func (mssq *MDSubSystemsQuery) All(ctx context.Context) ([]*MDSubSystems, error) {
	if err := mssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mssq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) AllX(ctx context.Context) []*MDSubSystems {
	nodes, err := mssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MDSubSystems IDs.
func (mssq *MDSubSystemsQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := mssq.Select(mdsubsystems.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) IDsX(ctx context.Context) []string {
	ids, err := mssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mssq *MDSubSystemsQuery) Count(ctx context.Context) (int, error) {
	if err := mssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mssq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) CountX(ctx context.Context) int {
	count, err := mssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mssq *MDSubSystemsQuery) Exist(ctx context.Context) (bool, error) {
	if err := mssq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mssq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mssq *MDSubSystemsQuery) ExistX(ctx context.Context) bool {
	exist, err := mssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MDSubSystemsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mssq *MDSubSystemsQuery) Clone() *MDSubSystemsQuery {
	if mssq == nil {
		return nil
	}
	return &MDSubSystemsQuery{
		config:                 mssq.config,
		limit:                  mssq.limit,
		offset:                 mssq.offset,
		order:                  append([]OrderFunc{}, mssq.order...),
		predicates:             append([]predicate.MDSubSystems{}, mssq.predicates...),
		withChildMdsubsystems:  mssq.withChildMdsubsystems.Clone(),
		withParentMdsubsystems: mssq.withParentMdsubsystems.Clone(),
		withMdtables:           mssq.withMdtables.Clone(),
		// clone intermediate query.
		sql:    mssq.sql.Clone(),
		path:   mssq.path,
		unique: mssq.unique,
	}
}

// WithChildMdsubsystems tells the query-builder to eager-load the nodes that are connected to
// the "child_mdsubsystems" edge. The optional arguments are used to configure the query builder of the edge.
func (mssq *MDSubSystemsQuery) WithChildMdsubsystems(opts ...func(*MDSubSystemsQuery)) *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: mssq.config}
	for _, opt := range opts {
		opt(query)
	}
	mssq.withChildMdsubsystems = query
	return mssq
}

// WithParentMdsubsystems tells the query-builder to eager-load the nodes that are connected to
// the "parent_mdsubsystems" edge. The optional arguments are used to configure the query builder of the edge.
func (mssq *MDSubSystemsQuery) WithParentMdsubsystems(opts ...func(*MDSubSystemsQuery)) *MDSubSystemsQuery {
	query := &MDSubSystemsQuery{config: mssq.config}
	for _, opt := range opts {
		opt(query)
	}
	mssq.withParentMdsubsystems = query
	return mssq
}

// WithMdtables tells the query-builder to eager-load the nodes that are connected to
// the "mdtables" edge. The optional arguments are used to configure the query builder of the edge.
func (mssq *MDSubSystemsQuery) WithMdtables(opts ...func(*MDTabelQuery)) *MDSubSystemsQuery {
	query := &MDTabelQuery{config: mssq.config}
	for _, opt := range opts {
		opt(query)
	}
	mssq.withMdtables = query
	return mssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Nameeng string `json:"ИмяАнгл,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MDSubSystems.Query().
//		GroupBy(mdsubsystems.FieldNameeng).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mssq *MDSubSystemsQuery) GroupBy(field string, fields ...string) *MDSubSystemsGroupBy {
	group := &MDSubSystemsGroupBy{config: mssq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mssq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Nameeng string `json:"ИмяАнгл,omitempty"`
//	}
//
//	client.MDSubSystems.Query().
//		Select(mdsubsystems.FieldNameeng).
//		Scan(ctx, &v)
//
func (mssq *MDSubSystemsQuery) Select(fields ...string) *MDSubSystemsSelect {
	mssq.fields = append(mssq.fields, fields...)
	return &MDSubSystemsSelect{MDSubSystemsQuery: mssq}
}

func (mssq *MDSubSystemsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mssq.fields {
		if !mdsubsystems.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mssq.path != nil {
		prev, err := mssq.path(ctx)
		if err != nil {
			return err
		}
		mssq.sql = prev
	}
	return nil
}

func (mssq *MDSubSystemsQuery) sqlAll(ctx context.Context) ([]*MDSubSystems, error) {
	var (
		nodes       = []*MDSubSystems{}
		_spec       = mssq.querySpec()
		loadedTypes = [3]bool{
			mssq.withChildMdsubsystems != nil,
			mssq.withParentMdsubsystems != nil,
			mssq.withMdtables != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MDSubSystems{config: mssq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := mssq.withChildMdsubsystems; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*MDSubSystems)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ChildMdsubsystems = []*MDSubSystems{}
		}
		query.Where(predicate.MDSubSystems(func(s *sql.Selector) {
			s.Where(sql.InValues(mdsubsystems.ChildMdsubsystemsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.Parent
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ChildMdsubsystems = append(node.Edges.ChildMdsubsystems, n)
		}
	}

	if query := mssq.withParentMdsubsystems; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*MDSubSystems)
		for i := range nodes {
			fk := nodes[i].Parent
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(mdsubsystems.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ParentMdsubsystems = n
			}
		}
	}

	if query := mssq.withMdtables; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[string]*MDSubSystems, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Mdtables = []*MDTabel{}
		}
		var (
			edgeids []string
			edges   = make(map[string][]*MDSubSystems)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   mdsubsystems.MdtablesTable,
				Columns: mdsubsystems.MdtablesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(mdsubsystems.MdtablesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullString), new(sql.NullString)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullString)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullString)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.String
				inValue := ein.String
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, mssq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "mdtables": %w`, err)
		}
		query.Where(mdtabel.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "mdtables" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Mdtables = append(nodes[i].Edges.Mdtables, n)
			}
		}
	}

	return nodes, nil
}

func (mssq *MDSubSystemsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mssq.querySpec()
	_spec.Node.Columns = mssq.fields
	if len(mssq.fields) > 0 {
		_spec.Unique = mssq.unique != nil && *mssq.unique
	}
	return sqlgraph.CountNodes(ctx, mssq.driver, _spec)
}

func (mssq *MDSubSystemsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mssq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mssq *MDSubSystemsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdsubsystems.Table,
			Columns: mdsubsystems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdsubsystems.FieldID,
			},
		},
		From:   mssq.sql,
		Unique: true,
	}
	if unique := mssq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mssq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mdsubsystems.FieldID)
		for i := range fields {
			if fields[i] != mdsubsystems.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mssq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mssq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mssq *MDSubSystemsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mssq.driver.Dialect())
	t1 := builder.Table(mdsubsystems.Table)
	columns := mssq.fields
	if len(columns) == 0 {
		columns = mdsubsystems.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mssq.sql != nil {
		selector = mssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mssq.unique != nil && *mssq.unique {
		selector.Distinct()
	}
	for _, p := range mssq.predicates {
		p(selector)
	}
	for _, p := range mssq.order {
		p(selector)
	}
	if offset := mssq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mssq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MDSubSystemsGroupBy is the group-by builder for MDSubSystems entities.
type MDSubSystemsGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mssgb *MDSubSystemsGroupBy) Aggregate(fns ...AggregateFunc) *MDSubSystemsGroupBy {
	mssgb.fns = append(mssgb.fns, fns...)
	return mssgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mssgb *MDSubSystemsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mssgb.path(ctx)
	if err != nil {
		return err
	}
	mssgb.sql = query
	return mssgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mssgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mssgb.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) StringsX(ctx context.Context) []string {
	v, err := mssgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mssgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) StringX(ctx context.Context) string {
	v, err := mssgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mssgb.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) IntsX(ctx context.Context) []int {
	v, err := mssgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mssgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) IntX(ctx context.Context) int {
	v, err := mssgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mssgb.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mssgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mssgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mssgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mssgb.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mssgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mssgb *MDSubSystemsGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mssgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mssgb *MDSubSystemsGroupBy) BoolX(ctx context.Context) bool {
	v, err := mssgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mssgb *MDSubSystemsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mssgb.fields {
		if !mdsubsystems.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mssgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mssgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mssgb *MDSubSystemsGroupBy) sqlQuery() *sql.Selector {
	selector := mssgb.sql.Select()
	aggregation := make([]string, 0, len(mssgb.fns))
	for _, fn := range mssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mssgb.fields)+len(mssgb.fns))
		for _, f := range mssgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mssgb.fields...)...)
}

// MDSubSystemsSelect is the builder for selecting fields of MDSubSystems entities.
type MDSubSystemsSelect struct {
	*MDSubSystemsQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (msss *MDSubSystemsSelect) Scan(ctx context.Context, v interface{}) error {
	if err := msss.prepareQuery(ctx); err != nil {
		return err
	}
	msss.sql = msss.MDSubSystemsQuery.sqlQuery(ctx)
	return msss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (msss *MDSubSystemsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := msss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(msss.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := msss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (msss *MDSubSystemsSelect) StringsX(ctx context.Context) []string {
	v, err := msss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = msss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (msss *MDSubSystemsSelect) StringX(ctx context.Context) string {
	v, err := msss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(msss.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := msss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (msss *MDSubSystemsSelect) IntsX(ctx context.Context) []int {
	v, err := msss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = msss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (msss *MDSubSystemsSelect) IntX(ctx context.Context) int {
	v, err := msss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(msss.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := msss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (msss *MDSubSystemsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := msss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = msss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (msss *MDSubSystemsSelect) Float64X(ctx context.Context) float64 {
	v, err := msss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(msss.fields) > 1 {
		return nil, errors.New("ent: MDSubSystemsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := msss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (msss *MDSubSystemsSelect) BoolsX(ctx context.Context) []bool {
	v, err := msss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (msss *MDSubSystemsSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = msss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mdsubsystems.Label}
	default:
		err = fmt.Errorf("ent: MDSubSystemsSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (msss *MDSubSystemsSelect) BoolX(ctx context.Context) bool {
	v, err := msss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (msss *MDSubSystemsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := msss.sql.Query()
	if err := msss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
