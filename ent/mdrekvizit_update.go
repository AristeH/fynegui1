// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fynegui/ent/mdrekvizit"
	"fynegui/ent/mdtabel"
	"fynegui/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MDRekvizitUpdate is the builder for updating MDRekvizit entities.
type MDRekvizitUpdate struct {
	config
	hooks    []Hook
	mutation *MDRekvizitMutation
}

// Where appends a list predicates to the MDRekvizitUpdate builder.
func (mru *MDRekvizitUpdate) Where(ps ...predicate.MDRekvizit) *MDRekvizitUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetNameeng sets the "nameeng" field.
func (mru *MDRekvizitUpdate) SetNameeng(s string) *MDRekvizitUpdate {
	mru.mutation.SetNameeng(s)
	return mru
}

// SetSynonym sets the "synonym" field.
func (mru *MDRekvizitUpdate) SetSynonym(s string) *MDRekvizitUpdate {
	mru.mutation.SetSynonym(s)
	return mru
}

// SetPor sets the "por" field.
func (mru *MDRekvizitUpdate) SetPor(s string) *MDRekvizitUpdate {
	mru.mutation.SetPor(s)
	return mru
}

// SetType sets the "type" field.
func (mru *MDRekvizitUpdate) SetType(s string) *MDRekvizitUpdate {
	mru.mutation.SetType(s)
	return mru
}

// SetOwnerID sets the "owner_id" field.
func (mru *MDRekvizitUpdate) SetOwnerID(s string) *MDRekvizitUpdate {
	mru.mutation.SetOwnerID(s)
	return mru
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (mru *MDRekvizitUpdate) SetNillableOwnerID(s *string) *MDRekvizitUpdate {
	if s != nil {
		mru.SetOwnerID(*s)
	}
	return mru
}

// ClearOwnerID clears the value of the "owner_id" field.
func (mru *MDRekvizitUpdate) ClearOwnerID() *MDRekvizitUpdate {
	mru.mutation.ClearOwnerID()
	return mru
}

// SetWidthSpisok sets the "widthSpisok" field.
func (mru *MDRekvizitUpdate) SetWidthSpisok(f float64) *MDRekvizitUpdate {
	mru.mutation.ResetWidthSpisok()
	mru.mutation.SetWidthSpisok(f)
	return mru
}

// AddWidthSpisok adds f to the "widthSpisok" field.
func (mru *MDRekvizitUpdate) AddWidthSpisok(f float64) *MDRekvizitUpdate {
	mru.mutation.AddWidthSpisok(f)
	return mru
}

// SetOwner sets the "owner" edge to the MDTabel entity.
func (mru *MDRekvizitUpdate) SetOwner(m *MDTabel) *MDRekvizitUpdate {
	return mru.SetOwnerID(m.ID)
}

// Mutation returns the MDRekvizitMutation object of the builder.
func (mru *MDRekvizitUpdate) Mutation() *MDRekvizitMutation {
	return mru.mutation
}

// ClearOwner clears the "owner" edge to the MDTabel entity.
func (mru *MDRekvizitUpdate) ClearOwner() *MDRekvizitUpdate {
	mru.mutation.ClearOwner()
	return mru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MDRekvizitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mru.hooks) == 0 {
		if err = mru.check(); err != nil {
			return 0, err
		}
		affected, err = mru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDRekvizitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mru.check(); err != nil {
				return 0, err
			}
			mru.mutation = mutation
			affected, err = mru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mru.hooks) - 1; i >= 0; i-- {
			if mru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MDRekvizitUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MDRekvizitUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MDRekvizitUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mru *MDRekvizitUpdate) check() error {
	if v, ok := mru.mutation.Nameeng(); ok {
		if err := mdrekvizit.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.nameeng": %w`, err)}
		}
	}
	if v, ok := mru.mutation.Synonym(); ok {
		if err := mdrekvizit.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.synonym": %w`, err)}
		}
	}
	if v, ok := mru.mutation.Por(); ok {
		if err := mdrekvizit.PorValidator(v); err != nil {
			return &ValidationError{Name: "por", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.por": %w`, err)}
		}
	}
	if v, ok := mru.mutation.GetType(); ok {
		if err := mdrekvizit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.type": %w`, err)}
		}
	}
	if v, ok := mru.mutation.OwnerID(); ok {
		if err := mdrekvizit.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.owner_id": %w`, err)}
		}
	}
	return nil
}

func (mru *MDRekvizitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdrekvizit.Table,
			Columns: mdrekvizit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdrekvizit.FieldID,
			},
		},
	}
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.Nameeng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldNameeng,
		})
	}
	if value, ok := mru.mutation.Synonym(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldSynonym,
		})
	}
	if value, ok := mru.mutation.Por(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldPor,
		})
	}
	if value, ok := mru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldType,
		})
	}
	if value, ok := mru.mutation.WidthSpisok(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: mdrekvizit.FieldWidthSpisok,
		})
	}
	if value, ok := mru.mutation.AddedWidthSpisok(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: mdrekvizit.FieldWidthSpisok,
		})
	}
	if mru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdrekvizit.OwnerTable,
			Columns: []string{mdrekvizit.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdrekvizit.OwnerTable,
			Columns: []string{mdrekvizit.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdrekvizit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MDRekvizitUpdateOne is the builder for updating a single MDRekvizit entity.
type MDRekvizitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MDRekvizitMutation
}

// SetNameeng sets the "nameeng" field.
func (mruo *MDRekvizitUpdateOne) SetNameeng(s string) *MDRekvizitUpdateOne {
	mruo.mutation.SetNameeng(s)
	return mruo
}

// SetSynonym sets the "synonym" field.
func (mruo *MDRekvizitUpdateOne) SetSynonym(s string) *MDRekvizitUpdateOne {
	mruo.mutation.SetSynonym(s)
	return mruo
}

// SetPor sets the "por" field.
func (mruo *MDRekvizitUpdateOne) SetPor(s string) *MDRekvizitUpdateOne {
	mruo.mutation.SetPor(s)
	return mruo
}

// SetType sets the "type" field.
func (mruo *MDRekvizitUpdateOne) SetType(s string) *MDRekvizitUpdateOne {
	mruo.mutation.SetType(s)
	return mruo
}

// SetOwnerID sets the "owner_id" field.
func (mruo *MDRekvizitUpdateOne) SetOwnerID(s string) *MDRekvizitUpdateOne {
	mruo.mutation.SetOwnerID(s)
	return mruo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (mruo *MDRekvizitUpdateOne) SetNillableOwnerID(s *string) *MDRekvizitUpdateOne {
	if s != nil {
		mruo.SetOwnerID(*s)
	}
	return mruo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (mruo *MDRekvizitUpdateOne) ClearOwnerID() *MDRekvizitUpdateOne {
	mruo.mutation.ClearOwnerID()
	return mruo
}

// SetWidthSpisok sets the "widthSpisok" field.
func (mruo *MDRekvizitUpdateOne) SetWidthSpisok(f float64) *MDRekvizitUpdateOne {
	mruo.mutation.ResetWidthSpisok()
	mruo.mutation.SetWidthSpisok(f)
	return mruo
}

// AddWidthSpisok adds f to the "widthSpisok" field.
func (mruo *MDRekvizitUpdateOne) AddWidthSpisok(f float64) *MDRekvizitUpdateOne {
	mruo.mutation.AddWidthSpisok(f)
	return mruo
}

// SetOwner sets the "owner" edge to the MDTabel entity.
func (mruo *MDRekvizitUpdateOne) SetOwner(m *MDTabel) *MDRekvizitUpdateOne {
	return mruo.SetOwnerID(m.ID)
}

// Mutation returns the MDRekvizitMutation object of the builder.
func (mruo *MDRekvizitUpdateOne) Mutation() *MDRekvizitMutation {
	return mruo.mutation
}

// ClearOwner clears the "owner" edge to the MDTabel entity.
func (mruo *MDRekvizitUpdateOne) ClearOwner() *MDRekvizitUpdateOne {
	mruo.mutation.ClearOwner()
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MDRekvizitUpdateOne) Select(field string, fields ...string) *MDRekvizitUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MDRekvizit entity.
func (mruo *MDRekvizitUpdateOne) Save(ctx context.Context) (*MDRekvizit, error) {
	var (
		err  error
		node *MDRekvizit
	)
	if len(mruo.hooks) == 0 {
		if err = mruo.check(); err != nil {
			return nil, err
		}
		node, err = mruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MDRekvizitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mruo.check(); err != nil {
				return nil, err
			}
			mruo.mutation = mutation
			node, err = mruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mruo.hooks) - 1; i >= 0; i-- {
			if mruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MDRekvizitUpdateOne) SaveX(ctx context.Context) *MDRekvizit {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MDRekvizitUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MDRekvizitUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mruo *MDRekvizitUpdateOne) check() error {
	if v, ok := mruo.mutation.Nameeng(); ok {
		if err := mdrekvizit.NameengValidator(v); err != nil {
			return &ValidationError{Name: "nameeng", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.nameeng": %w`, err)}
		}
	}
	if v, ok := mruo.mutation.Synonym(); ok {
		if err := mdrekvizit.SynonymValidator(v); err != nil {
			return &ValidationError{Name: "synonym", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.synonym": %w`, err)}
		}
	}
	if v, ok := mruo.mutation.Por(); ok {
		if err := mdrekvizit.PorValidator(v); err != nil {
			return &ValidationError{Name: "por", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.por": %w`, err)}
		}
	}
	if v, ok := mruo.mutation.GetType(); ok {
		if err := mdrekvizit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.type": %w`, err)}
		}
	}
	if v, ok := mruo.mutation.OwnerID(); ok {
		if err := mdrekvizit.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`ent: validator failed for field "MDRekvizit.owner_id": %w`, err)}
		}
	}
	return nil
}

func (mruo *MDRekvizitUpdateOne) sqlSave(ctx context.Context) (_node *MDRekvizit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mdrekvizit.Table,
			Columns: mdrekvizit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mdrekvizit.FieldID,
			},
		},
	}
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MDRekvizit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mdrekvizit.FieldID)
		for _, f := range fields {
			if !mdrekvizit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mdrekvizit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.Nameeng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldNameeng,
		})
	}
	if value, ok := mruo.mutation.Synonym(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldSynonym,
		})
	}
	if value, ok := mruo.mutation.Por(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldPor,
		})
	}
	if value, ok := mruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mdrekvizit.FieldType,
		})
	}
	if value, ok := mruo.mutation.WidthSpisok(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: mdrekvizit.FieldWidthSpisok,
		})
	}
	if value, ok := mruo.mutation.AddedWidthSpisok(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: mdrekvizit.FieldWidthSpisok,
		})
	}
	if mruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdrekvizit.OwnerTable,
			Columns: []string{mdrekvizit.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mdrekvizit.OwnerTable,
			Columns: []string{mdrekvizit.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: mdtabel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MDRekvizit{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mdrekvizit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
